%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: 32.dvi
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips 32.dvi -o 32.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.02.26:0244
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (32.dvi)
@start
%DVIPSBitmapFont: Fa cmtt8 8 17
/Fa 17 122 df<123E127FEAFF80A5EA7F00123E0909738823>46
D<EB07F0EB1FFCEB7FFE48B5FC4814803907FC1FC0380FE0079038C0FFE0EA1F83485AEA
3E0FD87E1F13F0007C138FEB3F0738783E0338F87C01A212F0EB7800A5EB7C0112F8A239
783E03E0387C3F0790381F8FC0007E13FFD83E0F1380D83F071300381F83FE390FC0F9E0
9038E007F03807FC0F6CB5FC6C14C06C6C138090381FFE00EB07F81C297DA823>64
D<3803FF80000F13E04813F8487F80EB80FFEC3F80381F001FC7FC140F14FF137F0003B5
FC120F5A387FF00F130012FCA25A141F7E6C133F387F81FF90B512FC6C14FE7E000713C7
3901FE01FC1F1D7D9C23>97 D<B47E7FA41207A7EBC1FCEBC7FF01DF13C090B512E015F0
9038FE0FF8EBF8039038F001FCEBE000A249137EA2153EA5157E7F15FC7F14019038F803
F89038FE0FF090B5FC15E001DF138001CF1300380383F81F297FA823>I<ECFF8015C0A4
1407A7EB7F873801FFE74813F7000F13FF5A13E0383F803F387F001F007E130FA2481307
A25AA56C130FA2127E141F007F133F383F807FEBE0FF6CB512FE7E000313F76C13C73800
7F031F297EA823>100 D<EB3FC0EBFFF800037F4813FF481480381FF07F393F801FC0EB
000F007E130715E05AB6FCA415C000F8C8FC7EA2007EEB01C0007FEB03E0383F800713E0
391FF81FC06CB5FC6C14800001EBFE006C6C5AEB1FE01B1D7D9C23>I<EC01F090383F07
FC9038FFDFFE000313FF5A48147E381FE1FE9038807E18393F003F00A2003E7FA4003F5B
A2381F807EEBE1FE6CB45A485B5C001E13C0013FC7FC90C8FC121F1340380FFFFCECFF80
4814C04814F0397E0007F8007C130048147CA248143CA36C147C6C14FC007FEB03F8EBE0
1F6CB512F0000F14C06C14800001EBFE0038003FF01F2E7E9D23>103
D<B47E7FA41207A7EBC1FCEBC7FF01DF138090B512C0A29038FE0FE0EBF807EBF00313E0
A313C0AD39FFFE1FFF5CA38020297FA823>I<133813FEA5133890C7FCA6EA7FFC487EA3
127FEA003EB3387FFFFEB6FCA36C13FE182A7AA923>I<EA7FFEB5FCA37EEA001FB3AD00
7FB512C0B612E0A36C14C01B297CA823>108 D<397E1F01F039FF7FC7FC9038FFEFFE14
FF6C80390FE1FE1FEBC1FC01C07FEB80F8A2EB00F0AE3A7FE3FE3FE026FFF3FF13F0A326
7FE3FE13E0241D819C23>I<397FF00FE039FFF87FF8ECFFFC13FB6CB5FCC613F8ECC078
EC800091C7FC5BA25BA35BAA387FFFFCB57EA36C5B1E1D7E9C23>114
D<137013F8A7007FB51280B612C0A36C1480D800F8C7FCACEC01C0EC03E0A3EBFC07140F
9038FE1FC0EB7FFF158090383FFE00EB0FFCEB07F01B257EA423>116
D<39FF807FC001C013E0A400071303B01407140FEBE03F90B6FC7EA2C613F3EB3FC1201D
7F9C23>I<39FFF03FFCA5390F8007C000071480A2EBC00F00031400A26D5A0001131EA2
EBF03E0000133CA2EBF87CEB7878A2EB7CF8EB3CF0A2133F6D5AA36D5A6D5A1E1D7E9C23
>I<397FF00FFE39FFF81FFFA3397FF00FFE001FC712F86C14F0A57F390783E1E0EB87F1
A3EB8FF90003EB79C013CFA2EBDF7BA2EBDE3B00011480EBFE3FA2EBFC1FA23900F80F00
201D7F9C23>I<39FFF03FFCA539078007C0158013C00003130F1500EA01E05CEBF01E12
00A26D5A1378A26D5AA3EB1E7014F0130EEB0FE0A213075CA35CA2130F91C7FCA2EA3E1F
EA7F1E133EEA7CFC127F5B6C5A6C5AEA0F801E2C7E9C23>121 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmti8 8 42
/Fb 42 122 df<ED3FE0913901FFF8F8913807E03E91380F801E91381F003FEE7FF0143E
A2027E133B027CEB03E0A3160702FC14C05CA2160F1780017FB6FCA2903901F0001F1700
A213034A5B163EA30107147E4A137CA316FC5E130F5C03011360EEF0E0A2131F140016F1
EEE1C05BEEE380013EEB00F7EE7F00163E017E91C7FC137CA3EA3878EAFCF8A25BA2EAF1
E0EAF3C0EA7F80001ECAFC2D3D81AE2A>13 D<DB3FE0EBFFE0912701FFF80713FC913B07
E03E0FC01F913C0F801E3F00078091391F003E7C047E141F023E5CA2027EEB39F0027C01
01EC0E0096C7FC160302FC5C5CA401011407017FB812FCA2903B01F00007C00061160F01
035D4A150161A2161F0107ED00034A5EA34C1307010F023E5C5CA2F00FC361011F147E16
7C91C7FC198F190E4914FC013E4A5CF0079CF003F803016E5A017E4A90C8FC137CA24B5A
3838F83800FC13FC4B5A01F05C00FD4ACAFC39F1E0F01E39F3C0783C397F803FF0391E00
0FC0413D81AE3F>I<1338137C13FC1201EA03F8EA07E0EA0FC0EA1F80EA3E005A5A12E0
12400E0D69AD24>19 D<EA0780EA0FC0EA1FE0123FA3121F120FEA00C0A2120113801203
13005A120E5A5A5A5A5A0B1571AD16>39 D<EA0380EA0FE0121FA213F0A213E0EA076012
0013E013C0120113801203EA07001206120E5A5A12F012C00C157B8716>44
D<387FFFC0A2B5FCA26C130012057A901A>I<011FB512FCEEFF80903A00FE000FC0EE03
E04AEB01F017F80101140017FC5CA2130317F84A1301A20107EC03F017E04AEB07C0EE0F
80010FEC3F0016FE9138C007F891B512E04914F89138C0007C4A7F82013F1580A291C712
0FA25BA2017E141FA213FEEE3F005B167E00015D4B5A49495A4B5A0003EC3F80B600FEC7
FC15F82E2D7BAC32>66 D<DA01FE133091390FFFC07091393F01E0F09138F80079D903E0
133D4948EB1FE0D91F80130F49C7FC017E14074915C0485A485A5B00071680485AA2485A
170048CAFCA25A127EA312FE5AA5163848157816707E16F0007C5D15014B5A6C5D4BC7FC
6C140E6C6C133C6C6C5B6C6C485A3900F80FC0D97FFFC8FCEB0FF82C2F75AD33>I<011F
B512FCEEFF80903A00FE000FC0EE03E04AEB01F0EE00F80101157C173C4A143E171E0103
151FA25CA21307A25CA2130FA24A143FA2131F173E4A147EA2013F157C17FC91C8FC17F8
49EC01F0A2017EEC03E0A201FEEC07C0EE0F8049EC1F00163E00015D5E49495AED07C000
03023FC7FCB612FC15E0302D7BAC36>I<011FB612FEA2903900FE0001EE007E4A143EA2
0101151E171C5CA21303A25C16E001071301170002E05B1503130F15074A485A91B5FC5B
ECC01F4A6CC7FCA2133FA2DA000E13E0A2491401030013C0017E1403178001FE14071700
495C161E12015E49147CED01FC0003EC0FF8B7FC5E2F2D7CAC30>I<903B1FFFF81FFFF8
A2D900FEC7EAFE00A24A5CA2010114015F5CA2010314035F5CA2010714075F5CA2010F14
0F5F5C91B6FC5B9139C0001F805CA2013F143F94C7FC91C7FCA2495C167E137EA201FE14
FE5E5BA2000114015E5BA200031403B500C0B512C0A2352D7BAC35>72
D<90381FFFFEA2D900FEC7FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA213
1FA25CA2133FA291C7121CA249143C1638017E1478167001FE14F0A249EB01E0A2000114
03ED07C049130FED3F80000314FFB7FC1600262D7BAC2D>76 D<4AB4FC020F13C091383E
03F09138F8007CD903E07FD907807F011FC77E013E15804914074915C0485AEE03E0485A
485AA2485A121F90C8FC5AA2003E1507127EA348ED0FC0A3EE1F80A217005E163E167E16
7C16FC4B5A007C5D4B5A6C4A5A4B5A6C4AC7FC6C6C133E6D13F83903E003F03901F80FC0
26007FFFC8FCEB0FF02B2F75AD37>79 D<011FB512FCEEFF80903A00FE000FE0EE03F04A
EB00F8A20101157CA25C177E130317FC5CA20107EC01F8A24AEB03F017E0010FEC07C0EE
0F804AEB3F00ED01FC91B512F04991C7FC0280C8FCA3133F91C9FCA35B137EA313FE5BA3
12015BA21203B512C0A22F2D7CAC30>I<011FB512E016FC903900FE003FEE0FC04AEB07
E016030101EC01F0A24A14F8A21303EE03F05CA20107EC07E017C04AEB0F80EE1F00010F
143E16FC9138C007F091B512805B9138C00FE091388003F06F7E133F6F7E91C7FCA24913
01A2017E5CA201FE1303A2495C17080001163C17384914E0EEF07800031670B5D8C00113
E09238007FC0C9EA1F002E2E7BAC34>82 D<91380FF00C91383FFC1C9138F80F3C903903
C007BC9039078003FC90390F0001F8131E491300A24914F0A313F816E0A216007F7F6D7E
EB7FF8ECFF806D13E06D13F801077F01017FEB001FEC01FF6E7E8181A281121CA35D003C
141EA25DA2007E5C5D007F495A6D485A26F1F01FC7FC38E07FFC38C00FF0262F7BAD28>
I<000FB712F0A23A1FE00FE00701001401001E02C013E0481500141F12380078EC8001A2
0070013F14C012F0481400A25CC791C7FC147EA214FEA25CA21301A25CA21303A25CA213
07A25CA2130FA25CA2131FA25CA2133F003FB57EA22C2D74AC33>I<B56CEBFFFCA2D807
F0C7EA1FC01780491500161E6D141C00035D167816705EA24B5A4B5A7F00014AC7FC5D15
0E5DA25D15786D13705D000013015D4A5AA24AC8FC5C140E6D5A137E5C5CA25C137F5C5C
A26DC9FCA2133E133CA22E2E72AC35>86 D<010FB612C0A2903A1FF8003F8002C014004A
5B49C712FE013E495A013C495A49495A5E0170130F01F0495A49495A4BC7FC15FE90C75A
14014A5A4A5A4A5A4A5A5D143F4AC8FC14FE495A495A5C49481370130F494813F049485B
49C7FC017E1301495C00011403485A4848495A485A49130F4848131F003F027FC7FC397F
0003FFB7FC5D2A2D7AAC2C>90 D<EB07C0EB1FF090387C39C0EBF81FEA01F03803E00FEA
07C0120FD81F801380A2EA3F00141F481400127EA25C00FE133E5AA2EC7E18EC7C385AA2
14FCD878011378397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001D1F799D
24>97 D<13F8121FA21201A25BA21203A25BA21207A25BA2120FEBC7C0EB9FF0EBF87838
1FF03CEBE03EEBC01EEB801FEA3F00A2123EA2007E133FA2127CA2147F00FC137E5AA214
FCA214F8130114F0EB03E0EA780714C0383C0F80381E3E00EA0FF8EA03E0182F78AD21>
I<EB01F8EB0FFE90383E0780EBFC03D801F013C03803E0070007130FEA0FC00180138012
1F48C8FCA25A127EA312FE5AA5EC0180007CEB03C0EC0780EC0F006C131E001E137C380F
83F03807FFC0C648C7FC1A1F799D21>I<153EEC07FEA2EC007EA2157CA215FCA215F8A2
1401A215F0A21403EB07C390381FF3E0EB7C3BEBF81FEA01F03903E00FC0EA07C0120FEA
1F801580EA3F00141F5A007E1400A25C12FE48133EA2EC7E18153848137CA214FCD87801
1378397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001F2F79AD24>I<EB03
F8EB0FFEEB3E0FEBF8073901F00380EA03E0EA07C0000F1307D81F8013005C383F001E5C
387F03F8EBFFE049C7FC007EC8FC12FE5AA4127CEC0180EC03C0EC07806CEB0F00141E6C
137C380F83F03803FFC0C648C7FC1A1F799D21>I<EC01F0EC07FCEC0F9EEC1F1EEC1E3E
EC3E7EA3EC7C381500A314FC5CA590387FFFF0A2903801F000A313035CA413075CA4130F
5CA4131F91C7FCA45B133EA4137E137CA3EA38F812FCA25B12FDEAF1E0EAF3C0EA7F8000
1EC8FC1F3D81AE16>I<14F8EB03FE90380F873890381F03F8137EEB7C0113F81201EA03
F015F0EA07E01403120F01C013E0A21407121F018013C0A2140FA21580141F120F143FEC
7F006C6C5AEA03C33801FFBF38007E3E1300147EA2147CA214FC00385BEAFC015C495A48
485A38F01F80D87FFEC7FCEA1FF01D2C7C9D21>I<131FEA03FFA2EA003FA2133EA2137E
A2137CA213FCA25BA21201147E9038F3FF809038F787C03903FE03E013FC13F8A2EA07F0
13E0A213C0000F130715C01380A2001F130F15801300141F481406150E003E133F143E00
7E141EEC7E1C007C137CEC3C3812FC157048EB1FE00070EB07801F2F7BAD24>I<130E13
1FEB3F80A2EB1F00130E90C7FCA9EA03E0EA0FF0EA1E78EA1C7C12381278127013FCEAF0
F812E012E1EAC1F0120112035B12075BA2120F13831387121F13075BEA3F0E123EEA1E1C
133C1338EA0FF0EA03C0112E7AAC16>I<EC0380EC07C0140FA3EC070091C7FCA9EB01F0
EB07FCEB0F1E131EEB1C1F13381378EB703FEBF03E13E0A2EBC07E1300147CA214FCA25C
A21301A25CA21303A25CA21307A25CA2130FA25CA2131F003890C7FCEAFC3F133E5B485A
EAF1F0EA7FC0001FC8FC1A3B82AC16>I<131FEA03FFA2EA003FA2133EA2137EA2137CA2
13FCA25BA21201EC01E09038F007F0EC1E380003EB3878EC71F8EBE0E1EBE1C13807E381
EC00E049130013CEEA0FFC13F0A213FF381F9FC0EB87E0EB03F01301003F14301570123E
A2007E14F015E0007C13E014E100FC14C0903800F38048EB7F000070131E1D2F7BAD21>
I<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380
A2121FA21300A25AA2123EA2127EA2127CA2EAFC30137012F8A213F013E012F012F113C0
12FBEA7F80EA1E000E2F7AAD12>I<3B07801FC007F03B1FE07FF01FFC3B3DF1E0F8783E
3B38F3C078F01E3B78FF007DC01FD870FEEB7F80A2D8F1FC1400D8E1F8137EA249137C00
C302FC5B0003163E495BA200070101147E177C01C05B17FC000F0103ECF83018700180EB
E00117F0001F010715F0040313E0010001C013E0EFE1C048010F1301EFE380003E913980
00FF00001C6DC7123C341F7A9D3A>I<3907801FC0391FE07FF0393DF1E0F83938F3C078
3978FF007CEA70FEA2EAF1FCEAE1F8A25B00C314FC00035C5BA2000713015D13C0140300
0FECE0C015E1EB800715C1001F14C3020F13800100138391380787005A158E003EEB03FC
001CEB00F0221F7A9D28>I<EB03F8EB0FFE90383E0F809038FC07C03801F003D803E013
E01207390FC001F01380121FEA3F0014035A127EA2140700FE14E05AA2EC0FC0A2EC1F80
A2007CEB3F00143E5C6C5B381E01F0380F07C06CB4C7FCEA01FC1C1F799D24>I<90383C
01F09038FF07FC3901E79E1E9038C7BC0F000301F81380903887F00702E013C038078FC0
130F1480A2D8061F130F12001400A249131F1680133EA2017EEB3F00A2017C133E157E01
FC137C5DEBFE015D486C485AEC0F80D9F3FEC7FCEBF0F8000390C8FCA25BA21207A25BA2
120FA2EAFFFCA2222B7F9D24>I<3807803E391FE0FF80393CF3C1C03938F781E03878FF
07EA70FE13FC12F139E1F8038091C7FC5B12C312035BA21207A25BA2120FA25BA2121FA2
90C8FCA25AA2123E121C1B1F7A9D1E>114 D<EB0FC0EB7FF0EBF03C3801E01C3803C01E
EA0780143EA2000F133C1418EBC00013F813FF6C13C06C13E06C13F0EA007F1307130313
01EA780012FCA2130100F813E012E0EB03C038F0078038781F00EA1FFCEA07F0171F7A9D
1D>I<131C133EA2137EA2137CA213FCA25BA21201A2B512E0A23803F000A25BA21207A2
5BA2120FA25BA2121FA290C7FCA24813C01301123E130314801307003C1300130E131E6C
5AEA0FF0EA07C0132B7AA918>I<EA03C0D80FF01338D81E78137CD81C7C13FC003814F8
12781270EBFC01D8F0F813F012E012E138C1F003000114E0120313E01407000714C013C0
A2EC0FC3000F14871380A2141F158F0007EB3F0E147F01C0131C3903E1E7BC3901FF83F8
39007E01E0201F7A9D26>I<3903C001C0390FF003E0391E7807F0EA1C7C123800781303
0070130113FCD8F0F813E012E000E1130038C1F001000114C0120313E014030007148013
C0A2EC0700120F1380140EA25C12076D5A00035B6D5AC6B45A013FC7FC1C1F7A9D21>I<
90383E01F09038FF87F83903C7DE1E380783DC903803F87EEA0E01001E13F0EA1C03003C
14380038EBE000A2EA300700005BA3130F5CA3011F1318153814001238D87C3F137012FC
15E0EB7F0139F0FF03C03970E78780393FC3FE00381F00F81F1F7C9D21>120
D<EA03C0D80FF01338D81E78137CD81C7C13FC003814F812781270EBFC01D8F0F813F012
E012E138C1F003000114E0120313E01407000714C013C0A2140F000F14801380A2141F15
0000075B5C13C03803E1FE3801FFBE38007E3EEB007E147CA2003E5BA2387E01F0A2387C
03E0387007C06C485AD83C3EC7FCEA1FF8EA07E01E2C7A9D23>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmex7 7 1
/Fc 1 102 df<01FE14402603FFC013E0000F9038F003C0003F90B51280D87801EBFE00
39E0007FF80040EB0FE023077FA926>101 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmex10 10 3
/Fd 3 102 df<1430147014E0EB01C01303EB0780EB0F00A2131E5BA25B13F85B12015B
1203A2485AA3485AA3121F90C7FCA25AA3123EA2127EA6127C12FCB3A2127C127EA6123E
A2123FA37EA27F120FA36C7EA36C7EA212017F12007F13787FA27F7FA2EB0780EB03C013
01EB00E0147014301462738226>0 D<12C07E12707E123C7E7EA26C7E6C7EA26C7E7F12
007F1378137CA27FA37FA31480130FA214C0A31307A214E0A6130314F0B3A214E01307A6
14C0A2130FA31480A2131F1400A3133EA35BA2137813F85B12015B485AA2485A48C7FCA2
121E5A12385A5A5A14627C8226>I<D90FC01410D93FF81438D9FFFC14F0000301FFEB01
E03B07C07FC007803B0F001FF01F00003C903807FFFE48010113F800E06D13E00040EC1F
802D0A80BB2E>101 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe msbm10 10 2
/Fe 2 91 df<007FB612E0B712FE6C6F7E2703C01E0313E0000190393C00F3F00238EB70
F8EE783CEE381E83EE3C07161C18801703A617071800EE3C0FEE380E173EEE78FCEEF7F8
92380FFFE0023FB5128004FCC7FC16B8913838F03CED701CED781EED380EED3C0FED1C07
031E7FED0E03030F7FED0701EE81E0ED0380707E030113701778EEE0380300133C707EEE
700EEE780F9338380780EE3C03041C13C093381E01E00003013C90380E00F0007FB539F0
0FFFFEB67F6C8137397DB836>82 D<0007B712FC5AA23B0E1FF003C038903A3F00078078
01FC4A5AD80FF0495B49EB0E01D81F80011E5BED3C0390C738380780001E027890C7FCED
700FEDF00E001C903801E01E4B5A02031338C7EB80780207137091380F00F091380E01E0
021E5BEC1C03023C5BEC3807027890C8FC4A5AECE01E0101131CECC03C01031338903807
80784A5A495BEB0E01011E49EB0180D93C0314039038380780017890C7FCD9700F1407EB
F00E3801E01E4948EC0F0000031338D980785C00071370D900F05C48495CD81E0115F726
1C03C0EB01E7003C49495AD83807EC0F8E007890C7EA3F0E4848EB01FEB812FEA331397D
B83E>90 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi5 5 5
/Ff 5 115 df<127012F812FCA2127C120CA31218A2123012601240060D7A8413>59
D<EBFC603803FEF0EA0787EA0E01001C13E012381278A238F003C0A314C2EB0786A2EA70
0F38383F8C381FF3F8380FC0F017127C9120>97 D<EA7F80A2120F90C7FCA4121EA4EA3C
7CEA3DFF383F8780383E03C0EA7C011278A3EAF003A3EB0780A2EB0F00EA701E6C5AEA1F
F0EA0FC0121D7C9C1A>I<EA1FE0A212035BA4485AA4380F00F8EB01FCEB070CEB0C1C38
1E383CEB607CEA1FC0EBE038383FF800EA3C7C131E14040078130CA21418130F00F013F0
386003E0161D7C9C1F>107 D<380F07E0383F8FF83833D81CEA63F038C3E03CEBC07C12
03143838078000A448C7FCA4121E120C16127D911C>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmr5 5 1
/Fg 1 50 df<1360EA01E0120F12FF12F11201B3A3387FFF80A2111C7B9B1C>49
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh eufm10 10 1
/Fh 1 84 df<151EDBFF805B020701E01480023F01F8140091B500FE5B903A01F07FFF80
902607800FEBE00690260F0003EBF81E013E0100EBFFFC0178023F5B496E5B000103075B
4902015B48486E90C7FC0007161C260F800691C8FC141E381F007814F848485AEA3E03A2
EA7E07EF7F806E90381FFFF0DAFE07B57E00FE90B77E6D82846DECC01F9028007FE00003
138091C87E6C82A2187FA26D163FA2127F6D1700A27F003F173E7F001F177E6D167C6D16
786C6C16F86C6C5E6E4A5A6C6D4A5A6C01F04A5A6C6D021FC7FC6DB4147C6D9038E003F8
6D90B512E0010792C8FC010014F8020F1380393B7BB845>83 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmsy7 7 7
/Fi 7 104 df<B712FEA327037A8F34>0 D<D801FE15603807FF80487F4813F0263F03F8
14E0383C00FC48017E14C00070011F1301006090380FC00300E0903907E00780913803F8
1F486DB512006E6C5A6F5AED0FF02B0F7C9534>24 D<13E0EA01F0EA03F8A3EA07F0A313
E0A2120F13C0A3EA1F80A21300A25A123EA35AA3127812F8A25A12100D1E7D9F13>48
D<49B5FC130F133F01FFC7FCEA01F8EA03E0EA078048C8FC121E121C123C123812781270
A212F05AA2B7FCA300E0C8FCA27E1270A212781238123C121C121E7E6C7EEA03E0EA01F8
6CB4FC013FB5FC130F130120277AA12D>50 D<161E163EA2167E16FEA2150116BE150316
3E15071506150E151CA215381530ED703F156015E04A487EA2EC0380EC0700A2140E5C83
5C027FB5FCA291B6FC903901C0000F13034A80D84007C7FCEA600ED8F01E1407D8FC7C81
B45A49EDF78049913803FE006C485D6C48EC01F0000ECBFC312D7DA935>65
D<147EEB03FEEB0FE0EB1F00133E5BB35BA2485AEA07E0EAFF8000FCC7FCB47EEA07E0EA
01F06C7EA2137CB37F7FEB0FE0EB03FEEB007E173B7BAB22>102
D<12FCB47EEA0FE0EA01F06C7E137CB37FA27FEB0FC0EB03FEEB007EEB03FEEB0FC0EB1F
00133EA25BB35B485AEA0FE0EAFF8000FCC7FC173B7BAB22>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmti10 10 47
/Fj 47 123 df<04FFEB03F003039038E00FFC923A0FC0F01F1E923A3F00783E0F923A7E
01F87C3FDB7C03EBFC7F03FC14F8DA01F813F905F1137EDC01E1133C913B03F00003F000
A314074B130760A3140F4B130F60A3010FB812C0A3903C001F80001F8000A3023F143F92
C790C7FCA44A5C027E147EA402FE14FE4A5CA413014A13015FA313034A13035FA313074A
495AA44948495AA44948495AA3001CD9038090C8FC007E90380FC03F013E143E00FE011F
5B133C017C5C3AF8780F01E0D878F0EB07C0273FE003FFC9FC390F8000FC404C82BA33>
11 D<EE7FE0923903FFFC7E92380FC03E92381F000F033EEB3FFE4B137F03FC14FC5D14
01173D4A48EB01F8A21703A24A4814F0A21707A2020F15E05D170FA218C0010FB7FCA390
3B001F80001F80A2173F143F92C71300A25FA24A147E147E17FEA25F14FE4A1301A25FA2
010114035CEFF070A21607010316F04AECE0E0A3EFE1C013074A14C3933803E380EE01E7
933800FF004948143C94C7FCA3495AA3001C90CAFC127E133E12FE133C137CEAF878EA78
F0EA3FE0EA0F80374C82BA31>13 D<EA01E0EA07F0120F13F8121FA3120FEA07B0EA0030
A21370136013E013C0120113801203EA0700120E5A5A5A5A5A0D196EB919>39
D<EA03C0EA07F0120F121F13F8A313F0EA07B0EA003013701360A213E013C01201EA0380
13005A120E5A5A5A5A5A0D197A8819>44 D<387FFFF8A2B5FCA214F0150579941E>I<12
0EEA3F80127F12FFA31300127E123C0909778819>I<15181538157815F0140114031407
EC0FE0141F147FEB03FF90383FEFC0148FEB1C1F13001580A2143FA21500A25CA2147EA2
14FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C7FC
497EB61280A31D3877B72A>49 D<EC03F8EC0FFE91383C0F809138F007C0903901E003E0
D903C013F09038078001020013F8130E131E90391C6000FCEB3870EC30011370A213F013
E0EC70030001016013F813C014E0ECC00701C114F0903881800F018314E09039C7001FC0
01FEEB3F80D80078140090C7127E5D4A5A4A5AEC07C0EC1F80023EC7FC14FCEB01F0EB07
C0495A011EC8FC137C4914C0484813015B485A4848130348C71380000E1407001E140F48
EC1F00D83FF85B397FFFC07E39783FFFFCEA700FD8F0075BD8E0015B6D13C0021FC7FC26
3A79B72A>I<EC03FCEC1FFF91387E07C09138F003E0903903C001F0D9078013F849C7FC
131E011C14FC133CEB38C0EB78E0EB7060150101F014F813E0A2ECE003D971C013F09038
7F8007D91E0013E090C7EA0FC0ED1F80ED3F00157E5D49B45A4913E092C7FC9038000FC0
EC03F014016E7E81A381A5007E130100FE5CA31403485C00E05C14074A5A5D4A5A007049
C7FC0078137E6C13F8381E07F03807FF80D801FCC8FC263A78B72A>I<16E0ED01F01503
A3150716E0A3150F16C0A2151F1680A2ED3F00A3157EA2157C15FC5D14015D14035D1407
5D140F5D141F92C7FC143EA25CECF81C153E903801F07EEB03E014C090380780FE130F49
485A133EEB7C01137801F05BEA01E03803C003EA0FFE391FFFC3F04813FB267C01FF1340
3AF0003FFFE000601307C71400EC0FE05DA3141F5DA3143F92C7FCA4143E141C24487DB7
2A>I<010314186E13F8903907F007F091B512E016C01600495B15F8010E13E0020CC7FC
011EC8FC131CA3133C1338A313781370A2147F9038F3FFC09038EF83E09038FC01F0496C
7E485A497F49137CC8FC157EA315FEA41401000C5C123F5A1403485C5A4A5A12F800E05C
140F4A5A5D6C49C7FC0070137E00785B387C01F8383E07F0381FFFC06C90C8FCEA01F825
3A77B72A>I<133C137E13FF5AA313FE13FCEA00701300B2120EEA3F80127F12FFA31300
127E123C102477A319>58 D<EE01C01603A21607160FA2161F83163FA2167F16FF16EF15
0116CFED038FA2ED070FA2150E151E151C1538A203707FA2EDE007A2EC01C014031580EC
0700A2140EA25CA25C027FB5FCA291B6FC9139E00007F849481303A2495A130791C7FC5B
130E5BA25B1378137013F0EA03F8486C4A7EB56C48B512F0A3343C7BBB3E>65
D<DB03FE130E92393FFF801E92B5EAE03C913903FE01F0913A0FF000787CDA3FC0EB3CFC
4AC7EA1FF802FE140FEB03FC49481407494815F049481403495A5C49C813E05B485A5B00
0317C0485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90CBFCA41738A217784816
707E17F06C5E16015F16036C6C4A5A94C7FC001F150E6D141E000F5D6D5C6C6C495A6C6C
EB03C0D801FEEB0F8027007F807EC8FC6DB45A010F13E0010090C9FC373D74BA3B>67
D<0107B712FEA3903A000FF000074B1300187C021F153CA25DA2143FA25D1838147FA292
C8FCEE03804A130718004A91C7FCA201015CA24A131E163E010314FE91B5FC5EA2903807
F800167C4A1378A2130FA24A1370A2011F14F0A24A90C8FCA2133FA25CA2137FA291CAFC
A25BA25B487EB6FCA337397BB836>70 D<0103B512F8A390390007F8005DA2140FA25DA2
141FA25DA2143FA25DA2147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2
130FA25CA2131FA25CA2133FA25CA2137FA291C8FC497EB6FCA25C25397CB820>73
D<0103B500F890387FFFE0A21AC090260007F8C7380FFC004B15E061020F4BC7FC183E4B
5C18F0021F4A5A4D5A4BEB0F804DC8FC023F143C5F4B5B4C5A027FEB07C04CC9FCED001E
5E4A5BED01FCECFE0315070101497E151FECFC7C4B7E903903FDE07FDAFFC07F1580ED00
3F49488014F84A131F83130F160F4A801607011F81A24A130383133F16014A80A2017F6E
7EA291C8FC494A7F007F01FE011F13FCB55CA243397CB840>75 D<0107B512FCA25E9026
000FF8C7FC5D5D141FA25DA2143FA25DA2147FA292C8FCA25CA25CA21301A25CA21303A2
5CA21307A25CA2130F170C4A141CA2011F153C17384A1478A2013F157017F04A14E01601
017F140317C091C71207160F49EC1F80163F4914FF000102071300B8FCA25E2E397BB834
>I<92383FC00E913901FFF01C020713FC91391FC07E3C91393F001F7C027CEB0FF84A13
0749481303495A4948EB01F0A2495AA2011F15E091C7FCA34915C0A36E90C7FCA2806D7E
14FCECFF806D13F015FE6D6D7E6D14E0010080023F7F14079138007FFC150F15031501A2
1500A2167C120EA3001E15FC5EA3003E4A5AA24B5AA2007F4A5A4B5A6D49C7FC6D133ED8
F9F013FC39F8FC03F839F07FFFE0D8E01F138026C003FCC8FC2F3D7ABA2F>83
D<0007B812E0A25AD9F800EB001F01C049EB07C0485AD900011403121E001C5C003C1780
1403123800785C00701607140700F01700485CA2140FC792C7FC5DA2141FA25DA2143FA2
5DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CEB3FF000
7FB512F8B6FCA2333971B83B>I<B5D8F80FB590381FFFF06102F018E0D807FEC7D87FE0
903803FE00D803F8DA3F806D5AF100F0A24F5A621903621907047F92C7FC190E16FF4B5D
A2DB03BF5C7F0001DA073F5CA2030E5D83DB1C1F495A180303385D4EC8FC157003F0140E
15E0DA01C05CA2DA03805CA2DA07005CA2020E5D17C14A5DEFC3805C027802C7C9FC1470
4A14CE13FE6C6C4814DCA24A14F8A291C75B160F495D5F5B5F5B4992CAFCA249140E4C3B
6FB853>87 D<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A485A120F
EBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A2141F1583
1680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F0
00F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EB
E0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A21380A2123F13
00A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E5C387801F800
7C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<147F903803FFC0
90380FC1E090381F0070017E13784913383901F801F83803F003120713E0120FD81FC013
F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007EEB01E0003EEB
03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01F815FFA31503
16F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07FE90381F877F
90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F801403127F01
005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C017F1300ECFF
076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>I<147F903803
FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F14F0383F8001
EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14381578007E14
F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D2677A426>I<
ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0160014075DA4140F
5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA414FE5CA413015CA413
035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C137C1378EAF8F012
78EA3FC0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E09038
07C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480A215
3F1207491400A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB787B
EB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C3878
01F8387C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FFA3EA00075CA3130F
5CA3131F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F
1400485A16C05B49EB1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD980
01131C15F8163C003F01031338010013F0A216704814E0007E15F016E0EDE1C000FE9038
01E38048903800FF000038143C263B7BB92A>I<EB01C0EB07E014F0130F14E01307EB03
8090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA2
12015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A213
0E6C5AEA07F8EA01E0143879B619>I<150E153F157FA3157E151C1500ABEC1F80EC7FC0
ECF1F0EB01C090380380F813071401130F130E131EEB1C03133C013813F0A2EB0007A215
E0A2140FA215C0A2141FA21580A2143FA21500A25CA2147EA214FEA25CA21301A25CA213
035C121C387E07E0A238FE0FC05C49C7FCEAF83EEA787CEA3FF0EA0FC0204883B619>I<
EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB0F80ED3FE015
F09039FE01C1F09038FC0387EC0707140E0001011C13E0EBF83891383003800270C7FC00
035BEBF1C0EBF38001FFC8FCEA07FC7FEBFFC0EBE7F8380FE1FCEBC07E147F80001F8090
39801F81C0A21583003F013F138001001303A21507481500007E133EEC1E0E151E00FE6D
5A48EB07F80038EB01E0243B7BB926>I<EB0FC0EA07FFA3EA001F1480A2133FA21400A2
5BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA212
3FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7CE0121F
EA0F80123B79B915>I<D801E001FEEB07F03C07F803FF801FFC3C0E3C0F07C0783E3C1E
3E3C03E1E01F261C1F78D9F3C013803C383FF001F7800F02E01400007801C013FE007018
C002805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700495CA2030F5C0001
177E495C18FE031F5C120349DA8001131C18F8033F153C00070403133849020013F0A24B
1570000F17E049017E15F019E003FEECE1C0001FEE01E34949903800FF000007C7003814
3C3E2679A444>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C03E0261C1F787F
39383FF00114E0007813C000708114804A485AEAF07FEAE07EA20000140701FE5C5BA215
0F00015D5B151F5E12034990383F8380160316070007027F130049137EA2160E000F147C
49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>I<147F903803FFC090
380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B120F485AA2485A157F
127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0140F007C14C0007EEB
1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A42A>I<9039078007
C090391FE03FF090393CF0787C903938F8E03E9038787FC00170497EECFF00D9F0FE1480
13E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A2010F5C5E5C4B5A131F
5EEC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3FF0EC0F8001FEC9FC
A25BA21201A25BA21203A25B1207B512C0A3293580A42A>I<ECF803903807FE0790381F
871F90383E03BF017C13FEEBF80112013803F000484813FC120F5B001F130115F8EA3F80
A2007F1303010013F0A34813074814E0A3140F4814C0A3141F1580143FA2007C137FECFF
006C5AEB03BF381F0F7F3807FE7EEA01F0C7FC14FE5CA313015CA313035C130748B512C0
A3203577A426>I<3903C003F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383F
C0EB7F800078150000701300151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312
075BA3120F5BA3121F5BA3123F90C9FC120E212679A423>I<14FE903807FF8090380F83
C090383E00E04913F00178137001F813F00001130313F0A215E00003EB01C06DC7FC7FEB
FFC06C13F814FE6C7F6D13807F010F13C01300143F141F140F123E127E00FE1480A348EB
1F0012E06C133E00705B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380EB07
C0130FA4131F1480A3133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312035B
A312075BA3120F5BA3121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA3E03
381F0780380F0F00EA07FCEA01F0183579B31C>I<13F8D803FEEB01C0D8078FEB03E039
0E0F8007121E121C0038140F131F007815C01270013F131F00F0130000E015805BD8007E
133FA201FE14005B5D120149137EA215FE120349EBFC0EA20201131E161C15F813E0163C
D9F003133814070001ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F0027
2679A42D>I<01F0130ED803FC133FD8071EEB7F80EA0E1F121C123C0038143F49131F00
70140FA25BD8F07E140000E08013FEC6485B150E12015B151E0003141C5BA2153C000714
385B5DA35DA24A5A140300035C6D48C7FC0001130E3800F83CEB7FF8EB0FC0212679A426
>I<01F01507D803FC903903801F80D8071E903907C03FC0D80E1F130F121C123C003802
1F131F49EC800F00701607A249133FD8F07E168000E0ED000313FEC64849130718000001
147E5B03FE5B0003160E495BA2171E00070101141C01E05B173C1738A217781770020314
F05F0003010713016D486C485A000190391E7C07802800FC3C3E0FC7FC90393FF81FFE90
390FE003F0322679A437>I<903907E007C090391FF81FF89039787C383C9038F03E703A
01E01EE0FE3803C01F018013C0D8070014FC481480000E1570023F1300001E91C7FC121C
A2C75AA2147EA214FEA25CA21301A24A1370A2010314F016E0001C5B007E1401010714C0
00FEEC0380010F1307010EEB0F0039781CF81E9038387C3C393FF03FF03907C00FC02726
7CA427>I<13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C123C0038140F4914C012
70A249131FD8F07E148012E013FEC648133F160012015B5D0003147E5BA215FE00075C5B
A214015DA314035D14070003130FEBF01F3901F87FE038007FF7EB1FC7EB000F5DA2141F
003F5C48133F92C7FC147E147C007E13FC387001F8EB03E06C485A383C1F80D80FFEC8FC
EA03F0233679A428>I<903903C0038090380FF007D91FF81300496C5A017F130E9038FF
FE1E9038F83FFC3901F007F849C65A495B1401C7485A4A5A4AC7FC141E5C5C5C495A495A
495A49C8FC131E5B49131C5B4848133C48481338491378000714F8390FF801F0391FFF07
E0383E1FFFD83C0F5B00785CD8700790C7FC38F003FC38E000F021267BA422>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmsy10 10 27
/Fk 27 111 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA
7F00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB
01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380F
C1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F090
380FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F0
4848EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<14
30147C14FE497E497F903807EFC090380FC7E090381F83F090383F01F890387E00FC4913
7E48487F4848EB1F804848EB0FC04848EB07E04848EB03F048C7EA01F8007EEC00FC4815
7CA2007E15FC6CEC01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F806C6CEB3F006C
6C137E017E5B6D485A90381F83F090380FC7E0903807EFC06DB45A6D90C7FC6D5A147C14
3026267EA72B>5 D<EC03FF023F13F09138FC00FCD903C0130F010FC7EA03C0013CEC00
F001701538498148488148488148C9EA038000061601000E17C048EE00E0001817600038
177000301730A20070173800601718A200E00278141C48D901FE140C4A7EA24A7FA46E90
C7FCA26E5A6CD90078141C006091C81218A20070173800301730A2003817700018176000
1C17E06CEE01C000061780000716036C6CED07006C6C150E6C6C5D01705D013C15F0010F
EC03C0D903C0010FC7FCD900FC13FC91383FFFF0020390C8FC36367BAF41>12
D<EB1FF0EBFFFE487F000714C0390FF01FE0391F8003F0393F0001F8003E130048147CA2
0078143C00F8143EA248141EA56C143EA20078143C007C147CA26C14F8003F1301391F80
03F0390FF01FE06CB512C0000114006C5BEB1FF01F1F7BA42A>14
D<EB1FF0EBFFFE487F000714C04814E04814F04814F8A24814FCA3B612FEA96C14FCA36C
14F8A26C14F06C14E06C14C0000114006C5BEB1FF01F1F7BA42A>I<020FB6128091B712
C01303010F1680D91FF8C9FCEB7F8001FECAFCEA01F8485A485A485A5B48CBFCA2123EA2
5AA2127812F8A25AA87EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB
1FF86DB71280010316C01300020F158091CAFCAE001FB812804817C0A26C1780324479B4
41>18 D<EF0180EF07C0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FC
ED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFC
EA07FCEA3FF0EA7FC048CBFC5AEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03
FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3F
E0EE0FF8EE03FE933800FF80EF3FC0170FEF038094C7FCAE007FB81280B912C0A26C1780
324479B441>20 D<126012F812FEEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB
03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE
3FE0EE0FF8EE03FE933800FF80EF3FC0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B
48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB
7FC04848CAFCEA07FCEA1FF0EA7FC048CBFC12FC1270CCFCAE007FB81280B912C0A26C17
80324479B441>I<020FB6128091B712C01303010F1680D91FF8C9FCEB7F8001FECAFCEA
01F8485A485A485A5B48CBFCA2123EA25AA2127812F8A25AA87EA21278127CA27EA27EA2
6C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FF86DB71280010316C01300020F1580323279AD
41>26 D<181EA4181F84A285180785727EA2727E727E85197E85F11F80F10FC0F107F000
7FBA12FCBCFCA26C19FCCCEA07F0F10FC0F11F80F13F00197E61614E5A4E5AA24E5A6118
0F96C7FCA260181EA4482C7BAA53>33 D<DA03C0143C0207153E4B141EA2020F151F92C8
7E4A82023E6F7E023C1503027C824A6F7E4A150001018349B87E498349834984013ECAEA
07C001FCEF03F04848717E4848717ED80FE0187FD83F80F01FC0B4CCEA0FF0A2D83F80F0
1FC0D80FE0F07F00D803F018FC6C6C4D5A6C6C4D5A013EEF07C06DB95A6D95C7FC6D5F6D
5FD901F0C95A01005F6E1501027C4B5A023C5E023E15076E4B5A6E93C8FC6F5C0207151E
A26F143E0203153C4C307DAC53>44 D<91381FFFFE91B6FC1303010F14FED91FF0C7FCEB
7F8001FEC8FCEA01F8485A485A485A5B48C9FCA2123EA25AA2127812F8A25AA2B712FE16
FFA216FE00F0C9FCA27EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB
1FF06DB512FE010314FF1300021F13FE283279AD37>50 D<4B7E4B7E4B7EA24B7EA24B7E
A2ED3E7CED7E7EED7C3E4B7EA24A486C7EA24A486C7EA24A486C7EA24A486C7EA24AC77E
4A80023E147C4A80A24A80A249486E7EA249486E7EA249486E7EA249486E7EA249C97E49
82013E167C4982A24982A24848EE0F80A24848EE07C0A24848EE03E0A24848EE01F0001F
18F890CBFC003E187CA248183EA2BBFCA36C18FE403C7BBB4B>52
D<EE0180EE03C01607A2EE0F80A2EE1F00A2163EA25EA25EA24B5AA24B5AA24B5A150F5E
4BC7FCA2153EA25DA25DA24A5AA24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2495A
A2495AA2495AA2495AA249C9FCA2133EA25B13FC5B485AA2485AA2485AA2485AA248CAFC
A2123EA25AA25AA25A12602A4E75BB00>54 D<007FB612F0B712F8A27EC91278B3A5003F
B612F85AA27EC91278B3A5007FB612F8B7FCA26C15F0253A7CB92E>57
D<18F017011707A3170FA2171F60173F1737177F176F17EF17CF04017F178F1603170FEE
0707160EA2161C161816381630167016E0A2ED01C016801503ED0700A2150E5DA25D1578
15705D02018103CFB5FCEC03BF4AB6FCA2020EC71203141E5C143802788100205B386001
E0EAF0036C4848140126FE1F8081B5C8FC190C49EEFF3C496F13F06C4817E06C4817806C
48EE7E00D8078093C7FC3E407DBB42>65 D<0203B512FE027FECFFF049B712FC010F16FF
90273FC3F00080D9780302077F2601E0071401D803C06F6C7ED80780163F000F171FEA1F
00484A140F123E5A0078010F5E12C0C7FC4B4A5AA296C7FC021F5D183E4B5C187860023F
4A5A4D5A92C7000FC8FC173EEE03F84AEBFFE0DA7E0313804B48C9FC4B7EECFC036F7F6F
7F0101147F4A80163F707E495A707EA249481307830403151049486E14F0F101E04A6D6C
EB03C0011F933880078070EC0F0049C8EBC01E716C5A013E92383FF0F0017EEEFFE0017C
6F1380496F48C7FC01E0ED07F0443B7FB846>82 D<EE3FF0923803FFFE030FEBFF80033F
14C0DBFC0713E0913801E000DA0780EB3FF04AC7121F4A140F143E027E1407027C15E014
FC18800101ED0F0094C7FCA280A280816D7F81EC7FF86E7E6EB4FC6E13C0020313F06E13
FC6E6C7E92381FFF8003077F03017F6F7FEE3FF8161F160F01706E7E48481403EA07C048
C8FC4815015A127E5FA200FE5E16036C5E4C5A6D5D6D4AC7FC6C6C141E6D5CD83FFC14F0
6CB4EB03E06C9038E03F806CD9FFFEC8FC000114F86C6C13C0D90FFCC9FC343D7FBA32>
I<1A801907F10F00023FB712FE49B85A010F17F0013F17C0494CC7FC2801E00003F0C9FC
48481307485A120F48C7485A5A5AA200FE4A5A5A12F01280C8485AA44BCAFCA415FEA44A
5AA44A5AA44A5AA4140F5DA35D141FA25D143FA292CBFC5CA2147E14FE5CA2495A5C495A
5C0102CCFC41427DBB2D>I<EC01F8140FEC3F80ECFC00495A495A495AA2130F5CB3A713
1F5C133F49C7FC13FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE137F6D7E131F80130F
B3A7801307A26D7E6D7E6D7EEC3F80EC0FF814011D537ABD2A>102
D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3A7801307806D7E6D7EEB007EEC
1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7131F5C133F91C7FC137E485AEA
07F0EAFFC000FCC8FC1D537ABD2A>I<14C0EB01E01303A214C01307A21480130FA2EB1F
00A2131E133EA25BA2137813F8A2485AA25B1203A25B1207A2485AA290C7FC5AA2123EA2
123C127CA2127812F8A41278127CA2123C123EA27EA27E7FA26C7EA212037FA212017FA2
6C7EA21378137CA27FA2131E131FA2EB0F80A2130714C0A2130314E0A21301EB00C01352
78BD20>I<126012F07EA21278127CA2123C123EA27EA27E7FA26C7EA212037FA26C7EA2
12007FA21378137CA27FA2131E131FA2EB0F80A2130714C0A2130314E0A414C01307A214
80130FA2EB1F00A2131E133EA25BA2137813F8A25B1201A2485AA25B1207A2485AA290C7
FC5AA2123EA2123C127CA2127812F8A25A126013527CBD20>I<126012F0B3B3B3B3A912
60045377BD17>I<126012F07EA21278127CA2123C123EA2121E121FA27E7FA212077FA2
12037FA212017FA212007FA21378137CA2133C133EA2131E131FA27F80A2130780A26D7E
A2130180A2130080A21478147CA2143C143EA2141E141FA2801580A2140715C0A2140315
E0A2140115F0A2140015F8A21578157CA2153C153EA2151E150C1F537BBD2A>110
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr7 7 40
/Fl 40 111 df<EC0380A24A7E4A7EA24A7EA2EC3BF81433EC61FCA2ECC0FE157E903801
807F81D903007F496D7E1306010E6D7E130C011C6D7E1318496D7E150149801500498000
01157F5B0003ED3F8090C8FC48ED1FC01206000EED0FE0120C48ED07F01603003FB712F8
A24816FCB812FEA22F2A7DA937>1 D<1306130C13181330136013E0EA01C0EA0380A2EA
07005A120E121EA2121C123CA35AA512F85AAB7E1278A57EA3121C121EA2120E120F7EEA
0380A2EA01C0EA00E0136013301318130C13060F3B7AAB1A>40 D<12C012607E7E7E120E
7EEA0380A2EA01C013E0120013F0A213701378A3133CA5133E131EAB133E133CA51378A3
137013F0A213E0120113C0EA0380A2EA0700120E120C5A5A5A5A0F3B7DAB1A>I<140EB3
A2B812E0A3C7000EC8FCB3A22B2B7DA333>43 D<1238127C12FEA3127C123807077B8613
>46 D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521>49
D<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15
005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA018039030003
0012065A001FB5FC5A485BB5FCA219267DA521>I<13FF000313E0380F01F8381C007C00
30137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC3800
01E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F01
F03807FFC0C690C7FC19277DA521>I<1438A2147814F81301A2130313071306130C131C
131813301370136013C012011380EA03005A120E120C121C5A12305A12E0B612E0A2C7EA
F800A7497E90383FFFE0A21B277EA621>I<0018130C001F137CEBFFF85C5C1480D819FC
C7FC0018C8FCA7137F3819FFE0381F81F0381E0078001C7F0018133EC7FC80A21580A212
30127C12FCA3150012F00060133E127000305B001C5B380F03E03803FFC0C648C7FC1927
7DA521>I<EB0FE0EB3FF8EBF81C3801E0063803C01F48485AEA0F005A121E003E131E91
C7FC5AA21304EB3FC038FCFFF038FDC078EB003CB4133E48131E141FA2481480A4127CA4
003C1400123E001E131E143E6C133C6C6C5A3803C1F03801FFC06C6CC7FC19277DA521>
I<1230123C003FB512E0A215C0481480A239700007000060130E140C48131C5C5CC75A5C
1301495AA249C7FC5B130E131EA3133E133CA2137CA413FCA813781B287DA621>I<137F
3803FFE0380781F8380E007C48131E5A801278A3127C007E131EEA3F80EBE03C6C6C5A38
0FFCF03807FFC06C5BC613E0487F38079FFC380F07FEEA1E0348C67E48133FEC1F804813
0FA21407A315001278140E6C5B6C5B380F80F03803FFE0C66CC7FC19277DA521>I<137F
3801FFC03807C1E0380F0070001E1378003E7F003C133E007C131EA200FC131FA41580A4
007C133FA2123C003E137F001E135F380F01DF3807FF9F3801FE1FD8001013001300A214
3E123C007E133CA25C5C007C5B383003C0381C0780D80FFFC7FCEA03F819277DA521>I<
140EA2141FA34A7EA3EC6FC0A2ECEFE014C7A290380183F0A390380301F8A201067F1400
A249137EA2011C137F01187FA24980013FB5FCA2903960000FC0A201E080491307A24848
6D7EA200038115011207D81FC0497ED8FFF890383FFFE0A22B2A7EA931>65
D<B612E015FC3907F0003F0003EC0FC0ED07E01503ED01F016F8A6ED03F016E01507ED1F
C0ED7F0090B512FC819039F0003F80ED07E0ED03F0ED01F8ED00FCA2167EA616FCA2ED01
F8ED03F0ED07E00007EC3FC0B7120015F827287EA72E>I<91387FC002903903FFF80690
390FE01E0E90383F0007017CEB019ED801F0EB00FE4848147E4848143E5B000F151E48C8
FC48150E123EA2007E1506A2127C00FC1500A8127C007E1506A2123EA2003F150C7E6C7E
000715186D14386C6C14306C6C1460D8007CEB01C0013FEB038090390FE01E00903803FF
F89038007FC0272A7DA82F>I<B612F015FE3A07F0003F800003EC07C0ED01F06F7E167C
82A282EE0F80A3EE07C0A317E0A917C0A2160F1780A2EE1F00A2163E5E5E4B5AED07E000
07EC3F80B600FEC7FC15F02B287EA732>I<B712F0A23907F000070003EC00F816781638
A21618A3160C1560A21600A215E0A2140390B5FCA2EBF0031400A21560A21606A2ED000C
A4161C16181638A21678ED01F80007EC07F0B7FCA227287EA72D>I<B712C0A23907F000
1F0003EC03E015011500A21660A31630A215C01600A31401A2140790B5FCA2EBF0071401
A21400A492C7FCA9487EB512E0A224287EA72B>I<91387FC002903903FFF80690390FE0
1E0E90383F0007017CEB019ED801F0EB00FE4848147E4848143E5B000F151E48C8FC4815
0E123EA2007E1506A2127C00FC92C7FCA792387FFFE0127C007E02001300167E123EA212
3F7E6C7E6C7EA26C7ED801F814FEEA007C013FEB039E90390FE00F0E903903FFFC029026
007FE0C7FC2B2A7DA833>I<B539C07FFFE0A23B07F80003FC006C486D5AAF90B6FCA290
38F00001B1486C497EB539C07FFFE0A22B287EA731>I<B512C0A23807F8006C5AB3B048
7EB512C0A212287EA718>I<B512E0A2D807F8C8FC6C5AB3A416C0A315011680A31503A2
1507150FED3F00000714FFB7FCA222287EA729>76 D<D8FFF0EDFFF06D5C0007EEFE0000
035E017CEC037CA26D1406A26D140CA36D6C1318A26D6C1330A36D6C1360A26D6C13C0A3
903900F80180A291387C0300A2EC3E06A36E5AA2EC0F98A3EC07F0A26E5AEA0780D80FC0
15FE3CFFFC01C01FFFF0A234287DA73C>I<D8FFF0903807FFE07FD803FC9038007E006D
143C1618137F6D7E6D7EA26D7E6D7E6D7EA26D7E6D7E147FA2EC3F80EC1FC0EC0FE015F0
1407EC03F8EC01FCEC00FEA2157FED3F98ED1FD8A2ED0FF815071503A215011500486C14
78487ED8FFFC143816182B287EA731>I<EC7FC0903803FFF890381FC07F90393E000F80
01F8EB03E048486D7E48486D7E4848147C484880A248C87E481680003E150F007E16C0A2
007C1507A200FC16E0A9007EED0FC0A36CED1F80A26C16006D5C6C6C147E0007157C6C6C
5C6C6C495AD800FCEB07E0013EEB0F8090261FC07FC7FC903807FFFC9038007FC02B2A7D
A833>I<B67E15F03907F000FC0003143FED0F806F7E82150382A55E15075E4B5A033FC7
FC15FC90B512F0A29038F001FCEC007F6F7E151F82150FA71730A3923807E070486C1560
B539C003F0E0923800FFC0C9EA3F002C297EA730>82 D<90387F80203903FFF060390780
78E0380E000E481307481303007813010070130012F0A21560A27E1500127C127FEA3FE0
13FF6C13F06C13FC000313FFC61480010F13C0010013E0EC0FF014031401EC00F8A200C0
1478A46C1470A26C14F06C14E06CEB01C000EFEB078039E3E01F0038C0FFFC38801FF01D
2A7DA825>I<007FB7FCA23A7E003F003F0078150F007081006081A200E01680481501A5
C791C7FCB3A64A7E013FB5FCA229287EA72F>I<B539C007FFE0A2D807F8C7EA7E006C48
143C1618B3A816386C6C143016706C6C1460017C14E0017E495A6D495A90260F8007C7FC
903807E03E903801FFF89038003FC02B297EA731>I<B56CEBFFF8A2D807F8C7EA1FC06C
48EC0F00160E6C7E160C6D141C00001518A2017E5CA2017F14706D146080011F5CA26D6C
485AA2ECE003010791C7FC14F001031306A2ECF80E0101130CECFC1C01001318A2EC7E30
A2EC7F70EC3F6015E06E5AA26E5AA36EC8FCA22D297FA731>I<B590B5EB3FFEA2D80FF8
D90FF8EB07F06C486D48EB03E00003EF01C003031580A26C6C6EEB0300A36C6CD906FC13
06A26D160E017ED90C7E130CA2017F027F131C6D496C1318A290261F80386D5AED301FA2
90260FC0706D5AED600FA26D6C486C6C5AA214F0903B03F18003F180A202F914F3902801
FB0001FBC7FCA202FF14FF6D486D5AA2027E5C027C147CA202381438A33F297FA743>I<
3B7FFF801FFF80A23B07FE0007F8006C48EB03E0000115806C6C91C7FC017F1306150E6D
6C5A90381FC0186D6C5A1570903807F0606D6C5AEB01F9ECFF806D90C8FC80A26E7E6E7E
143F4A7EECE7F0ECC3F8EB018390380381FC49C67E0106137E49137F011C6D7E496D7E13
30496D7E01E06D7E00016E7E1203D80FF0EB07FED8FFFC90381FFFE0A22B287EA731>I<
B56CEB7FF8A2D807FCC7EA1FC06C48EC0F006C6C140E5E6C6C1418017F14385E6D6C1360
6D6C13E05E6D6C485A903807F00302F890C7FC01031306903801FC0E903800FE0C5DEC7F
38EC3FB015E0141F6E5AAE4A7E0103B5FCA22D287FA731>I<EAFFC0A3EAE000B3B3B1EA
FFC0A30A3B7AAB13>91 D<EAFFC0A31201B3B3B112FFA30A3B7FAB13>93
D<120EEA3F80A5EA0E00C7FCA7EA078012FFA2121F120FB3121FEAFFF8A20D287EA713>
105 D<260F81FC137F3BFF8FFF03FFC0903A9C0F8703E03B1FB007CC01F0D80FE013D890
3AC003F000F8A301805BAF486C486C487E3CFFF83FFE0FFF80A2311A7E9937>109
D<380F81FC38FF8FFF90389C0F80391FB007C0EA0FE09038C003E0A31380AF391FC007F0
39FFF83FFEA21F1A7E9925>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmmi7 7 26
/Fm 26 122 df<EB0FE0EB3FF8EBF83E2601E01F13603A03C00F80C038078007D80F0013
C0001EECC180123E003CECE300007C130315E65A15ECA215F8485C5DA40078130F021D13
C06C903879F180391E03E0F33A0FFF807F003903FC003C231B7C992B>11
D<EC03F8EC0FFEEC3C0F913870038002C013C09039018001E0EB03001306A24913035B16
C05BED0780ED0F0049130EEC7FBCECFFF8A29038C07FBCEC001E81A248481480A448C7FC
A40006EC1F00A2151E153E000F143C5D6D5B390DC001E03918E00780D97FFFC7FCEB1FF8
0101C8FC48C9FCA45AA45A23347FA826>I<1238127C12FEA3127C123807077A8614>58
D<1238127C12FE12FFA2127F123B1203A31206A3120C121812381270122008127A8614>
I<EC0180140314071500A25C140E141E141CA2143C143814781470A214F05CA213015C13
035CA2130791C7FC5B130EA2131E131C133C1338A21378137013F05BA212015B12035BA2
120790C8FCA25A120E121E121CA2123C123812781270A212F05AA2193B7CAB22>61
D<013FB512F816FF903A01FC001FC04AEB07E0EE03F001031401A24A14F8A2130717F04A
130317E0010F1407EE0FC04AEB1F80EE7E00011F495A91B512F0A291388001FC013FEB00
7E8291C7EA1F80160F4915C0A2137EA213FEEE1F805BEE3F000001153E16FE49EB01F84B
5A0003EC1FC0B7C7FC15F82D287DA732>66 D<90383FFFF8A2D901FCC7FC5CA21303A25C
A21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA249141C1618137E163801FE1430
167049146016E000011401ED03C0491307ED0F800003147FB7FC160026287DA72E>76
D<91381FE0089138FFFC18903903E01E3890390780077090390E0003F049130149130001
7814E0137013F0A2000115C0A216007F7F6CB47E14F86DB47E6D13F06D7F01077F01007F
1407EC00FF153F81A3001880A20038141E12300038141C153C00781438007C5C007E5C00
77EB03C026E3E00FC7FC38C0FFFE38801FF0252A7CA829>83 D<010FB612C05B9139E000
3F800280EB7F00013EC712FE013C495A0138495A49495A4B5A0160495A01E0495A4949C7
FC5D90C75A4A5A4A5A4A5A4A5A4A5A4A5A4AC8FC14FE495A495A49481330494813704948
1360133F4A13E049C75A01FE1301485A4848495A485A484813074848130F4848013FC7FC
484848B4FCB7FC5D2A287CA72D>90 D<EB1F80EB7FC0EBF0E73803C03FEA078048487EA2
121E003E133E123C127CA2485BA4485B1530A3903801F060A2EA7803010E13C0393C1CF9
80381FF07F3907C01E001C1B7C9924>97 D<EA01F0123FA2EA03E0A21207A25BA2120FA2
5BA2121F139FEB3FC0EBE0E0383FC0F0EB0078A2123E007E137CA2127CA212FC14F85AA3
38F001F0A214E0130314C0EB078038700F00EA781E6C5AEA1FF0EA07C016297CA71D>I<
EB0FE0EB3FF8EBF81C3801E00E3803803E0007137EEA0F00001E137C123E003C1300127C
A25AA45AA31404140C0078131814306C13E0381E07C0380FFF00EA03F8171B7C991E>I<
130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212605B12C0A2EA01
F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F06C5A11287DA617
>105 D<1407EC0F80141FA21500140E91C7FCA7EB03E0EB07F8EB0C3C1318EB303E1360
13C0A248485AA2C7FCA25CA4495AA4495AA4495AA4495AA21238D87C1FC7FC12FC133E48
5AEA70F8EA7FE0EA1F80193380A61B>I<133EEA07FEA2EA007CA213FCA25BA21201A25B
A21203EC07809038E01FC0EC38600007EB61E014C3EBC187EBC307D80FC613C09038CC03
8001B8C7FC13E0487E13FEEB3F80EB0FC0486C7E1303003E1460A2127EECC0C0127CECC1
8012FC903801E30038F800FE0070137C1B297CA723>I<137CEA0FFCA2EA00F8A21201A2
13F0A21203A213E0A21207A213C0A2120FA21380A2121FA21300A25AA2123EA2127EA2EA
7C18A3EAF830A21320EA786013C0EA3F80EA0F000E297EA715>I<3B07801FC007E03B0F
E07FF01FF83B18F0E0F8783C3B30F1807CE03E903AFB007D801ED860FEEB3F005B49133E
00C14A133E5B1201A24848495BA35F4848485A1830EE01F0A23C0F8003E003E060A218C0
933801E180271F0007C013E3933800FF00000E6D48137C341B7D993B>I<3907801FC039
0FE07FF03918F0E0F83930F1807CEBFB00D860FE133C5B5B00C1147C5B1201A248485BA3
4A5AEA07C01660EC03E0A23A0F8007C0C0A2EDC180913803C300D81F0013C7EC01FE000E
EB00F8231B7D9929>I<9038F007C03901FC1FF039031E78780006EBE03C90381FC01C00
0CEB801E14005B0018141F133E1200137E153E137CA213FC157C5B1578000114F0A2EC01
E0EC03C03903FC07809038FE1F00EBE7FCEBE1F0D807E0C7FCA25BA2120FA25B121FEAFF
F8A22025809922>112 D<EB1F03EB7F873801E0CF3803C07FEA0780380F003E5A121E00
3E137E003C137C127CA24813FC14F8A3EAF00114F0A3130314E0EA7007EA780FEA3C3F38
1FF7C0EA07C7EA0007130F1480A3131F14005B3803FFF0A218257C991E>I<131C133EA2
5BA45BA4485AB512E0A23801F000485AA4485AA4485AA448C7FC1460A214C0123EEB0180
EB0300EA1E06EA1F1CEA0FF8EA03E013267EA419>116 D<EA03E0486C1338D80C78137C
EA187C00305CA212605B00C0495AA2EA01F0A24A5AEA03E0A34848485AEDC180A391380F
8300A20003131F9038E037863901F0E7CE3900FFC3FC90383F00F0211B7D9927>I<3903
E001C03907F003E0380C7807EA187C0030130314011260EBF80000C014C0A2EA01F0A2EC
0180EA03E0A2EC0300EA07C0A21406A25CA200035B6D5A3801F0E06CB45A013FC7FC1B1B
7D9921>I<D803E0EC0380486CEB7007D80C789038F80FC0EA187C0030903801F0071603
126001F8140100C0D903E01380A2EA01F0A2913907C00300EA03E0A33A07C00F8006A25E
A2160816180003011F5B01E0EBC0703A01F073E0E03A00FFE1FF8090261F807FC7FC2A1B
7D9930>I<90387C03C03901FF0FF03907079C30390E03B078000CEBF0F8001813E11230
15F0396007C0E015001200A2495AA449C7FC15301238007C1460EAFC3E15C0EAF87E39F0
6F03803970C70700383F83FE381F01F81D1B7D9926>I<EA03E0486C1370D80C7813F8EA
187C0030EB01F0A2126013F800C0EB03E0A2EA01F0A2EC07C0EA03E0A33907C00F80A4EC
1F00A25C00035B3801E0FE3800FFBEEB3F3E13005C121E003F5B5C387E01E0383C03C038
300780D81C1FC7FCEA0FFCEA07F01D267D9922>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmcsc10 10 38
/Fn 38 123 df<B512FCA516057E941F>45 D<121C127FEAFF80A5EA7F00121C09097788
1B>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8EB7FF0B612F8A31D3877B72E>
49 D<EB0FF8EB3FFF90B512C03903E01FF039078007FC390E0001FE486D7E5A0030EC7F
800070EC3FC0126012FCB4EC1FE07FA56CC7FC121CC8FCED3FC0A3ED7F8016005D5D4A5A
4A5A4A5A5D4A5A4A5A4AC7FC147E14F8495A495A495A495A91C71260131E13384914E049
14C0485A485A48C7120148B6FC5A5A481580B7FCA323387BB72E>I<EB07F890383FFF80
90B512E03903F00FF039078003FC48486C7E001E130081EA3FC06DEB7F80A56C5A6C5AC8
EAFF00A34A5A5D4A5A5D4A5A4A5A027FC7FCEB3FF814FF9038000FE06E7EEC03FC6E7E6E
7E1680157F16C0A2153F16E0A2121EEA7F80487EA4ED7FC05B007F1580007EC712FF0070
15006C495A001E495A6C6C485A3907F00FF00001B512C06C6C90C7FCEB0FF8233A7BB72E
>I<151C153CA2157C15FCA214011403A21407140F141D141914311471146114C11301EB
038114011307130E130C131813381330136013E0EA01C01380EA03005A12065A121C5A12
3012705AB712FEA3C73801FC00AB4A7E49B512FCA327397DB82E>I<00061406D8078013
1E9038F801FC90B5FC5D5D15C05D4AC7FC38067FF090C9FCABEB03FC90381FFF8090387C
07E09038E001F03907C000F8497F90C7127E0006147FC8EA3F80A216C0151FA216E0A412
3E127F487EA490C713C048143F126016800070147F6C150015FE6C5C000F495A39078007
F03903F01FE06CB512806C6C48C7FCEB0FF0233A7BB72E>I<B712F816FF17C000019039
80001FF06C90C7EA07FC707E707E701380177F18C0173F18E0A618C0A2177F1880EFFF00
4C5A4C5AEE0FF8EE3FE091B6128094C7FC91C7EA3FE0EE07F8EE01FE707EEF7F80EF3FC0
18E0171F18F0170F18F8A718F0171F18E0173FEF7FC0EFFF804C1300EE07FE486DEB1FFC
B812F017C04CC7FC35397CB840>66 D<DB7FC01330912607FFF81370023F13FE913AFFC0
1F80F0903A03FE0003E1D907F8EB00F3D91FE0147B4948143F4948141F49C8120F484815
0748481503A24848150148481500A2485A1870123F5B1830127FA349160012FFAB127F7F
1830A2123FA27F001F177018606C7E18E06C6C16C06C6C150118806C6C15036C6CED0700
6D6C5C6D6C141E6D6C5CD907F85CD903FEEB01E0903A00FFC00FC0023FB5C7FC020713FC
9138007FE0343D7ABA41>I<B912C0A3C601C0C7FC6D48141FEF07E017031701A21700A2
1860A3187018301618A31800A31638A21678ED03F891B5FCA3EC8003ED00781638A21618
A21806A3180E93C7120CA4181CA31838A2187818F817011703170F496CEC7FF0B9FCA337
397DB83E>69 D<B812FEA3000190388000076C90C8FC173F838383A383A318801701A216
60A294C7FCA416E0A21501150791B5FCA3EC000715011500A21660A693C8FCAD4813C0B6
12E0A331397CB83B>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397CB822>73
D<B691383FFFE0A30001018091380FFE006C90C8EA07F018C060050EC7FC5F5F5F5F4C5A
4C5A040FC8FC161C5E5E5E4B5A4B5A4BC9FC5D5DED7F804B7E4A7FEC03BF9138071FF002
0E7FEC1C0F4A6C7E4A6C7E14E091388001FF91C77F83167F707E707EA2707E707E831603
707E8482717E717E84A284486DEC7FFEB60103B512F0A33C397CB846>75
D<B612E0A3000101C0C8FC6C90C9FCB3AD1706A5170E170CA3171CA3173C177CA217FC16
03EE0FF8486D137FB8FCA32F397CB839>I<B712F816FF17E0C69039C0003FF86D48EB07
FCEE01FE707EEF7F80EF3FC0A2EF1FE0A218F0A718E0A2EF3FC0A2EF7F80EFFF004C5AEE
07F8EE3FF091B612C04CC7FC0280C9FCB3A5497EB612C0A334397DB83E>80
D<B7FC16F016FE000190398001FF806C90C7EA3FE0EE0FF0707E707E707EA2838284A695
C7FC5E5F5F1603EE07F04C5AEE3F80DB01FEC8FC91B512F816E091380003FCED00FEEE7F
80707E707E707EA2160783A583A61930A28316031970486D6D6C1360B66D14E094387F81
C094383FC380CA380FFF00EF01FC3C3B7CB842>82 D<D907F81330D93FFF137090B512E0
3A03F807F0F03907E000794848133F4848130F90C71207003E1403007E1401A2007C1400
12FC1670A36C1530A37E6D14006C7E7F13F86CB47E6C13FCECFFC06C14F06C14FC000114
FF6C1580013F14C0010714E0EB003F020313F0EC007FED1FF8150F1507ED03FCA200C014
01A21500A37EA216F87E15016C15F06C14036C15E06CEC07C001C0130FD8F9F0EB1F80D8
F0FFEB7E0039E03FFFFC010F13F048C61380263D7ABA33>I<003FB812FCA3D9C001EB80
0390C790C7FC007C173E0078171E0070170EA300601706A400E01707481703A4C81500B3
B0020313C0010FB612F0A338397CB841>I<1407A24A7EA34A7EA3EC37E0A2EC77F01463
A2ECC1F8A201017F1480A2903803007EA301067FA2010E80010C131FA2496D7EA2013FB5
7EA29038300007496D7EA3496D7EA200018149130012036D801207D81FE0903801FF80D8
FFF8010F13F8A22D2C7DAB33>97 D<91383FC006903901FFF80E90390FE03E1E90381F00
07017EEB03BE01F8EB01FE484813004848147E0007153E485A001F151E5B003F150E90C8
FC5A1606A212FE1600AA007F1506A37E6D140E001F150C7F000F151C6C6C141800031538
6C6C14706C6C14E0017EEB01C0011FEB078090390FE03E00903801FFF89038003FC0272D
7BAB31>99 D<B612F015FE3907F8007F6C48EB0FC0ED03E06F7E6F7E167C167E82A2EE1F
80A217C0160FA317E0AA17C0A3EE1F80A217005E163E5E16FC4B5A4B5AED0FC0486CEB7F
80B600FEC7FC15F02B2B7CAA34>I<B712E0A23907F8000F6C481303ED00F01670A21630
A41618A215C01600A31401A2140790B5FCA2EBF0071401A21400A21606A21500A2160CA4
161CA2163C167C16F8486C1307B7FCA2272B7CAA2E>I<B712C0A23907F8001F6C481303
ED01E01500A21660A41630A215C01600A31401A2140790B5FCA2EBF0071401A21400A492
C7FCAB487EB512E0A2242B7CAA2C>I<91383FE003903901FFF807903907E01E0F90391F
00078F017EEB01DF496DB4FC484880484880484880485A001F815B003F8190C8FC5A82A2
12FE93C7FCA892383FFFF8A2007F02001380EE3F00A27E7F121F7F120F6C7E6C7E6C6C5C
6C7E017E5C011FEB01CF903907E00F87903901FFFE039026003FF0C7FC2D2D7BAB35>I<
B539C07FFFE0A23B07F80003FC006C486D5AB190B6FCA29038F00001B2486C497EB539C0
7FFFE0A22B2B7CAA33>I<B512C0A23807F8006C5AB3B3487EB512C0A2122B7CAA19>I<B5
12E0A2D807F8C8FC6C5AB3A61660A416C0A31501A21503A21507ED1F80486C13FFB7FCA2
232B7CAA2B>108 D<D8FFF0ED3FFC6D157F0007178000031700017C15DFA26DEC019FA3
6DEC031FA26D6C1306A36D6C130CA26D6C1318A26D6C1330A36D6C1360A2027C13C0A391
383E0180A291381F0300A3EC0F86A2EC07CCA3EC03F8A2486C6C5AA2D81FE0ED3F803CFF
FC00E007FFFCA2362B7CAA3E>I<D8FFF0903807FFE07F0007020013006C6C143C7F017F
14187F806D7E130F806D7E6D7EA26D7E6D7E147E147FEC3F80141F15C0EC0FE0EC07F014
0315F8EC01FC140015FE157FED3F98151F16D8ED0FF81507A215031501A2486C13001678
D81FE01438EAFFFC16182B2B7CAA33>I<EC7FC0903803FFF890380FC07E90393F001F80
017CEB07C04848EB03F048486D7E4913004848147C000F157E484880A248C8EA1F80A248
16C0A2007E150FA200FE16E0AA007FED1FC0A36C16806D143F001F1600A26C6C147E6C6C
5CA26C6C495A6C6C495AD8007CEB07C0013FEB1F8090260FC07EC7FC903803FFF8903800
7FC02B2D7BAB35>I<B612E015FC3907F800FE6C48EB1F80ED0FC0ED07E016F01503A216
F8A516F0A2150716E0ED0FC0ED1F80EDFE0090B55A15E001F0C8FCB1487EB512C0A2252B
7CAA2E>I<B67E15F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B5AA24B5A033F
C7FC15FE90B512F05D9038F001F8EC007E816F7EA26F7EA582A4171816F015071738486C
903803F830B5D8C00113709238007FE0C9EA1F802D2C7CAA32>114
D<017F13603901FFE0E0380780F9380E001F48130748130312780070130100F01300A315
607EA26C14007E127F13C0EA3FFEEBFFE06C13F8000713FE6C7FC61480010F13C01300EC
0FE01407EC03F01401A212C01400A37E15E06C1301A26CEB03C06CEB0780B4EB0F0038F3
E01E38E0FFF838C01FE01C2D7BAB26>I<007FB712C0A23A7E003FC00F007890381F8003
007015011600126000E016E0A2481660A5C71500B3A8EC7FE0011FB57EA22B2B7DAA31>
I<B539C007FFE0A2D807F8C713006C48143CA21618B3A916386C6C1430A2000015706D5C
017C5C6D13016D495A90260F800FC7FC903803E03C903800FFF8EC3FC02B2C7CAA33>I<
3B7FFF800FFFC0A2000790390003FE006C48EB01F800015D000015C0017F13036D5C6E48
C7FC90381FC0066D6C5A151C6D6C5A903803F83001015BECFCE06D6C5AEC7F80A2143F6E
7E140F4A7E4A7E1433EC63F8ECE1FCECC0FE903801807E0103137F49486C7E0106131F49
80011C6D7E496D7E0130130301708001F06D7E000181000781D81FF8491380B46C4913F8
A22D2B7DAA33>120 D<B56CEB1FFEA2D80FFCC7EA0FF00003ED07C01780000116006C6C
1406017F140E160C6D6C5B6D6C133816306D6C5B6D6C13E05E6D6C485A903801FC0393C7
FC903800FE06EC7F0E150CEC3F9CEC1FF85D140F6E5AAF4A7E49B57EA22F2B7EAA33>I<
003FB6FCA29038E0007F90C712FE003E495A123C0038495A48495AA24A5A00605C141F4A
5AA2C748C7FC14FEA2495A495AA2495A5C130F495AA2495A49C8FCED018013FE485AA248
5A4913031207485AED0700485A48485B5D48C75A00FE49B4FCB7FCA2212B7BAA2A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmsy6 6 1
/Fo 1 49 df<EA01E0EA03F0A4EA07E0A213C0120FA21380A2EA1F00A2121EA2123E123C
A25AA3127012F05A12600C1A7E9B12>48 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr6 6 1
/Fp 1 55 df<EB0FC0EB7FF03801F0383803C0183807803C380F007C121E001C1338003C
1300A2127C1278EB7FC038F9FFE038FB80F038FE0038143C48131EA248131FA41278A36C
131EA2001C133C001E13386C1370380781E03801FFC038007F0018227DA01E>54
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq eufm8 8 1
/Fq 1 84 df<EC01C0EC1FF0ECFFFC010301FF1303D90F03EBC002D91C00EBF006017890
383FFC0C4990380FFFF8D801C0010313F00003020013E04848EC3F8090C8EA0E00480110
90C7FC001E13F0495A383E03C0EA3C07127C130FEE1FC09139E003FFF000FCD9F03F13FC
91B6FC6D15FE6DEBF8076D90380001FF6CC9FC177FA2173F7E7E6D153EA27F003F163C6D
157C6C6C15786D15F86C6C15F06C6CEC01E06D6CEB07C06C01E0EB1F806C01FCEBFE006C
6CB512F86D14E0010F91C7FC010013F030307CAD39>83 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmsy8 8 5
/Fr 5 83 df<B812C0A32A037A9137>0 D<EE01C01607161FEE7F00ED01FCED07F0ED1F
C0037FC7FCEC01FCEC07F0EC0FC0023FC8FC14FCEB03F8EB0FE0EB3F8001FEC9FCEA03F8
EA0FE0EA3F8000FECAFC12F812FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB
00FC143FEC0FC0EC07F0EC01FCEC007FED1FC0ED07F0ED01FCED007FEE1FC01607160193
C7FCAD007FB71280B812C0A22A3B7AAB37>20 D<170EA3170F8384170384170184717E18
78187C84180FF007C0BA12F819FC19F8CBEA07C0F00F00183E601878604D5A6017036017
0795C7FC5F170EA33E237CA147>33 D<91B512C01307131FD97F80C7FC01FCC8FCEA01F0
EA03C0485A48C9FC120E121E5A123812781270A212F05AA3B712C0A300E0C9FCA37E1270
A212781238123C7E120E120F6C7E6C7EEA01F0EA00FCEB7F80011FB512C013071300222B
7AA52F>50 D<023FB57E0107B612F8011F15FE017F813A01F83E001FD803C002017FD80F
00EC007F001E017E143F5A007C161F12784894C7FC48137CC7FC173E02FC143C177C4A14
785F4C5A01014A5A4A010FC8FC167EED1FF80103EB7FE09138E0FF8002E17FECE07F4948
6C7E6F7E150F010F80EC80076F7E1400496D7EF00180013E6D6CEB07006093387F801E49
EDC03893383FE0F00178EDFFC001F86E5B01E06E48C7FC4848EC07F0392E7EAC3C>82
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmmi6 6 3
/Fs 3 120 df<000F13FC381FC3FF3931C707803861EC0301F813C0EAC1F0A213E03903
C00780A3EC0F00EA0780A2EC1E041506D80F00130C143C15181538001EEB1C70EC1FE000
0CEB07801F177D9526>110 D<133013785BA4485AA4485AB51280A23803C000485AA448
C7FCA4121EA25B1480383C03001306A25BEA1C38EA0FF0EA07C011217D9F18>116
D<D807801470260FE00313F83938F007801230006090380F007812C01638EAC1E0000101
1E1330EA03C0A34848481360A316C0A2ED0180147C00039038DC03009038E1DF063901FF
8FFC39007E03F825177D952C>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmmi8 8 15
/Ft 15 122 df<1560A315E0A25DA21401A25DA21403A292C7FCA25CEC3FE0903803FFF8
90380FC63E90393E0E0F80017CEB07C03A01F00C03E0D803E0EB01F03807C01CD80F8013
00001F011813F81300003E1338A2481330A2EC700100FC15F0481360150302E013E01507
007801C013C0007CEC0F800101EB1F00003C143E003E495A001F5C390F8383E03903E39F
802600FFFEC7FCEB1FF00107C8FCA21306A2130EA2130CA2131CA21318A3253C7DAD2A>
30 D<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009
157A8714>59 D<EE01C01607161FEE7F00ED01FCED07F0ED1FC0037FC7FCEC01FCEC07F0
EC0FC0023FC8FC14FCEB03F8EB0FE0EB3F8001FEC9FCEA03F8EA0FE0EA3F8000FECAFC12
F812FEEA3F80EA0FE0EA03F8EA00FEEB3F80EB0FE0EB03F8EB00FC143FEC0FC0EC07F0EC
01FCEC007FED1FC0ED07F0ED01FCED007FEE1FC0160716012A2B7AA537>I<15C0140114
031580A214071500A25C140EA2141E141CA2143C143814781470A214F05CA213015CA213
035C130791C7FCA25B130EA2131E131CA2133C1338A21378137013F05BA212015BA21203
5BA2120790C8FC5A120EA2121E121CA2123C1238A212781270A212F05AA21A437CB123>
I<013FB6FC17C0903A00FE0007F0EE01F84AEB00FC177E1301177F5CA21303177E4A14FE
A20107EC01FC17F84AEB03F0EE07E0010FEC1FC0EE7F009138C003FC91B55A4914FE9139
C0003F804AEB0FC017E0013F140717F091C7FC16035BA2017E1407A201FE15E0160F4915
C0161F0001ED3F80EE7F004914FEED03F80003EC0FF0B712C003FCC7FC302D7CAC35>66
D<92387FC003913903FFF80791391FC03E0F91397E00071FD901F8EB03BF4948EB01FED9
0FC013004948147E49C8FC017E157C49153C485A120348481538485AA2485A1730484815
00A2127F90CAFCA35A5AA292381FFFFCA29238003FC0EE1F80163F1700A2127E5E167E7E
A26C6C14FE000F4A5A6C7E6C6C1307D801F8EB1E3CD8007EEBFC3890391FFFE018010390
C8FC302F7CAD37>71 D<90383FFFFEA2010090C8FC5C5CA21301A25CA21303A25CA21307
A25CA2130FA25CA2131FA25CA2133FA291C7EA0180A24914031700017E5C160601FE140E
A2495C163C12015E49EB01F84B5A0003141FB7FC5E292D7DAC30>76
D<ED7FC0913807FFF891381F807E91397C001F80D901F0EB0FC0D907E0EB03E0D90F8014
F049C71201013EEC00F84915FC5B12014848157E485AA2485A121FA2485A17FE90C9FC5A
A300FEED01FCA3EE03F8A217F0160717E0160FEE1FC01780007EED3F005E6C157E5E6C6C
495AED03E06C6CEB0FC06C6C49C7FCD803F8137E3900FE03F890383FFFC0D907FEC8FC2F
2F7CAD36>79 D<913807F00691383FFE0E9138F80F9E903903E001FE903807800049C712
7C131E49143CA2491438A313F81630A26D1400A27FEB7F8014F86DB47E15F06D13FC0107
7F01007F141F02011380EC003F151F150FA215071218A3150F00381500A2151EA2007C5C
007E5C007F5C397B8003E039F1F00F8026E07FFEC7FC38C00FF0272F7CAD2B>83
D<90260FFFFCEB7FFFA29026007FC0EB0FF06E48148018006E6C131E1718020F5C6F5B02
075C6F485A020349C7FCEDF8065E6E6C5A5E6E6C5A5EED7F8093C8FC6F7EA26F7E153F15
6FEDCFE0EC018791380307F0EC0703020E7F141C4A6C7E14704A6C7E495A4948137F49C7
FC010E6E7E5B496E7E5BD801F081D807F8143FD8FFFE0103B5FCA2382D7EAC3A>88
D<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F00126013FEEAE0
FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618EBC00115F0000F
1538913803E0300180147016E0001F010113C015E390C7EAFF00000E143E251F7E9D2B>
110 D<130E131FA25BA2133EA2137EA2137CA213FCA2B512F8A23801F800A25BA21203A2
5BA21207A25BA2120FA25BA2001F1310143013001470146014E0381E01C0EB0380381F07
00EA0F0EEA07FCEA01F0152B7EA919>116 D<D801E01570D807F890381C01F8D80E3C13
3ED81C3E017E13FC0038147C003015000070167CD8607E01FC1378D8E07C49133812C013
FC3880F8010000163000015C13F0020314700003166001E05BA217E00007010714C001C0
EBC00117801603000316006D486C5A160E3A01F01DF01C3A00F838F83890397FF07FF090
390FC00FC02E1F7E9D33>119 D<013F137C9038FFC1FF3A01C1E383803A0380F703C039
0700F60F000E13FE4813FC12180038EC0700003049C7FCA2EA200100005BA313035CA301
075B5D14C000385CD87C0F130600FC140E011F130C011B131C39F03BE038D8707113F039
3FE0FFC0260F803FC7FC221F7E9D28>I<EA01E0D807F8130ED80E3C131FD81C3E133F00
38143E12301270D8607E137ED8E07C137C12C013FC484813FC000014F812015B14010003
14F013E0A21403000714E013C0A2140715C00003130FEBE01F143F3901F07F8038007FEF
EB1F8FEB001F1500A2003E133EA2007E5B5C387C01F0387003E0383007C0383C0F80D80F
FEC7FCEA03F0202C7E9D23>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fu cmcsc10 8 50
/Fu 50 122 df<1238127C12FEA212FF127F123B1203A41206A3120CA212181230127012
20081479AD15>39 D<1238127C12FEA212FF127F123B1203A41206A3120CA21218123012
7012200814798615>44 D<B51280A411047E9019>I<1238127C12FEA3127C1238070779
8615>I<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03
E0A500FC14F0B0007C14E0A3007E1307003E14C0A2001E1480001F130F6C14006D5A3807
C03E3803F0FC3800FFF0EB3FC01C2D7CAB25>48 D<130C131C137CEA01FC12FFEAFE7C12
00B3B113FE387FFFFEA2172C79AB25>I<EB7F803801FFF0380781FC380E007F0018EB1F
805A0070EB0FC00060EB07E0127800FC14F07E1403A3007C1307C7FC15E0A2140F15C0EC
1F8015005C147E14785C495A495A495A49C7FC131C5B5B4913305B485A48C71260120648
14E0001FB5FC5A4814C0B6FCA21C2C7CAB25>I<EB3FC03801FFF03807C0FC380E003E48
7F1580123FEC0FC0138013007E000E131FC71380A3EC3F00143E5C5CEB03E0EBFF8080EB
00F8143C141FEC0F8015C0A2EC07E0A215F01238127C12FEA34814E00078130F006014C0
6C14800038EB1F00001E133E380780FC3801FFF038007FC01C2D7CAB25>I<EB03F8EB0F
FEEB3E079038F801803901E007C03803C00FEA0780A2EA0F0048EB0780001E90C7FC123E
A2127E127CA2EB1FF038FC7FFCEBE03E38FD800F158038FF00074814C0EC03E0A25A15F0
A4127CA4003C14E0123EA2001EEB07C0A26C14803907800F003803C01E3801E07C3800FF
F0EB1FC01C2D7CAB25>54 D<EB3FC0EBFFF03801E07C3807801E48487E000EEB07805AEC
03C0123CA3123EA2003FEB0780EA1FC09038E00F00380FF81E6C6C5AEBFF7000015B7EEB
3FF8EBFFFC3803C7FE390783FF80EA0E00001EEB3FC048EB1FE0481307EC03F0481301A2
1400A415E00078130115C06C13036CEB07806CEB0F003807E03C3801FFF838003FC01C2D
7CAB25>56 D<EB3FC0EBFFF03803E0783807801C48487E48130F001EEB0780123E4814C0
A2140300FC14E0A415F0A4007C1307A37E001E130F001F131B7E3807C0733803FFE3C6EB
83E0EB0003A3EC07C0A21580001E130F003F1400A2141E5C003E5B00185B380E03E03807
FF80D801FEC7FC1C2D7CAB25>I<1238127C12FEA3127C12381200AF1238127C12FEA312
7C1238071D799C15>I<EC0380A34A7EA24A7EA34A7E141BA2EC31F8A2EC71FC1460A2EC
E0FEECC07EA249487EA349486C7EA249800106130FA249801507A2011FB57EA290381800
03496D7EA201708001601300A24980167EA2484880A2486C1580D80FE0EC7FC0D8FFFC90
3807FFFEA22F2F7DAE36>65 D<B612FCEDFF803A03F8000FE00001EC03F06F7E6F7E8216
7E167FA6167E16FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0ED01FC6F7E
167F821780161F17C0A61780163FEE7F00A216FEED03FC0003EC0FF0B712C04BC7FC2A2D
7DAC33>I<DA1FE01380903901FFFC01903907F00F0390391F800187013EC712E749147F
4848143F4848141F49140F48481407120F485A160348C8FCA2481501A2127E93C7FC12FE
A9127EA2007FED0180A27EA26C6CEC0300A26C7E000715066C7E6D5C6C6C5CD8007C5C6D
5C6D6C485A903907F00F80902601FFFEC7FC9038001FF0292F7BAD34>I<B612FCEDFF80
3A03F8000FE00001EC03F0ED00FC167E82EE1F80160FEE07C017E0160317F0A217F81601
A317FCAA17F8A3EE03F0A217E0160717C0160FEE1F801700167E5EED03F80003EC0FE0B7
128003FCC7FC2E2D7DAC37>I<B712FCA23903F800030001EC007C82161E160EA21606A3
1607821518A293C7FCA31538157815F890B5FCA2EBF800157815381518A217C0A3923800
0180A4160317005EA25E5E167F0003EC01FEB7FCA22A2D7DAC31>I<DA1FF01340DAFFFE
13C0903907F8078190390FC001C3013FC71263017C143749141F4848140F48481407485A
000F1503485A160148C8FCA2481500A2127E170012FEA892381FFFFE127E9238001FE000
7FED0FC0A27E7F121FA26C7E6C7E12036C7E6C6C141F137C013F1433D90FC013E1903907
F803C00100B5EA0040DA1FF813002F2F7BAD39>71 D<B539F01FFFFEA2D803FCC7EA7F80
6C48EC3F00B290B7FCA201F8C7123FB3486CEC7F80B539F01FFFFEA22F2D7DAC36>I<B5
12F0A23803FC006C5AB3B3A3487EB512F0A2142D7DAC1B>I<90B512F0A201001300147E
B3AD1238127C12FEA2147C4813FC00785BEA70016C485A381E07C03807FF80D801FCC7FC
1C2E7CAC26>I<B500F0EB7FFEA2D803FCC7EA1FE06C481580EE1E00161C5E5E16C04B5A
4BC7FC15065D15385D5D4A5A4A5A4A7E4A7E141FEC37F0EC63F814C19038F980FC9038FB
00FE01FE137E497F49806F7E150F826F7E15036F7E821500167E167FEE3F80161F17C048
6CEC3FF0B5D8F001B5FCA2302D7DAC38>I<B512F8A2D803FCC8FC6C5AB3A71618A41630
A41670A216F015011503ED07E00003143FB7FCA2252D7DAC2D>I<D8FFF892380FFF806D
5D0003EFE00000015F01BE1537A2019F1567A3D98F8014C7A2D987C0EB0187A3D983E0EB
0307A2D981F01306A3D980F8130CA2027C1318A36E1330A26E1360A391380F80C0A29138
07C180A3913803E300A2EC01F6A3EC00FCA2486C1378D80FF04B7EB50203B51280153039
2D7CAC42>I<B612F815FF3A03F8001FC00001EC07E0ED01F8150016FC167EA2167FA616
7EA216FC16F81501ED07E0ED1FC090B6120015F801F8C8FCB2487EB512F0A2282D7DAC31
>80 D<90383F80103901FFF0303907C07C70380F000E001CEB07F0003C13030038130148
1300A200F01470A315307EA26C1400127EEA7F80EA3FF013FF6C13F06C13FE6C7F000114
806C6C13C0010713E09038007FF0EC07F81401140015FC157C12C0153CA37E1538A26C14
786C14706C14E06CEB01C038E7800339E1F00F0038C07FFE38800FF01E2F7BAD29>83
D<007FB712F0A29039000FC007007C15010070ED0070A200601630A200E01638A2481618
A5C71500B3A94A7E011FB512E0A22D2D7DAC34>I<B539F001FFFEA2D803FCC7EA1FE06C
48EC0780EE0300B3AC000015067F137C5E7F011E5C011F5CD907805B903903E001C09039
01F80F809026007FFEC7FCEC0FF02F2E7DAC36>I<B500C090381FFF80A2D807FCC73803
F8006C48EC01E000016F5AA26C6C4A5AA27F017E4AC7FCA26D1406A26E130E011F140CA2
6D6C5BA26E133801071430A26D6C5BA26E13E001015CA26D6C485AA2ECFE03027E90C8FC
A2EC3F06A2158EEC1F8CA2EC0FD8A215F86E5AA26E5AA36E5AA2312E7EAC36>I<14E0A2
497EA3497EA3EB067CA2EB0E7EEB0C3EA2497EA3496C7EA201707FEB6007A2496C7E90B5
FC4880EB8001A2D803007F1400A20006147CA2000F147E123F3AFFC003FFE0A223237EA2
29>97 D<B512FEECFFC0390FC007E00007EB01F8EC00FC157C157EA5157C15FCEC01F8EC
07F090B512C015809038C007F0EC01F8EC00FC157E153E153FA5153E157E15FC1401000F
EB03F0B612E0150020227EA127>I<903803F80290381FFE0690387E038E3901F800DED8
03E0137E4848133E485A48C7121EA2003E140EA2127E007C1406A212FC1500A7007C1406
A2127E123E150C7EA26C6C13186C6C13306C6C1360D801F813C039007E038090381FFF00
EB03F81F247DA227>I<B512FCECFF80390FC00FE00007EB01F06E7E157C81A281A2ED0F
80A316C0A91680A2151F1600151E153E5D5D4A5A000FEB07E0B6128002FCC7FC22227EA1
29>I<B612F8A2380FC0010007EB007815381518151CA2150C140CA31500141C143CEBFF
FCA2EBC03C141C140CA21503A214001506A3150EA2151E153E000F14FCB6FCA220227EA1
25>I<B612F8A2380FC0010007EB007815381518151CA2150CA2140CA21500A2141C143C
EBFFFCA2EBC03C141C140CA491C7FCA7487EB5FCA21E227EA124>I<903803FC0190381F
FF0390387F03C79038F800EFD803E0133F48487F485A90C77E5A003E80A2127E81127C12
FC92C7FCA691380FFFF0127C007E9038003F0081123EA27E6C7EA26C7ED803F05BC66C13
7790387F01E390381FFF81D903FEC7FC24247DA22B>I<3AFFFE0FFFE0A23A0FE000FE00
6C48137CAC90B512FCA29038C0007CAE486C13FE3AFFFE0FFFE0A223227EA129>I<EAFF
FEA2EA0FE0EA07C0B3AAEA0FE0EAFFFEA20F227EA114>I<D8FFFEEBFFE0A2D80FE0EB7F
006C48137C15705D4A5A4A5A4AC7FC140E5C14305C14E0EBC1F0EBC3F813C6EBCC7CEBD8
7EEBF03E497E01C07F140F6E7E6E7EA26E7E6E7E81157C157E486C137F3AFFFE01FFF0A2
24227EA12A>107 D<B5FCA2EA0FE06C5AB21530A41570A2156015E014011403000F130F
B6FCA21C227EA122>I<D8FFC0ECFFC06D5B000FEDFC0000075DD806F0EB0378A3017813
06A26D130CA36D1318A26D1330A39038078060A3903803C0C0A2903801E180A3903800F3
00A2147EA3000F133CD81F8014FCD8FFF090380FFFC014182A227DA132>I<3AFFC001FF
E013E03A07F0003F00151ED806F8130C7F137C7F7FA2EB0F80EB07C014E01303EB01F014
F81300147C143EA2141FEC0F8C15CC1407EC03EC15FC14011400157CA2000F143C486C13
1CEAFFF0150C23227EA129>I<EB07F8EB3FFF9038FC0FC03901F003E048486C7E48486C
7E4848137C48C77EA2003E80A2007E1580007C140FA200FC15C0A8007C1580007E141FA3
003E15006C143EA26C6C5B6C6C5B6C6C485A6C6C485A3900FC0FC0D93FFFC7FCEB07F822
247DA22A>I<B512FCECFF80390FC00FC00007EB03E0EC01F0EC00F8A215FCA515F8A2EC
01F0EC03E0EC0FC090B51280ECFC0001C0C7FCAC487EEAFFFEA21E227EA125>I<B512F8
14FF390FC00FC00007EB03E06E7E81140081A45D14015D4A5AEC0FC090B5C7FC14FCEBC0
1F6E7E6E7E140381A481A3163015F8380FE0013AFFFE00FC60ED7FC0C8EA1F8024237EA1
28>114 D<3801F8083807FF18381E07B8383C01F8383800785A143812F01418A36C1300
7E127EEA7FE0EA3FFE381FFF806C13C0000313E038007FF0EB07F81301EB007CA2143C12
C0A46C133814786C137000FC13E038EF01C038C7FF803880FE0016247DA21E>I<007FB6
FCA2397C03E01F00701407006080A200E01580A200C01401A4000091C7FCB3497E48B512
C0A221227EA127>I<3AFFFE01FFE0A23A0FE0003F006C48131E150CB3A400035C7F1201
5D6C6C5B01785B90383E0380D90FFFC7FCEB01F823237EA129>I<D8FFF8EB1FF8A2D80F
C0EB07C000071580ED03006D5B00031406A26C6C5BA26D131C00001418A2017C5BA2017E
1370013E1360A26D5BA290380F8180A214C1D907C3C7FCA2EB03E6A214FE6D5AA26D5AA3
1470A225237FA129>I<D8FFF8EB1FF8A2D80FE0EB0FE00007EC07800003EC06006D130E
6C6C130C00005C6D1338017E1330013E5B013F13E06D6C5AEC8180EB0FC3D907E3C7FC14
E6EB03FE6D5A5C1300AB130190381FFF80A225227FA129>121 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fv cmr8 8 70
/Fv 70 128 df<ECFFC0010713FC90381F807C90383E00FC5B5B485A0003147C5BAAB612
FCA23903E0007CB3A6486C13FE3A7FFF0FFFE0A2232F7FAE27>13
D<91397F800FF0903A03FFE07FFE903A1FC079F80F903B3E001FE003804990393FC007C0
4990387F800F48481400A24848017EEB0780033EEB030094C7FCA7EF07C0B9FCA23B03E0
003E000F1707B3A5486C017FEB0FE03C7FFF07FFF0FFFEA2372F7FAE3B>I<1303130713
0E131C1338137013F0EA01E013C01203EA0780A2EA0F00A2121EA35AA45AA512F8A25AAB
7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F013701338131C130E130713
0310437AB11B>40 D<12C07E12707E7E7E120FEA0780120313C0EA01E0A2EA00F0A21378
A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A313F0A2EA01E0A2EA03C013
801207EA0F00120E5A5A5A5A5A10437CB11B>I<123C127EB4FCA21380A2127F123D1201
A312031300A25A1206120E5A5A5A126009157A8714>44 D<B512C0A412047F9018>I<12
3C127E12FFA4127E123C08087A8714>I<15C0140114031580A214071500A25C140EA214
1E141CA2143C143814781470A214F05CA213015CA213035C130791C7FCA25B130EA2131E
131CA2133C1338A21378137013F05BA212015BA212035BA2120790C8FC5A120EA2121E12
1CA2123C1238A212781270A212F05AA21A437CB123>I<EB3FC0EBFFF03803E07C48487E
48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C14E0A3007E130700
3E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC01C2D7DAB23>I<13
0C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23>I<EB7F803801
FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC14F07E1403A3007C
1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A495A495A011EC7FC5B
5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FCA21C2C7DAB23>I<
EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F1300A2000C131FC7
FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C0140F15E0A2EC07
F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F00380780FC3801
FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01BE1303143E130613
0E130C131813381330136013E013C0EA0180120313001206120E120C5A123812305A12E0
B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB0180380FC01F90B512
005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F801F01001380000E
130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E0006014C00070130F6C
14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<EB03F8EB0FFE9038
3E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091C7FC123EA2127EA2
127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814E0A214034814F0A4
127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F003803C03E6C6C5A3800
7FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E039700001C000601480
140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FCA25B130E131EA213
3EA3133C137CA413FCA913781D2E7CAC23>I<EB1FC0EBFFF03803E07C3807801E48487E
001EEB0780A248EB03C0A4123E1407003F1480381FC00F01E01300EBF81E6C6C5A3807FF
F86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D81F0013C0001E133F48EB1FE0007C
13070078EB03F012F84813011400A46C14E000781301007C14C0003C13036CEB0780390F
800F003807E03C3801FFF038003FC01C2D7DAB23>I<EB3F80EBFFF03803E0783807C03E
48487E48487E003E14801407007E14C0127C00FC14E01403A315F0A5007C1307127EA200
3E130F7E6C131F3807803B3803E0F33800FFC390383F03E013001407A215C0A2140F001E
1480003F14005C143E143C003E5B001C5B380E03E03807FF80D801FEC7FC1C2D7DAB23>
I<123C127E12FFA4127E123C1200AD123C127E12FFA4127E123C081D7A9C14>I<B812FC
A3CBFCADB812FCA32E137C9937>61 D<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FC
A2EC70FEEC607EA24A7EA349486C7EA2010380EC000FA201066D7EA3496D7EA2011FB57E
A29038180001496D7EA349147EA201E0147F4980A20001ED1F801203000716C0D80FF0EC
3FE0D8FFFC0103B5FCA2302F7EAE35>65 D<B612FCEDFF803A03F8000FC00001EC03F06F
7E6F7E82167E167FA6167E16FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0
ED01FC6F7E167F821780161F17C0A61780163F17005E16FEED03FC0003EC0FF0B712C04B
C7FC2A2D7DAC32>I<DA1FF013C09138FFFE01903903F00F8390390F8001E3013FC71277
017C143F4848141F4848140F48481407A248481403121F491401123F90C8FC481500A300
FE1600AB127F17C0A27E7F001F15016D1580120F6C6C1403EE07006C6C14066C6C140ED8
007C5C013F147890390F8001E0903903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>I<
B612F815FF3A03F8001FE00001EC03F0ED00F8167E82EE1F80160F17C0EE07E0A2EE03F0
A217F81601A317FCAA17F8A3EE03F0A217E0160717C0160FEE1F80EE3F00167E5EED03F0
0003EC1FE0B7128003F8C7FC2E2D7DAC36>I<B712FEA23903F800010001EC003E828282
A282A3178016011518A293C7FCA31538157815F890B5FCA2EBF800157815381518A21760
A392C712C0A4160117801603A21607160F163F0003913801FF00B8FCA22B2D7EAC30>I<
B712FCA23903F800030001EC007C163E161E160EA21606A3160716031518A21600A31538
157815F890B5FCA2EBF800157815381518A592C7FCAB487EB512F8A2282D7EAC2E>I<DA
1FF013C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F4848
140F48481407A248481403121F491401123F90C8FC481500A300FE1600A992381FFFFEA2
007F9138001FE0EE0FC0A27E7F121F7F120F6C7EA26C7E6C6C141FEA007C013F143FD90F
8013F3903903F007C10100B51200DA1FF813002F2F7CAD37>I<B512F0A23803FC006C5A
B3B3A3487EB512F0A2142D7EAC19>73 D<90387FFFF0A201001300147EB3AD123812FEA3
14FE5C1278387001F86C485A381E07E03807FF80D801FCC7FC1C2E7DAC24>I<B512F8A2
D803FCC8FC6C5AB3A7160CA41618A41638A2167816F81501ED07F00003141FB7FCA2262D
7EAC2C>76 D<D8FFF8923807FFC06D5D0003EFF00000015F01BE151BA2019F1533A3D98F
801463A2D987C014C3A2D983E0EB0183A3D981F0EB0303A2D980F81306A3027C130CA26E
1318A36E1330A291380F8060A2913807C0C0A3913803E180A2913801F300A3EC00FEA215
7C487ED80FF04B7EB5D93801B512C0A23A2D7DAC41>I<D8FFF8903803FFFC7F00019138
003FC06DEC0F006D1406EBBF80A2EB9FC0EB8FE0138780EB83F8138180EB80FE147E147F
EC3F80EC1FC0140F15E0EC07F0140315F8EC01FC140015FE157FED3F86151F16C6ED0FE6
150716F6ED03FE1501A21500167E163EA2486C141ED80FF0140EB5FC16062E2D7DAC35>
I<EC3FF0903801FFFE903907E01F8090391F8007E090393E0001F001FCEB00FC4848147E
4848804848EC1F8049140F000F16C04848EC07E0A248C8EA03F0A24816F8A2007E1501A2
00FE16FCAA007FED03F8A36C16F06D1407001F16E0A26C6CEC0FC06D141F000716806C6C
EC3F006C6C147E6C6C5C017E495A90391F8007E0903907E01F80902601FFFEC7FC903800
3FF02E2F7CAD37>I<B612FCEDFF803A03F8000FE00001EC03F0ED00F882167E167F8217
80A617005E167E5E5EED03F0ED0FE090B6128003FCC7FC01F8C9FCB2487EB512F0A2292D
7EAC30>I<B612C015FC3903F8007F0001EC0FC06F7E6F7E6F7E82150082A55E15015E4B
5A4B5A4B5A037FC7FC90B512FC15F09038F800FC153E6F7E150F826F7EA582A5170316F8
15031707486C903801FC0EB539F000FE1CEE3FF8C9EA07E0302E7DAC34>82
D<90383F80303901FFF0703807C07C390F000EF0001E13074813034813011400127000F0
1470A315307EA26C1400127E127FEA3FE013FE381FFFE06C13FC6C13FF00011480D8003F
13E013039038003FF0EC07F81401140015FC157C12C0153CA37EA215787E6C14706C14F0
6CEB01E039F78003C039E3F00F0038E07FFE38C00FF01E2F7CAD27>I<007FB712F8A290
39000FC003007C150000701638A200601618A200E0161CA248160CA5C71500B3A94A7E01
1FB512E0A22E2D7EAC33>I<B539F003FFFCA2D803FCC7EA3FC06C48EC0F001606B3AB16
0E0000150C7F161C017C1418017E14386D5C6D146090390F8001E0903907E00380902601
F80FC7FC9038007FFCEC0FF02E2E7DAC35>I<B53C801FFFF001FFF8A22707FC000190C7
EA3FC0D803F06D48EC1F00047E140EA26C6C027F140CA26D171C0000DBDF801318A26D17
38017E9026018FC01330A2017F17706D90260307E01360A2028016E0011F90260603F05B
A202C01501010F90260C01F85BA202E01503010790261800FC90C7FCA202F05D010349EB
7E06A202F8150E010149EB3F0CA202FC151C010049EB1F98A202FE15B8DA7F80EB0FF0A2
023F5D92C71207A26E5D021E1403A2020E5D020C1401452E7FAC48>87
D<3B7FFFE003FFF8A2000390C713806C48EC7E000000157C017F14786D14706E5B6D6C5B
6D6C485A15036D6C48C7FC903803F80601015BECFC1C6D6C5AEC7F305DEC3FE06E5A140F
816E7E81140DEC1DFCEC38FEEC307F14609138E03F8049486C7EEC800FD903007F496D7E
010E6D7E130C011C6D7E496D7E49147E167F01F0EC3F80000316C0D80FF8EC7FE0D8FFFE
0103B5FCA2302D7EAC35>I<B500C090380FFFC0A2D807FEC73801FE006C48EC00F80001
16E06C6C5D1601017F4A5A6D6C91C7FC5E6D6C130E6D6C130C5E6D6C13386D6C13305E6D
6C13E06D6C5B4B5AEC7F03DA3F83C8FC1586EC1FCEEC0FEC15F814076E5AB04A7E49B512
C0A2322D7FAC35>I<EAFFE0A3EAE000B3B3B3A7EAFFE0A30B4379B114>91
D<EAFFE0A31200B3B3B3A712FFA30B437FB114>93 D<13FF000713C0380F01F0381C00F8
003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F0012
7E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F83901FC01E01F20
7D9E23>97 D<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F09038
F8007C49137E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B9038
BC01F090380E07E0390607FF80260001FCC7FC222F7EAD27>I<EB1FE0EB7FFC3801F01E
3803E0073907C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127EA215
C07E6C130101801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F>I<
15F8141FA214011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F0048
1300123E127EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F03CFF
C038007FF090391FC0F800222F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F801E
381F001FEC0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14C012
3F6C1301390F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>I<EB
03F0EB0FFCEB3E1EEB7C3F13F8EA01F0A23803E00C1400AAB512E0A23803E000B3A6487E
387FFF80A2182F7FAE16>I<013F13F89038FFC3FE3903E1FF1E3807807C000F140C391F
003E00A2003E7FA76C133EA26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8FCA3
121E121F380FFFF814FF6C14C04814F0391E0007F848130048147C12F848143CA46C147C
007C14F86CEB01F06CEB03E03907E01F803901FFFE0038003FF01F2D7E9D23>I<EA07C0
12FFA2120F1207AC14FE9038C3FF809038C703E09038DE01F013F8496C7EA25BA25BB248
6C487E3AFFFE1FFFC0A2222E7EAD27>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8
EA07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E7EAD14>I<EA07C012FFA2120F1207
ADEC1FFEA2EC0FF0EC07C05D020EC7FC5C5C5C5CEBC3C013C7EBCFE0EBDFF013F9EBF0F8
497EEBC07E143E80816E7E14076E7E816E7E486C487E3AFFFE07FF80A2212E7EAD25>
107 D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>I<2607C07FEB07
F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F803B07DC00F9C00F01F8D9FF8013
C04990387F000749137EA249137CB2486C01FEEB0FE03CFFFE0FFFE0FFFEA2371E7E9D3C
>I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA07F8496C7EA25BA25BB2486C487E
3AFFFE1FFFC0A2221E7E9D27>I<EB1FE0EB7FF83801F03E3803C00F3907800780390F00
03C04814E0003EEB01F0A248EB00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB03E0A2
390F8007C03907C00F803901F03E0038007FF8EB1FE01E207E9E23>I<3807C0FE39FFC7
FF809038CF03E0390FDC01F03907F800FC49137E49133E49133FED1F80A3ED0FC0A8151F
1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE07E09038C7FF80D9C1FCC7FC01C0
C8FCA9487EEAFFFEA2222B7E9D27>I<90380FE01890387FF8383801F81C3903E00E7838
07C007390F8003F8001F1301EA3F00A2007E1300A212FE5AA8127EA36C13017EEB800338
0FC0073803E00E3801F03C38007FF0EB1FC090C7FCA94A7E91381FFFC0A2222B7E9D25>
I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5FCA2181E
7E9D1C>I<3801FE183807FFB8381E01F8EA3C00481378481338A21418A27E7EB41300EA
7FF06CB4FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C131EA27EA26C13
3CA26C137838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A312011203A212
07121FB512F0A23803E000AF1418A714383801F03014703800F860EB3FE0EB0F80152A7F
A81B>I<D807C013F800FF131FA2000F130100071300B21401A314033803E007EC0EFC3A
01F81CFFC038007FF890391FE0F800221F7E9D27>I<3AFFFC01FFC0A23A0FE0007E0000
07147C15380003143015706C6C1360A26C6C5BA390387C0180A26D48C7FCA2EB3F07EB1F
06A2EB0F8CA214DCEB07D8A2EB03F0A36D5AA26D5A221E7F9C25>I<3BFFFC3FFE07FFA2
3B0FE003F001F801C09038E000F00007010114E0812603E00314C0A2913807F8012701F0
06781380A29039F80E7C030000D90C3C1300A290397C181E06A2151F6D486C5AA2168C90
391F600798A216D890390FC003F0A36D486C5AA36DC75A301E7F9C33>I<3AFFFC07FF80
A23A0FF003FC000003EB01F0000114C06D485A000091C7FCEB7C06EB3E0E6D5A14B8EB0F
B0EB07E013036D7E497E1307EB067C497EEB1C1F01387FEB700F496C7E6E7ED803C07F00
076D7E391FE003FC3AFFF007FFC0A2221D7F9C25>I<3AFFFC01FFC0A23A0FE0007E0000
07147C1538000314306D137000011460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FCA2
EB1F06A2148EEB0F8CA2EB07D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EAFC
06A25B131CEA7838EA7070EA3FE0EA0F80222B7F9C25>I<003FB51280A2EB003F003C14
000038137E00305BEA700100605B495A495A130F00005B495A49C7FC5B137E9038FC0180
EA01F8120313F03807E003EA0FC0001F1400138048485A007E5B00FE133FB6FCA2191D7E
9C1F>I<B712C0A22202809223>I<001C13E0387F03F8A200FF13FCA2007F13F8A2381C00
E016087AAD23>127 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fw cmr10 10 78
/Fw 78 123 df<1506150FA24B7EA24B7EA24B7EA2EDDFF0A29138018FF8A291380307FC
A291380603FEA291380E01FF140CDA1C007F141802386D7E143002706D7E146002E06D7E
5C01016E7E5C01036E7E91C7FC496E7E1306010E6E7E130C011C6E7F131801386F7E1330
01706F7E136001E06F7E5B170F484882170748C97F17030006831701488383481880001F
B9FC4818C0A24818E0A2BA12F0A23C3C7CBB45>1 D<DA0FF813FC91397FFF07FF903B01
F807DF83C0903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B9338F00780
4848010790C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3
333B7FBA30>11 D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F00
07017E497EA25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C
497E267FFFE0B512C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E007
90381F800FEB3F00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFF
E0B512C0A32A3B7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E0
01CFC00380903C1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03
076E5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C49
7E267FFFE0B500C1B51280A3413B7FBA45>I<001C131C007F137F39FF80FF80A26D13C0
A3007F137F001C131C00001300A40001130101801380A20003130301001300485B000613
06000E130E485B485B485B006013601A197DB92A>34 D<030C1303031E497EA2033E130F
A2033C91C7FCA2037C5BA20378131EA303F8133EA24B133CA20201147CA24B1378A20203
14F8A24B5BA302071301007FB91280BA12C0A26C1880C7271F0007C0C7FC021E5CA3023E
130FA2023C91C8FCA2027C5BA20278131EA302F8133E007FB91280BA12C0A26C18802800
03E000F8C8FC4A5BA301071301A202805BA2010F1303A202005BA2491307A2011E5CA301
3E130FA2013C91C9FCA2017C5BA20178131EA20130130C3A4A7BB945>I<121C127FEAFF
80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A1979B917
>39 D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA212075B120F90
C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F1203A26C7EA2
6C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12C07E12707E7E7E
120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA21480A3EB07C0A6EB
03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA2485A485AA2485A
48C7FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB812F8B912FCA26C17F8C8
0078C8FCB3A6153036367BAF41>43 D<121C127FEAFF80A213C0A3127F121C1200A41201
1380A2120313005A1206120E5A5A5A12600A19798817>I<B512FCA516057F941C>I<121C
127FEAFF80A5EA7F00121C0909798817>I<EB03F8EB1FFF90387E0FC09038F803E03901
E000F0484813780007147C48487FA248C77EA2481580A3007EEC0FC0A600FE15E0B3007E
15C0A4007F141F6C1580A36C15006D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90
387E0FC0D91FFFC7FCEB03F8233A7DB72A>48 D<EB01C013031307131F13FFB5FCA2131F
1200B3B3A8497E007FB512F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F
000FF0000E6D7E486D7E486D7E123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FC
EDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC
011EEB01805B5B49130348481400485A485A000EC75A000FB6FC5A5A485CB6FCA321387C
B72A>I<EB07F8EB3FFF4913C03901F80FF03903C007F848486C7E380E0001000F80381F
E0006D7FA56C5A6C5AC85A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038
000FE06E7EEC01FC816E7EED7F80A216C0A2153F16E0A2121EEA7F80487EA416C049137F
007F1580007EC7FC0070ECFF006C495A121E390F8003F83907F00FF00001B512C06C6C90
C7FCEB0FF8233A7DB72A>I<1538A2157815F8A2140114031407A2140F141F141B143314
73146314C313011483EB030313071306130C131C131813301370136013C01201EA038013
005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A7E0103B512F8A325397EB8
2A>I<0006140CD80780133C9038F003F890B5FC5D5D158092C7FC14FC38067FE090C9FC
ABEB07F8EB3FFE9038780F803907E007E090388003F0496C7E12066E7EC87EA28181A216
80A4123E127F487EA490C71300485C12E000605C12700030495A00385C6C1303001E495A
6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0
010713FC90380FE03E90383F800790387E001F49EB3F804848137F485AA2485A000FEC3F
0049131E001F91C7FCA2485AA3127F90C9FCEB01FC903807FF8039FF1E07E090383801F0
496C7E01607F01E0137E497FA249148016C0151FA290C713E0A57EA56C7E16C0A2121FED
3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC
233A7DB72A>I<12301238123E003FB612E0A316C05A168016000070C712060060140E5D
151800E01438485C5D5DC712014A5A92C7FC5C140E140C141C5CA25CA214F0495AA21303
A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF01
7F13C09038FC07F03901E001F848486C7E4848137C90C77E48141E000E141F001E80A312
1FA27F5D01E0131E6C6C133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5B
EB3FFF6D13C081017F13F801F07F3903E07FFE3907801FFF48486C1380481303003E6D13
C0003CEB007F007C143F0078EC0FE000F814075A1503A21501A36C15C012781503007C15
806CEC07006C5C6C6C131ED807E0137C3903F803F0C6B55A013F1380D907FCC7FC233A7D
B72A>I<EB03F8EB1FFF017F13C09038FC07E03903F803F048486C7E48486C7E49137E12
1F48487FA2007F158090C7FCA248EC1FC0A616E0A56C143FA27F123F001F147FA26C6C13
FF3907E001DF0003149F3801F0033900FC0F1FD93FFC13C0EB07F090C7FC153F1680A316
005D000F147E487E486C5BA24A5A4A5A49485A6C48485A001C495A260F807FC7FC3807FF
FC000113F038003FC0233A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127F
EAFF80A5EA7F00121C092479A317>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127F
5A1380A4127F121D1201A412031300A25A1206A2120E5A121812385A1260093479A317>
I<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61
D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7FEC18
0FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F167FA20106
810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E1201486C81D8
0FFC02071380B56C90B512FEA3373C7DBB3E>65 D<B712E016FC16FF0001903980007FC0
6C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500
FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A7188017FFA24C
13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B>I<913A01FF8001
80020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F4948EB01DFD9
3F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A2485A1703123F5B
007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E5F6C7E17066C
6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF
803FC7FC9039007FFFFC020F13F002011380313D7BBA3C>I<B712C016F816FE00019039
8001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0170F18F0
A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE
0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>I<B812FCA30001903880000F6C
90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A21503150F91B5
FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A21707A2170F17
3F177F486D903807FF00B9FCA333397DB839>I<B812F8A30001903880001F6C90C71201
EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3
EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>I<DBFF8013C0020F
EBF001023F13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00EF4948147F49
48143F49C8121F485A4848150F48481507A248481503A2485A1701123F5B007F1600A448
481600AB93B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C
6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC03F0191393FFF
FC00020F01F0130002001380383D7CBA41>I<B648B512FEA30001902680000313006C90
C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>I<B612C0A3
C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<B649B5FCA3000101809038007FF0
6C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030E
C9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E
6F7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF
80A339397DB841>75 D<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770
A317F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA2
0001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC01
83A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C
13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D
5A487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE80
80C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F
6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07
FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2
177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E091
38FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E4848
6E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17
F8491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC00007
17806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80
D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816
FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FE
A2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FC
A330397DB839>I<B612FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E70
7EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0
ED03F8ED00FE82707E707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D
6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D>82 D<D90FF813C090383FFE01
90B512813903F807E33907E000F74848137F4848133F48C7121F003E140F007E1407A200
7C140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F8
6C14FEC680013F1480010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C0
1403A21501A37EA216F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8
F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB
001F273E0001FE130348EE01F00078160000701770A300601730A400E01738481718A4C7
1600B3B0913807FF80011FB612E0A335397DB83C>I<B6903807FFFEA300010180903800
7FE06C90C8EA1F80EF0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F0
6D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80
373B7DB83E>I<B500FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A
6E1403017F93C7FCA280013F1506A26E140E011F150C80010F5DA28001075DA26E147001
031560A26D6C5CA2806D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF0
1C020F1318A26E6C5AA215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151C
A3393B7EB83E>I<B5D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80F
F8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA2
80011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE30
0FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1
150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141F
A202035E4B140FA202015E4B1407A2020093C8FC4B80503B7EB855>I<003FB7FCA39039
FC0001FE01C0130349495A003EC7FC003C4A5A5E0038141F00784A5A12704B5A5E006014
FF4A90C7FCA24A5A5DC712074A5AA24A5A5D143F4A5AA24A5A92C8FC5B495AA2495A5C13
0F4948EB0180A2495A5C137F495A16034890C7FC5B1203485AEE0700485A495C001F5D48
485C5E4848495A49130FB8FCA329397BB833>90 D<EAFFF8A4EAF000B3B3B3B3A3EAFFF8
A40D5378BD17>I<3901800180000313033907000700000E130E485B0018131800381338
003013300070137000601360A200E013E0485BA400CE13CE39FF80FF806D13C0A3007F13
7FA2393F803F80390E000E001A1974B92A>I<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D
537FBD17>I<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E
7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC16
0C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE0
3A007F8007C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E
9039F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E16
7FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F009038
81E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F800
70484813F83907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FE
AA127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C
07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF
90387E078F9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA212
7E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39
007C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803
E03903F001F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FC
A248C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C
6C137090387E03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1
E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB48
7E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901
F00FE03903E007C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C48
5A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6C
ECFF804815C03A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15
F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC
26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3
800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA
0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A31238
7EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3
B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B719
>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4A
C7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E8114
00157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA312
0F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF891
3AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907
F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<39
03F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA3
5BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038
F800F84848137C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A4
00FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C
6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FF
EB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F8491301
16FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039
F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903
F813C090381FFE0190387E07819038FC01C33903F000E3000714774848133749133F001F
141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF39
01F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<
3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC
0080491300A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E00
3F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC6
7F01071380EB007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38
F3C07C38E1FFF038C03F801A277DA521>I<1318A51338A31378A313F812011203120700
1FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F8
1A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12
016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA4
2E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C13
06A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180
A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8
009038000FF86C48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006
156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF8
7090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7F
A20100141E4A130E0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80
000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5A
A2147F804A7E8114CF903801C7E090380383F090380703F8EB0601496C7E011C137E4913
7F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA3
3A0FF8000FF06C48EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D
6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA314
38A21430A214701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0
EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE01230
0070EB1FC0EC3F800060137F150014FE495AA2C6485A495AA2495A495A495AA290387F00
0613FEA2485A485A0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90B5
FCA21F247EA325>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fx cmmi10 10 41
/Fx 41 123 df<EC3FC0ECFFF8903807E07C90380F801FD93F00EB800C017E130F499038
07C01C4848ECE018485A484801031338000FEDF0305B001F16704848156017E0007F16C0
90C713F1178016F34816004815F716FE5EA2485D5EA4007E1407150F003E91381DF81800
3F14796C02E11338270F8007C013303B07E03F007CF02601FFF8EB3FC026003FC0EB0F80
2E267DA435>11 D<ED07F0ED1FFE9238780F809238E007C0913901C003E09138038001DA
070013F0140E4A13004A14F8143002701301146002E014F05C010114035C17E001031407
91C713C0EE0F8049EC1F000106143E913803FE7C90390E07FFF890390C0E03E091380FFF
F0913803FC78011CC7127C011880A28213381330A2178013701360A301E0143F491500A3
00015D167E5B16FE00035D6D495AA24B5A00074A5AD806E0495A0160495A0170013EC7FC
D80E3813FC390C1E03F0903807FFC0D901FEC8FC001CCAFC1218A312381230A312701260
A312E05AA22D4B7EBA2F>I<1503A35DA21506A2150EA2150CA2151CA21518A21538A215
30A21570A2EC07FE91383FFFC0903901FCE3F0903907E0E0F890391F80C03ED93E007FEB
7C01D801F8EC0F80D803F0018013C0D807E014071403D80FC015E0D81F801300A248485A
A2007E1306A2020E130F12FE48010C14C0A2021CEB1F80A20218EB3F00A20238137E007C
5D1430007E4A5A003E90387003F06CEC07C09138600F80D80F80013FC7FC3903E0E0FC39
01F8E7F039007FFF80D90FFCC8FCEB01C0A25CA21303A291C9FCA25BA21306A2130EA213
0CA22B4B7CB931>30 D<13F8EA03FC120FEA1FF8EA3F80EA7E00127C5AA25AA47EA2127C
127EEA3F80EA1FF8EA0FFC1203EA00F80E167CA817>44 D<121C127FEAFF80A5EA7F0012
1C0909798817>58 D<121C127FEAFF80A213C0A3127F121C1200A412011380A212031300
5A1206120E5A5A5A12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00EE0FF8
EE3FE0EEFF80DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80D903
FEC9FCEB0FF8EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F80EA3F
E0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800
FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF
0380323279AD41>I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A2
15C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303
A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A2
5B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A
>I<126012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF903800
7FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FC
EE01FF9338007F80EF1FC0A2EF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FC
ED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFC
EA07FCEA3FF0EA7FC048CBFC12FC1270323279AD41>I<1760177017F01601A21603A216
07160FA24C7EA216331673166316C3A2ED0183A2ED0303150683150C160115181530A215
60A215C014011580DA03007FA202061300140E140C5C021FB5FC5CA20260C7FC5C83495A
8349C8FC1306A25BA25B13385B01F01680487E000716FFB56C013F13FF5EA2383C7DBB3E
>65 D<0103B77E4916F018FC903B0007F80003FE4BEB00FFF07F80020FED3FC0181F4B15
E0A2141FA25DA2143F19C04B143F1980027F157F190092C812FE4D5A4A4A5AEF0FF04AEC
1FC005FFC7FC49B612FC5F02FCC7B4FCEF3FC00103ED0FE0717E5C717E1307844A1401A2
130F17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D5A017F4BC7FC4C5A91C7EA07FC49EC
3FF0B812C094C8FC16F83B397DB83F>I<DCFF8013E0030F13F0037F9038FC01C0913A01
FF803E03913A07FC000F07DA0FE0EB038FDA3FC0903801DF804AC812FFEB01FED903F815
7F4948ED3F00495A495A494881017F161E49C9FC5B12014848161C5B1207485A1818121F
4993C7FCA2485AA3127F5BA312FF90CCFC93387FFFFE93B5FCA29338007FC0715A177F95
C7FCA27E5F5F7F123F16016C7E5F6C6C14036D14071207D803FCEC1EF86C6C143C26007F
80EBF07890393FF007E0010FB5EA8030010349C9FC9038003FE03B3D7DBA41>71
D<0103B6FC5B5E90260007FCC8FC5D5D140FA25DA2141FA25DA2143FA25DA2147FA292C9
FCA25CA25CA21301A25CA21303A25CA2130718404A15C0A2010F150118804A1403A2011F
16005F4A1406170E013F151E171C4A143C177C017F5D160391C7120F49EC7FF0B8FCA25F
32397DB839>76 D<4BB4FC031F13F09238FE01FC913903F0007EDA07C0EB1F80DA1F80EB
0FC0023EC7EA07E002FCEC03F0495A4948EC01F8495A4948EC00FC495A49C912FE49167E
13FE49167F1201485AA2485AA2120F5B001F17FFA2485AA34848ED01FEA400FFEE03FC90
C9FCA2EF07F8A2EF0FF0A218E0171F18C0EF3F806C167F180017FE4C5A6C6C5D1603001F
4B5A6D4A5A000FED1F806C6C4AC7FC6D147E0003EC01F8D801FC495AD8007EEB0FC09026
3F807FC8FC903807FFF801001380383D7CBA3F>79 D<0103B7FC4916E018F8903B0007F8
0007FC4BEB00FE187F020FED3F80F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED
7F80A292C8130018FE4A4A5A604AEC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903
FCCAFCA25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FC
A33B397DB835>I<92391FE00380DBFFFC130002036D5A91390FE01F8F91393F0007DF02
7EEB01FE02F81300495A4948147E177C4948143C495AA2011F153891C8FCA3491530A280
94C7FC80806D7E14FEECFFE06D13FE6DEBFFC06D14F06D806D80021F7F02037FEC003F03
037F1500167F163F161FA3120C160FA2001C151F94C7FCA3003C153EA25E003E5D127E00
7F4A5A6D495A6DEB0FC0D8F9F0495AD8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9
FC313D7CBA33>83 D<0003B812FEA25A903AF8003FC00101C0913880007E4848163C90C7
007F141C121E001C92C7FCA2485CA200305C007017180060130112E0485CA21403C71600
5DA21407A25DA2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A2
5CA21303A25CEB0FFC003FB6FC5AA237397EB831>I<49B500F890387FFFF095B5FC1AE0
D90003018090380FFC004BC713E00201ED07804EC7FC6E6C140E606F5C705B606F6C485A
4D5A031F91C8FCEEE0065F6F6C5A5F03075B705A16F96FB45A94C9FC6F5AA36F7EA34B7F
ED037F9238063FC0150E4B6C7E1538ED700F03E07F15C04A486C7EEC0300020613034A80
5C4A6D7E14704A1300494880495A49C86C7E130E011E153F017E4B7ED803FF4B7E007F01
E0011FEBFFC0B5FC6144397EB845>88 D<91B712FCA25B9239E00007F84AC7EA0FF0D903
F8EC1FE04AEC3FC04AEC7F804A150049485C91C7485A4C5A010E4A5A4C5A010C4A5A011C
4A5A01185D167F4CC7FC90C7485A4B5A4B5A4B5A5E151F4B5A4B5A4BC8FC4A5A4A5A4A5A
5D140F4A5A4A5A4A48130C4AC7FC495A4A141C01031518495A4948143849481430494814
70495A49C812F0495D000115014848140348484A5A4848140F4848141F4848EC7F804848
EB07FF90B7FCB8FC94C7FC36397BB839>90 D<147E903803FF8090390FC1C38090391F00
EFC0017E137F49133F485A4848EB1F8012075B000F143F48481400A2485A5D007F147E90
C7FCA215FE485C5AA214015D48150CA21403EDF01C16181407007C1538007E010F133000
3E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F0026267DA42C>
97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0FCEBE3FF9038
E707C0390FFE03E09038F801F001F013F8EBE000485A15FC5BA2123F90C7FCA214015A12
7EA2140312FE4814F8A2140715F05AEC0FE0A215C0EC1F80143F00781400007C137E5C38
3C01F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>I<EC3FC0903801FFF0903807E0
3C90380F800E90383F0007017E131F49137F484813FF485A485A120F4913FE001F143848
481300A2127F90C8FCA35A5AA45AA315031507007E1406150E003E143C003F14706C14E0
390F8007C03907C03F003801FFF838003FC020267DA424>I<163FED1FFFA3ED007F167E
A216FEA216FCA21501A216F8A21503A216F0A21507A2027E13E0903803FF8790380FC1CF
90381F00EF017EEB7FC049133F485A4848131F000715805B000F143F485A1600485A5D12
7F90C7127EA215FE5A485CA21401A248ECF80CA21403161CEDF0181407007C1538007E01
0F1330003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F00283B
7DB92B>I<EC3FC0903801FFF0903807E07890381F801C90387E001E49130E485A485A12
07485A49131E001F141C153C484813F8EC03E0007FEB3FC09038FFFE0014E090C8FC5A5A
A7007E140315071506003E140E153C6C14706C6C13E0EC07C03903E03F003801FFF83800
3FC020267DA427>I<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F00
0E1380121C121812381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B
12035BA20007131813E01438000F133013C01470EB806014E014C01381EB838038078700
EA03FEEA00F815397EB71D>105 D<150FED3F80A2157FA31600151C92C7FCABEC0F80EC
3FE0ECF0F0903801C0F849487E14005B130E130C131CEB1801133801305BA2EB0003A25D
A21407A25DA2140FA25DA2141FA25DA2143FA292C7FCA25CA2147EA214FEA25CA2130100
1E5B123F387F83F0A238FF87E0495A00FE5BD87C1FC8FCEA707EEA3FF8EA0FC0214981B7
22>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED
1FF0ED783801FEEBE0F89039FC01C1FCEC0383EC07070001130ED9F81C13F891383803F0
91387001E0000349C7FCEBF1C0EBF38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC0
7F6E7E141F001F80D9800F1330A21670003F011F136001001380A216E04815C0007E1481
020F1380158300FE903807870048EB03FE0038EB00F8263B7CB92B>I<EB0FC0EA03FF5A
A2EA001F1480A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A2
5BA2120FA25BA2121FA25BA2123FA290C7FCA25AA2EA7E03A2EAFE07130612FCA2130E13
0C131C1318EA7C38EA3C70EA1FE0EA0780123B7DB919>I<D803E0017F14FE3D07F801FF
E003FFC03D0E3C0781F00F03E03D1C3E1E00F83C01F026383F38D9FC707F00304914E04A
90387DC000007049EB7F8000604991C7FCA200E090C700FE1301485A017E5CA200000201
140301FE5F495CA203031407000160495C180F03075D1203494A011F13601980030F023F
13E00007F000C0495C1901031F023E1380000F1803494A150061033F150E001FEF1E1C49
91C7EA0FF80007C7000EEC03E043267EA449>I<D803E0137F3A07F801FFE03A0E3C0781
F03A1C3E1E00F826383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA2
0000140101FE5C5BA2150300015D5B15075E120349010F133016C0031F13700007ED8060
5B17E0EE00C0000F15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267E
A432>I<90390F8003F090391FE00FFC903939F03C1F903A70F8700F80903AE0FDE007C0
9038C0FF80030013E00001491303018015F05CEA038113015CA2D800031407A25CA20107
140FA24A14E0A2010F141F17C05CEE3F80131FEE7F004A137E16FE013F5C6E485A4B5A6E
485A90397F700F80DA383FC7FC90387E1FFCEC07E001FEC9FCA25BA21201A25BA21203A2
5B1207B512C0A32C3583A42A>112 D<02FC13C0903803FF0190380F838390383F01C790
397E00EF8049137F485A4848133F000715005B485A001F5C157E485AA2007F14FE90C75A
A3481301485CA31403485CA314075D140F127C141F007E495A003E137F381F01EF380F83
9F3903FF1F80EA00FC1300143F92C7FCA35C147EA314FE5C130190387FFFF0A322357DA4
25>I<3903E001F83907F807FE390E3C1E07391C3E381F3A183F703F800038EBE07F0030
EBC0FF00705B00601500EC007E153CD8E07F90C7FCEAC07EA2120013FE5BA312015BA312
035BA312075BA3120F5BA3121F5B0007C9FC21267EA425>I<14FF010313C090380F80F0
90383E00380178131C153C4913FC0001130113E0A33903F000F06D13007F3801FFE014FC
14FF6C14806D13C0011F13E013039038003FF014071403001E1301127FA24814E0A348EB
03C012F800E0EB07800070EB0F006C133E001E13F83807FFE0000190C7FC1E267CA427>
I<EB01C0497E1307A4130F5CA3131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA3
13FE5BA312015BA312035BA312075BA3120FEBC006A2140E001F130CEB801C141814385C
146014E0380F81C038078780D803FEC7FCEA00F819357EB31E>I<13F8D803FE1438D807
0F147C000E6D13FC121C1218003814011230D8701F5C12601503EAE03F00C001005B5BD8
007E1307A201FE5C5B150F1201495CA2151F120349EC80C0A2153F1681EE0180A2ED7F03
03FF130012014A5B3A00F8079F0E90397C0E0F1C90393FFC07F8903907F001F02A267EA4
30>I<01F8EB03C0D803FEEB07E0D8070F130F000E018013F0121C121800381407003014
03D8701F130112601500D8E03F14E000C090C7FC5BEA007E16C013FE5B1501000115805B
150316001203495B1506150E150C151C151815385D00015C6D485A6C6C485AD97E0FC7FC
EB1FFEEB07F024267EA428>I<01F816F0D803FE9138E001F8D8070F903801F003000ED9
800314FC121C12180038020713010030EDE000D8701F167C1260030F143CD8E03F163800
C001005B5BD8007E131F183001FE5C5B033F1470000117604991C7FCA218E000034A14C0
49137E17011880170318005F03FE1306170E000101015C01F801BF5B3B00FC039F807090
3A7E0F0FC0E0903A1FFC03FFC0902703F0007FC7FC36267EA43B>I<903907E001F09039
1FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF5A
000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214FE
A24A130CA20101141C001E1518003F5BD87F81143801835C00FF1560010714E03AFE0E7C
01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267EA42F>I<13F8D803FE
1470D8070F14F8000EEB8001121C121800381403003015F0EA701F1260013F130700E001
0013E012C05BD8007E130F16C013FE5B151F000115805BA2153F000315005BA25D157EA3
15FE5D1401000113033800F80790387C1FF8EB3FF9EB0FE1EB00035DA2000E1307D83F80
5B007F495AA24A5A92C7FCEB003E007C5B00705B6C485A381E07C06CB4C8FCEA01FC2536
7EA429>I<D901E01360D90FF813E0496C13C090383FFE0190397FFF038090B5EA070090
38F81FFF3901E003FE9038C0001C495B5DC85A4A5A4A5A4AC7FC140E5C5C14F0495AEB03
8049C8FC130E5B4913035B495B484813064848130E48C75AD80FFC137C391FFF81F8381E
0FFFD838075B486C5B00605CD8E00190C7FC38C0007C23267DA427>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fy cmbx10 10 45
/Fy 45 122 df<913803FFC0027F13F00103B512FC010FEB00FED93FF8133FD97FE0EBFF
8049485A5A1480484A13C04A6C1380A36F1300167E93C7FCA592383FFFC0B8FCA4000390
C7FCB3ABB5D8FC3F13FFA4303A7EB935>12 D<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0
A2EA3FE0EA0F800D0D798C1B>46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6
007FB61280A4213779B630>49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF26
1F800F1380263F000313C05AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FC
C8FCEDFFF0A216E05C16C04A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F8
49481378495A495A495A013EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FC
A425377BB630>I<EB03FF011F13F0017F13FC3901FC07FF2603F003138048486C13C049
6C13E0EA0FF001FC14F0121F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC
3FF090380FFFC092C7FC15F090380007FE913801FF806E13C016E0ED7FF016F816FC153F
A216FEEA1FC0487E487E487EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0
260FFC0713806CB61200000114FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2
151F153F157F15FFA25C5C5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B
5B485A485A1207485A90C7FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429
377DB630>I<001C15C0D81F80130701F8137F90B61280A216005D5D15F05D15804AC7FC
14F090C9FCA8EB07FE90383FFFE090B512F89038FC07FC9038E003FFD98001138090C713
C0120EC813E0157F16F0A216F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C7
13E0007C15C06C5B6C491380D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90F
F8C7FC25387BB630>I<EC0FF8ECFFFE0103EBFF8090390FF80FC090393FE003E090397F
C001F09038FF000F48EC1FF84848133F485A120F5B121FA2003FEC1FF0ED0FE04990C7FC
127FA21408EC7FF039FFF1FFFC01F313FFD9F78013809039FF007FC049EB3FE04914F0ED
1FF85B16FCA34914FEA5127FA5123F16FCA26C7E16F8000F143F6C6C14F0ED7FE06C6C14
C03A01FF81FF806C90B51200013F13FC010F13F00101138027387CB630>I<123C123EEA
3FE090B71280A41700485D5E5E5EA25E007CC7EA0FC000784A5A4BC7FC00F8147E48147C
15FC4A5A4A5AC7485A5D140F4A5A143F92C8FC5C147E14FE1301A2495AA31307A2130F5C
A2131FA5133FA96D5A6D5A6D5A293A7BB830>I<49B47E010F13F0013F13FC9038FE01FF
3A01F8007F804848EB3FC04848EB1FE0150F485AED07F0121FA27FA27F7F01FEEB0FE0EB
FF809138E01FC06CEBF03F02FC13809138FF7F006C14FC6C5C7E6C14FE6D7F6D14C04914
E048B612F0EA07F848486C13F8261FE01F13FC383FC007EB8001007F6D13FE90C7123F48
140F48140715031501A21500A216FC7E6C14016D14F86C6CEB03F06D13076C6CEB0FE0D8
0FFEEB7FC00003B61200C614FC013F13F00103138027387CB630>I<EB03FF011F13E001
7F13F83901FF03FE4848C67E4848EB7F80484814C0001FEC3FE0123F49EB1FF0127F16F8
A212FF16FCA516FEA5007F143FA3123F157F6C7E000F14FF6C6C5A3903FE03DF6CB5129F
6C6C131FD91FFC13FCEB00201400A216F8D80FE0133F487E486C14F0A216E0157F16C0ED
FF80495A6C4848130090388007FE390FE01FF86CB55A6C14C0C691C7FCEB1FF027387CB6
30>I<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F302038015E1A202
078015C0020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02FC814A7FA2
0101824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982013E151FA2
017E82017C8101FE83B500F80107B61280A4413A7DB948>65 D<B812C017FC17FF18C028
007FF000037F04007F717E717E171F84A2717EA74D5AA260173F4D5A4D5A4C13C0040F5B
91B600FCC7FCA2EFFF8002F0C713F0EF3FF8717E717E717E19807113C0A319E0A719C0A2
5F4D138019005FEF7FFE4C485AB912F018C095C7FC17F03B397DB844>I<DB3FFCEB01C0
0203B5EAC003021FECF00791B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49
481403D97FF080494880485B48177F4849153F4890C9FC181F485A180F123F5B1807127F
A24993C7FC12FFAD127F7FF003C0123FA27F001F1707A26C6C1780180F6C6D16006C6D5D
6C173E6C6D157ED97FF85D6D6C4A5A6DB44A5A010701C0EB0FE06D01FCEBFF80010090B5
48C7FC021F14F8020314E09126003FFEC8FC3A3B7BB945>I<B87E17F817FF18C028007F
F8000713F09338007FF8EF1FFE717E050313807113C0A27113E0F07FF0A2F03FF8A219FC
181FA219FEA419FFAC19FEA419FC183FA219F8187F19F0F0FFE0A24D13C04D13804D1300
EF1FFEEF7FFC933807FFF0B912C095C7FC17FC178040397DB849>I<B912F0A426007FF8
C7FCEF1FF8170717031701A21700A21878A3043C137C183CA41800167CA216FC150391B5
FCA4ECF8031500167CA2163C180FA3181EA293C7FCA2183EA2183C187CA218FCA2EF01F8
1703170F173FEE01FFB9FC18F0A338397DB83F>I<B912C0A43A007FF800039338007FE0
171F170F1707A21703A21701A318F0EE7800A41800A216F8A21501150791B5FCA4ECF807
15011500A21678A693C8FCADB7FCA434397DB83C>I<DB3FFCEB01C00203B5EAC003021F
ECF00791B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49481403D97FF08049
4880485B48177F4849153F4890C9FC181F485A180F123F5B1807127FA24993C8FC12FFAB
043FB61280A2127F7FDC0003EBC000123FA27F121FA26C7EA26C7F6C7F6C7F7ED97FF85C
6D7E6DB45C010701C05B6D01FCEBFF3F010090B5EAFE0F021FECF8030203ECE000912600
3FFEC9FC413B7BB94B>I<B6D8FC03B612F0A426007FF8C70001EBE000B3A391B8FCA402
F8C71201B3A6B6D8FC03B612F0A444397DB84B>I<B612FCA439007FF800B3B3ADB612FC
A41E397DB824>I<B7FCA426007FF8C9FCB3ACEF0780A5170F1800A35FA25FA25F5F5E5E
EE0FFE167FB8FCA431397DB839>76 D<B500F80403B512F06E5EA26E5ED8007FF1E000A2
D97BFF161EA201796D5DA201786D5DA26E6C5DA36E6C4A5AA26E6C4A5AA26E6C4A5AA26E
6C4A5AA26E6C141EA36E6D5BA26E6D5BA26F6C5BA26F6C485AA36F6C485AA26F6C485AA2
6F6C48C7FCA2923803FF1EA36F13BCA26F13F8A2705AA2705AA213FCB500FC6D4848B612
F0A2EE0F80EE070054397DB85B>I<B500FC0203B512F0A28080C66C6D90390003F0006F
6E5A81017B7F13798101787F6E7E6E7E6E7F6E7FA26E7F6E7F6E7F6E7F6F7E153F826F13
806F13C06F13E06F13F06F13F88117FCEE7FFEEE3FFF7013817013C17013E18218F17013
F97013FDEF7FFF8383A28383838383187FA2183F181F01FC160FB500FC150718031801A2
44397DB84B>I<EDFFF8020FEBFF80027F14F0903A01FFC01FFC010790380007FFD91FFC
010113C0D93FF06D6C7E49486E7E49486E7E48496E7E48834890C86C7EA248486F1380A2
48486F13C0A2003F18E0A348486F13F0A400FF18F8AC007F18F06D5DA3003F18E0A26D5D
001F18C0A26C6C4B13806C18006E5C6C6D4A5A6C5F6C6D4A5A6D6C4A5AD93FFC49485A6D
B401075B0107D9C01F90C7FC010190B512FC6D6C14F0020F1480020001F8C8FC3D3B7BB9
48>I<B712FCEEFFE017FC17FF28007FF8000F13C004017F707F717E717EA2717EA284A7
60A24D5A604D5A4D5A04035B041F90C8FC91B612FC17E0839139F8003FFCEE0FFF707F70
7F8284A2707FA584A51A601AF084177F1901DD3FFE13E0B600FC011F130394390FFF87C0
71EBFF8005011400CBEA1FFC443A7DB848>82 D<D907FF130E013FEBE01E90B5EAF83E00
03ECFE7E3A07FC01FFFE390FF0001F4848130F48481303491301007F140090C8FC167E5A
163EA27F161E7F7F6D91C7FC13FC387FFFE014FEECFFF06C14FE6F7E6C816C15F06C816C
81C681133F010F801301D9000F1480EC007F030F13C01503818100F0157FA3163FA27E17
807E167F6C16007E6D14FE01E0495A01F813039039FF801FF800FC90B512E0D8F83F5CD8
F00749C7FC39E0007FF02A3B7BB935>I<003FB91280A4D9F800EBF003D87FC09238007F
C049161F007EC7150FA2007C1707A200781703A400F818E0481701A4C892C7FCB3AE010F
B7FCA43B387DB742>I<B600FC011FB512C0A426007FF8C8381FC000725AB3B3181F013F
94C7FC8060011F163E6D6C157E187C6D6C15FC6D6D495A6D6DEB07F06D01F0EB1FE0DA7F
FEEBFFC0021FB6C8FC02075C020014F0030F1380423A7DB849>I<B600F00103B512E0A4
C601F0C83807F0006E5E017F5F6E150FA2013F5F6E151F011F94C7FC6E5D6D163E6F147E
6D167CA26F14FC6D5E6F13016D5E6F13036D5E811707027F5D6F130F023F5D6F131F021F
92C8FC815F6E143EEE807E6E147CEEC0FC6E5C16E016E16E5C16F36E5C16FF6F5BA36F5B
A26F90C9FCA26F5AA36F5AA26F5AA26F5A433A7EB848>I<007FB5D8F803B512F8A4C66C
48C7D80FF0C7FC6D6C5D6D5E6F495A6D6D49C8FC7F6D6D137E6F5B6DEBF8016D5D6F485A
6E6C485A023F130FDA1FFF5BEE9F806E01FFC9FC805E6E5B6E5B80826F7E153F826F7F5D
4B7F92B57EA2DA01F97FDA03F17F03F07F913807E07FDA0FC07F021F6D7E4B7E4A486C7F
027E8102FE6D7F4A7F49488149486D7F0107804A6E7E49488149486E7E013F81017F83B6
0107B61280A441397DB848>88 D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF
6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F000713
80380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390F
FFFE1F0003EBF80F39003FE0032A257DA42E>97 D<903801FFC0010F13FC017F13FFD9FF
8013802603FE0013C048485AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FF
A9127FA27F123FED01E06C7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A
010F13F00101138023257DA42A>99 D<903803FF80011F13F0017F13FC3901FF83FE3A03
FE007F804848133F484814C0001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FC
A301E0C8FCA4127FA36C7E1678121F6C6C14F86D14F000071403D801FFEB0FE06C9038C0
7FC06DB51200010F13FC010113E025257DA42C>101 D<13FFB5FCA412077EAFED7FC091
3803FFF8020F13FE91381F03FFDA3C01138014784A7E4A14C05CA25CA291C7FCB3A3B5D8
FC3F13FFA4303A7DB935>104 D<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FC
A913FF127FA412077EB3A9B512F8A4153B7DBA1B>I<13FFB5FCA412077EAF92380FFFE0
A4923803FC0016F0ED0FE0ED1F804BC7FC157E5DEC03F8EC07E04A5A141FEC7FE04A7E81
81A2ECCFFEEC0FFF496C7F806E7F6E7F82157F6F7E6F7E82150F82B5D8F83F13F8A42D3A
7EB932>107 D<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>I<01FED97FE0EB0FFC
00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F03FF0DA3C0090388780
1F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291C75BB3A3B5D8FC1FB5
0083B512F0A44C257DA451>I<01FEEB7FC000FF903803FFF8020F13FE91381F03FFDA3C
011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC3F13FFA430257DA435
>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE048486D7E48486D7E48486D
7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D1307001F5DA26C6C495A
6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029257DA430>I<9039FF
01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13C06C0180EB7FE091C7
13F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E137F6E14E06EEBFFC0DA
F00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FCACB512FCA42F357EA4
35>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000075B6C6C5A5CA29138
807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114
D<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7FCB21578A815F86CEB80
F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>116
D<B539F01FFFF0A4000390398003F8006C01C013E06C1407D97FE05B6D6C485A6E48C7FC
90381FFC3E010F5B903807FEFC6D6C5A5D6D5B6D5B6E7E6E7E814A7EA24A7E903801F3FF
D903E37FD907C17FEB0FC049486C7E4A6C7E013E80496D7E49130F00016E7EB590383FFF
F8A42D257EA432>120 D<B539F001FFF8A4000390C7EA3F00161E6E133E6C153C6E137C
6C15786E13F8017F5CECF001013F5C14F8011F495AA2ECFC07010F5CECFE0F010791C7FC
6E5A6D131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E5AA26E5AA292C8FCA25C141E003F
133E387F803C38FFC07C147814F8EBC1F0EBC3E06C485A387D1F80D83FFFC9FCEA1FFCEA
07F02D357EA432>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 520 531 a Fy(MAXIMAL)42 b(SINGULAR)g(LOCI)f(OF)g(SCHUBER)-8
b(T)42 b(V)-11 b(ARIETIES)42 b(IN)f Fx(S)5 b(L)p Fw(\()p
Fx(n)p Fw(\))p Fx(=B)1215 780 y Fv(SARA)24 b(C.)f(BILLEY)h(AND)f
(GREGOR)-6 b(Y)24 b(S.)f(W)-8 b(ARRINGTON)599 1007 y
Fu(Abstra)o(ct.)42 b Fv(In)25 b(this)g(pap)r(er)h(w)n(e)f(giv)n(e)h(an)
f(explicit)g(com)n(binatorial)g(description)g(of)g(the)h(irreducible)f
(comp)r(o-)599 1090 y(nen)n(ts)c(of)f(the)h(singular)f(lo)r(cus)g(of)g
(a)g(Sc)n(h)n(ub)r(ert)i(v)l(ariet)n(y)f Ft(X)2129 1098
y Fs(w)2199 1090 y Fv(for)e(an)i(elemen)n(t)f Ft(w)h
Fr(2)f Fq(S)2851 1098 y Fs(n)2893 1090 y Fv(.)30 b(With)21
b(our)f(description,)599 1173 y(the)k(computation)h(of)e(these)i(comp)r
(onen)n(ts)g(b)r(ecomes)f(computationally)g(e\016cien)n(t)h(\()p
Ft(O)r Fv(\()p Ft(n)3000 1150 y Fp(6)3034 1173 y Fv(\)\).)32
b(The)24 b(k)n(ey)h(to)f(our)599 1256 y(result)h(is)h(a)g(map)e
Ft(\036)1132 1264 y Fs(t)1183 1256 y Fv(:)f Fr(R)p Fv(\()p
Ft(y)r(;)13 b(w)r Fv(\))23 b Fr(\000)-12 b(!)22 b(R)p
Fv(\()p Ft(x;)12 b(w)r Fv(\))26 b(where)g Ft(x)d(<)g(y)i
Fv(=)e Ft(xt)g Fr(\024)h Ft(w)r Fv(,)h Ft(t)h Fv(is)f(a)h
(re\015ection,)h(and)f Fr(R)p Fv(\()p Ft(x;)12 b(w)r
Fv(\))26 b(is)599 1339 y(the)i(set)g(of)f(re\015ections)i
Ft(t)1285 1316 y Fo(0)1335 1339 y Fv(suc)n(h)f(that)g
Ft(x)e(<)g(xt)1866 1316 y Fo(0)1914 1339 y Fr(\024)g
Ft(w)r Fv(.)42 b(Our)26 b(result)i(dep)r(ends)g(on)g(a)g(c)n
(haracterization)h(of)e(the)599 1422 y(singular)21 b(p)r(oin)n(ts)h(of)
f Ft(X)1210 1430 y Fs(w)1282 1422 y Fv(in)g(terms)f(of)h(the)i
(cardinalit)n(y)f(of)f Fr(R)p Fv(\()p Ft(x;)12 b(w)r
Fv(\))21 b(due)h(to)g(Lakshmibai)f(and)h(Seshadri,)g([10].)1765
1929 y Fw(1.)41 b Fn(Intr)n(oduction)400 2078 y Fw(Starting)28
b(with)h(Chev)-5 b(alley)28 b(in)h(the)g(1950's)e([4],)i(Sc)n(h)n(ub)r
(ert)f(v)-5 b(arieties)28 b(in)h Fx(G=B)k Fw(and)c(their)f(singular)g
(lo)r(ci)g(ha)n(v)n(e)300 2178 y(b)r(een)41 b(carefully)g(studied.)78
b(Because)40 b(a)g(Sc)n(h)n(ub)r(ert)h(v)-5 b(ariet)n(y)40
b(is)h(the)h(closure)e(of)h(a)f Fx(B)t Fw(-orbit,)k(the)e(irreducible)
300 2278 y(comp)r(onen)n(ts)33 b(of)h(the)g(singular)e(lo)r(cus)i(are)f
(themselv)n(es)g(Sc)n(h)n(ub)r(ert)g(v)-5 b(arieties.)55
b(W)-7 b(e)34 b(denote)g(the)g(p)r(erm)n(utations)300
2377 y(indexing)27 b(these)h(comp)r(onen)n(ts)f(b)n(y)g(maxsing)q(\()p
Fx(X)1820 2389 y Fm(w)1873 2377 y Fw(\))h(\(see)g(De\014nition)g(1\).)
400 2477 y(There)k(are)h(man)n(y)g(b)r(eautiful)h(com)n(binatorial)d
(criteria)h(for)h(determining)h(smo)r(othness)e(at)h(a)g(p)r(oin)n(t)h
(in)f Fx(X)3823 2489 y Fm(w)3877 2477 y Fw(.)300 2576
y(These)j(criteria)g(can)g(b)r(e)h(used)f(to)g(\014nd)h(the)g(elemen)n
(ts)g(of)f(maxsing\()p Fx(X)2615 2588 y Fm(w)2669 2576
y Fw(\))h(b)n(y)f(searc)n(hing)f(do)n(wn)h(through)g(the)300
2676 y(Bruhat)31 b(p)r(oset)h(for)f(the)h(largest)e(singular)h(elemen)n
(ts)g(\(see)h([1])f(for)h(bac)n(kground\).)47 b(This)32
b(metho)r(d)g(is)g(computa-)300 2776 y(tionally)22 b(prohibitiv)n(e)g
(in)h(general)e(b)r(ecause)i(the)g(size)f(of)h(the)g(corresp)r(onding)d
(W)-7 b(eyl)23 b(groups)e(are)h(so)g(large.)34 b(In)23
b(this)300 2875 y(pap)r(er,)h(w)n(e)f(giv)n(e)g(the)h(\014rst)g
(explicit)f(construction)g(of)h(the)g(irreducible)f(comp)r(onen)n(ts)g
(for)g(an)h(arbitrary)d(Sc)n(h)n(ub)r(ert)300 2975 y(v)-5
b(ariet)n(y)27 b(in)h Fx(S)5 b(L)p Fw(\()p Fx(n)p Fw(\))p
Fx(=B)t Fw(.)36 b(This)27 b(algorithm)g(is)g(v)n(ery)g(e\016cien)n(t,)g
Fx(O)r Fw(\()p Fx(n)2377 2945 y Fl(6)2415 2975 y Fw(\).)2470
2943 y Fl(1)400 3075 y Fw(In)c(1990,)f(Lakshmibai)h(and)g(Sandh)n(y)n
(a)f([9)o(])i(sho)n(w)n(ed)e(that)h(the)h(Sc)n(h)n(ub)r(ert)f(v)-5
b(ariet)n(y)22 b Fx(X)3032 3087 y Fm(w)3109 3075 y Fk(\032)h
Fx(S)5 b(L)p Fw(\()p Fx(n)p Fw(\))p Fx(=B)26 b Fw(is)d(smo)r(oth)300
3174 y(at)33 b(ev)n(ery)e(p)r(oin)n(t)j(if)f(and)g(only)f(if)i(the)f(p)
r(erm)n(utation)g(matrix)f(for)g Fx(w)k Fw(do)r(es)d(not)g(con)n(tain)f
(an)n(y)g(4)22 b Fk(\002)f Fw(4)33 b(submatrix)300 3274
y(equal)21 b(to)h(3412)e(or)h(4231.)33 b(W)-7 b(e)23
b(use)e(these)h(t)n(w)n(o)g(p)r(erm)n(utation)f(patterns)h(to)f(pro)r
(duce)h(the)g(maximal)g(p)r(erm)n(utations)300 3373 y(b)r(elo)n(w)30
b Fx(w)k Fw(that)d(corresp)r(ond)e(to)i(p)r(oin)n(ts)g(in)g(the)g
(singular)f(lo)r(cus.)46 b(This)31 b(v)n(eri\014es)f(the)h(conjecture)f
(stated)h(in)g([9].)300 3473 y(\(Gasharo)n(v,)f(using)h(a)g(map)g
(similar)g(to)g(the)g(one)g(w)n(e)g(in)n(tro)r(duce)g(in)g(Section)h
(5,)f(sho)n(ws)g(in)g([7])g(that)h(the)f(p)r(oin)n(ts)300
3573 y(constructed)c(in)h([9])f(are)g(singular.)35 b(His)28
b(result)g(pro)n(v)n(es)d(one)i(direction)h(of)f(this)h(conjecture.\))
400 3672 y(Our)i(pro)r(of)h(starts)g(from)g(an)g(arbitrary)e(maximal)i
(singular)f Fx(T)12 b Fw(-\014xed)30 b(p)r(oin)n(t)i
Fx(e)2920 3684 y Fm(x)2993 3672 y Fw(in)f Fx(X)3162 3684
y Fm(w)3247 3672 y Fw(and)g(sho)n(ws)g(that)g Fx(w)300
3772 y Fw(m)n(ust)26 b(con)n(tain)e(a)i(4231)d(or)i(3412)f(pattern)h
(and)g Fx(x)h Fw(m)n(ust)g(con)n(tain)f(a)g(2143)f(or)g(1324)g(pattern)
h(\(resp)r(ectiv)n(ely\).)36 b(The)300 3872 y(pro)r(of)27
b(is)g(based)h(on)506 4010 y Fk(\017)41 b Fw(the)25 b
(Lakshmibai-Seshadri)e(basis)h(for)g(the)h(tangen)n(t)f(space)g(of)h
Fx(X)2650 4022 y Fm(w)2728 4010 y Fw(at)g Fx(e)2866 4022
y Fm(x)2932 4010 y Fw([10)o(])g(indexed)g(b)n(y)f(the)i(Bruhat)589
4110 y(graph,)506 4210 y Fk(\017)41 b Fw(a)27 b(set)h(of)f(injectiv)n
(e)h(maps)f(whic)n(h)h(imply)g(Deo)r(dhar's)e(inequalit)n(y)i([5)o(],)g
(and)506 4309 y Fk(\017)41 b Fw(a)27 b(t)n(w)n(o)g(dimensional)g(v)n
(ersion)f(of)h(the)h(tableaux)f(criterion)g(for)g(Bruhat)g(order)f(on)i
(p)r(erm)n(utations.)300 4448 y(In)23 b(t)n(yp)r(e)h
Fx(A)p Fw(,)g(smo)r(othness)e(is)i(equiv)-5 b(alen)n(t)22
b(to)h(rational)f(smo)r(othness)h(\([5)o(],)i([3)o(]\))f(so)e(the)i
(maximal)e(singular)g(lo)r(cus)h(of)300 4547 y Fx(X)369
4559 y Fm(w)447 4547 y Fw(also)h(determines)h(the)g(maximal)f(p)r(erm)n
(utations)g Fx(x)g Fk(\024)e Fx(w)28 b Fw(for)c(whic)n(h)h(the)g
(corresp)r(onding)e(Kazhdan-Lusztig)300 4647 y(p)r(olynomial)29
b(is)g(di\013eren)n(t)h(from)f(1.)42 b(W)-7 b(e)29 b(use)h(the)g
(explicit)f(form)g(of)h(maxsing\()p Fx(X)2875 4659 y
Fm(w)2929 4647 y Fw(\))f(to)h(compute)f(all)g(Kazhdan-)300
4747 y(Lusztig)c(p)r(olynomials)g(at)g(maximal)g(singular)f(p)r(oin)n
(ts;)i(they)g(are)f(either)g(1)14 b(+)g Fx(q)j Fw(+)d
Fk(\001)g(\001)g(\001)g Fw(+)g Fx(q)3122 4717 y Fm(k)3188
4747 y Fw(or)25 b(1)13 b(+)h Fx(q)3462 4717 y Fm(k)3529
4747 y Fw(dep)r(ending)300 4846 y(on)27 b(whether)h(the)g(corresp)r
(onding)d(bad)j(pattern)f(is)h(4231)d(or)i(3412)f(\(resp)r(ectiv)n
(ely\).)p 300 5018 499 4 v 400 5112 a Fv(W)-6 b(ork)24
b(supp)r(orted)g(b)n(y)h(NSF)e(gran)n(t)h(DMS-9983797.)400
5174 y Fl(1)433 5200 y Fv(While)35 b(in)g(the)h(pro)r(cess)g(of)f
(preparing)g(this)g(submission,)h(the)g(authors)g(ha)n(v)n(e)g(learned)
g(that)g(Maniv)n(el)g([11])e(has)i(recen)n(tly)300 5283
y(indep)r(enden)n(tly)26 b(pro)n(v)n(ed)e(a)g(theorem)f(equiv)l(alen)n
(t)j(to)e(Theorem)f(1.)2083 5382 y Fl(1)p eop
%%Page: 2 2
2 1 bop 0 66 a Fl(2)943 b(SARA)22 b(C.)h(BILLEY)f(AND)h(GREGOR)-5
b(Y)22 b(S.)g(W)-7 b(ARRINGTON)100 266 y Fw(It)27 b(turns)g(out)g(that)
h(elemen)n(ts)f(of)g(maxsing\()p Fx(X)1566 278 y Fm(w)1620
266 y Fw(\))g(are)g(obtained)f(b)n(y)h(acting)g(on)g
Fx(w)j Fw(b)n(y)d(certain)f(cycles.)36 b(These)0 365
y(cycles,)23 b(describ)r(ed)e(in)i(the)f(follo)n(wing)f(theorem,)i(are)
e(b)r(est)i(absorb)r(ed)d(graphically)h(in)h(terms)g(of)g(the)g(p)r
(erm)n(utation)0 465 y(matrices)27 b(mat\()p Fx(x)p Fw(\))h(and)g
(mat\()p Fx(w)r Fw(\).)38 b(Examples)27 b(are)f(sho)n(wn)h(in)h
(Figures)f(1)g(and)g(2.)100 565 y(W)-7 b(e)28 b(no)n(w)f(giv)n(e)f(a)h
(precise)g(de\014nition)h(of)g(maxsing\()p Fx(X)1792
577 y Fm(w)1846 565 y Fw(\))g(and)f(state)g(our)g(main)h(theorem.)0
714 y Fy(De\014nition)36 b(1.)43 b Fw(Let)32 b(maxsing\()p
Fx(X)1122 726 y Fm(w)1176 714 y Fw(\))g(b)r(e)h(the)f(maximal)f(elemen)
n(ts)h(\(under)g(the)h(Bruhat-Chev)-5 b(alley)30 b(order\))h(of)0
814 y(the)d(set)g Fk(f)p Fx(x)23 b Fk(\024)f Fx(w)k Fw(:)d
Fx(x)28 b Fw(is)g(a)f(singular)f(p)r(oin)n(t)i(of)g Fx(X)1526
826 y Fm(w)1579 814 y Fk(g)p Fw(.)0 963 y Fy(Theorem)i(1.)41
b Fx(X)590 975 y Fm(x)661 963 y Fj(is)31 b(an)e(irr)l(e)l(ducible)j(c)l
(omp)l(onent)d(of)i(the)f(singular)g(lo)l(cus)g(of)g
Fx(X)2611 975 y Fm(w)2695 963 y Fj(if)g(and)g(only)h(if)1226
1098 y Fx(x)24 b Fw(=)f Fx(w)e Fk(\016)d Fw(\()p Fx(\013)1610
1110 y Fl(1)1647 1098 y Fx(;)c(:)g(:)g(:)g(;)g(\013)1885
1110 y Fm(m)1948 1098 y Fx(;)g(\014)2032 1110 y Fm(k)2073
1098 y Fx(;)g(:)g(:)g(:)f(;)h(\014)2304 1110 y Fl(1)2341
1098 y Fw(\))0 1232 y Fj(for)31 b(disjoint)g(se)l(quenc)l(es)761
1367 y Fw(1)23 b Fk(\024)f Fx(\013)966 1379 y Fl(1)1027
1367 y Fx(<)g Fk(\001)14 b(\001)g(\001)23 b Fx(<)g(\013)1375
1379 y Fm(m)1461 1367 y Fk(\024)g Fx(n)p Fj(,)30 b(with)g
Fx(w)r Fw(\()p Fx(\013)1980 1379 y Fl(1)2018 1367 y Fw(\))24
b Fx(>)e Fk(\001)14 b(\001)g(\001)23 b Fx(>)g(w)r Fw(\()p
Fx(\013)2515 1379 y Fm(m)2579 1367 y Fw(\))p Fx(;)44
b Fj(and)761 1496 y Fw(1)23 b Fk(\024)f Fx(\014)960 1508
y Fl(1)1020 1496 y Fx(<)h Fk(\001)14 b(\001)g(\001)23
b Fx(<)g(\014)1363 1508 y Fm(k)1426 1496 y Fk(\024)g
Fx(n)p Fj(,)30 b(with)g Fx(w)r Fw(\()p Fx(\014)1939 1508
y Fl(1)1978 1496 y Fw(\))23 b Fx(>)g Fk(\001)14 b(\001)g(\001)22
b Fx(>)h(w)r Fw(\()p Fx(\014)2468 1508 y Fm(k)2510 1496
y Fw(\))p Fx(;)0 1631 y Fj(the)32 b(interiors)h(of)g(the)g(shade)l(d)h
(r)l(e)l(gions)e(in)h(Figur)l(es)f(1)h(and)g(2)f(do)h(c)l(ontain)g(any)
f(other)h(1's)g(in)g(the)f(p)l(ermutation)0 1731 y(matrix)e(of)g
Fx(w)r Fj(,)h(and)f(one)g(of)h(the)f(fol)t(lowing)i(c)l(ases)e(holds:)
141 1848 y Fw(\(1\))42 b Fj(4231)31 b(Case:)1551 1983
y Fx(k)s(;)14 b(m)22 b Fk(\025)h Fw(2)29 b Fj(and)1033
2108 y Fx(\013)1086 2120 y Fl(1)1147 2108 y Fx(<)22 b(\014)1281
2120 y Fl(1)1318 2108 y Fx(;)14 b(:)g(:)g(:)g(;)g(\014)1550
2120 y Fm(k)q Fi(\000)p Fl(1)1699 2108 y Fx(<)22 b(\013)1839
2120 y Fl(2)1877 2108 y Fx(;)14 b(:)g(:)g(:)f(;)h(\013)2114
2120 y Fm(m)2200 2108 y Fx(<)23 b(\014)2335 2120 y Fm(k)2406
2108 y Fj(and)1507 2237 y Fx(w)r Fw(\()p Fx(\013)1653
2249 y Fm(m)1717 2237 y Fw(\))g Fx(>)g(w)r Fw(\()p Fx(\014)2000
2249 y Fl(1)2038 2237 y Fw(\))p Fx(:)141 2471 y Fw(\(2\))42
b Fj(3412)31 b(Case:)1551 2606 y Fx(k)s(;)14 b(m)22 b
Fk(\025)h Fw(2)29 b Fj(and)1044 2731 y Fx(\014)1091 2743
y Fl(1)1128 2731 y Fx(;)14 b(:)g(:)g(:)g(;)g(\014)1360
2743 y Fm(k)q Fi(\000)p Fl(1)1509 2731 y Fx(<)22 b(\013)1649
2743 y Fl(1)1710 2731 y Fx(<)g(\014)1844 2743 y Fm(k)1908
2731 y Fx(<)h(\013)2049 2743 y Fl(2)2086 2731 y Fx(;)14
b(:)g(:)g(:)g(;)g(\013)2324 2743 y Fm(k)2394 2731 y Fj(and)1127
2860 y Fx(w)r Fw(\()p Fx(\013)1273 2872 y Fm(m)p Fi(\000)p
Fl(1)1422 2860 y Fw(\))24 b Fx(>)e(w)r Fw(\()p Fx(\014)1705
2872 y Fl(1)1743 2860 y Fw(\))i Fx(>)e(w)r Fw(\()p Fx(\013)2032
2872 y Fm(m)2096 2860 y Fw(\))i Fx(>)e(w)r Fw(\()p Fx(\014)2379
2872 y Fl(2)2418 2860 y Fw(\))p Fx(:)141 3095 y Fw(\(3\))42
b Fj(45312)32 b(Case:)1514 3229 y Fx(k)26 b Fw(=)c Fx(m)h
Fw(=)g(2)29 b Fj(and)1364 3354 y Fx(\014)1411 3366 y
Fl(1)1471 3354 y Fx(<)23 b(\013)1612 3366 y Fl(1)1672
3354 y Fx(<)g(\014)1807 3366 y Fl(2)1867 3354 y Fx(<)g(\013)2008
3366 y Fl(2)2075 3354 y Fj(and)1111 3484 y Fx(w)r Fw(\()p
Fx(\013)1257 3496 y Fl(1)1296 3484 y Fw(\))g Fx(>)g(w)r
Fw(\()p Fx(\014)1579 3496 y Fl(1)1617 3484 y Fw(\))g
Fx(>)g(w)r Fw(\()p Fx(\013)1906 3496 y Fl(2)1944 3484
y Fw(\))h Fx(>)e(w)r Fw(\()p Fx(\014)2227 3496 y Fl(2)2265
3484 y Fw(\))30 b Fj(and)584 3613 y(entries)g(of)h Fw(mat\()p
Fx(w)r Fw(\))g Fj(in)f(r)l(e)l(gion)g(A)f(of)i(Figur)l(e)f(2.2)h(ar)l
(e)f(in)g(de)l(cr)l(e)l(asing)g(or)l(der)q Fx(:)1320
4875 y
 currentpoint currentpoint translate .4 .4 scale neg exch neg exch
translate
 1320 4875 a @beginspecial 0 @llx 0 @lly 288 @urx
288 @ury 2880 @rwi @setspecial
%%BeginDocument: mainthm1.eps
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%Title: Image mainthm1
%%BoundingBox: 0 0 288 288
%%EndComments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% BEGIN COMMANDS

% arc's correspond to reflections we are interested in
% light shaded rectangle indicates dxw >= 1 there
% dark shaded rectangle indicates dxw >= 2 there
% gray circles indicate position of elts of x
clear

/inch {36 mul} def		% for sizing
/ooinch {1 36 div mul} def	% for sizing
/xdef {exch def} def		% reverse of def
/lo .85 def			% dxw >= 1 regions
/lt .55 def			% dxw >= 2 regions
/dk .15 def			% for other purposes
/ptgr .5 def			% gray level for pts
/ptrad 5 def			% radius of pts
/ztild 0.05 def			% generic inset
/zlw 2 def			% generic line with for outlbox
/laboff 0.25 def		% offset for markrows labels
/xoff 0 def			% offset for region labels
/yoff 7.5 def			% offset for region labels
/fsize 18 def			% fontsize

/settime {/Times-Italic findfont 24 scalefont setfont} def
/setsmtime {/Times-Italic findfont 14 scalefont setfont} def
/setsymb {/Symbol findfont 20 scalefont setfont} def
/getchar {st ind 1 getinterval /cur xdef ind 1 add /ind xdef} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% labels 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% since sometimes we need to change fonts in the middle,
% we need to calculate string width one character at a time
% stack: st - string
% returns width
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/getstrwid {
  gsave
  /st xdef 
  st length /len xdef
  /ind 0 def
  /mywid 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) eq 
	    {getchar cur setsymb
    	     stringwidth pop mywid add /mywid xdef}
	    {cur (') eq {} {cur settime
	     stringwidth pop mywid add /mywid xdef} ifelse
	    } ifelse 1 pop} loop
  grestore
  mywid
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print characters in string in either greek or roman
% assumes currentpoint is correct
% stack: st - string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/showlab {
  gsave
  /st xdef 
  st length /len xdef
  settime
%  st stringwidth pop /mywid xdef
  st getstrwid /mywid xdef
  -1 mywid mul 0 rmoveto
  /ind 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop
%	ifelse
%        cur (;) eq {getchar cur setsymb}
%                   {cur (_) eq 
%		     {getchar cur gsave setsmtime 0 .1 inch rmoveto} 

%cur settime} ifelse show} loop
%        cur (;) eq {getchar cur setsymb}
%                   {cur settime} ifelse show} loop
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% label rows along left side
% stack: array with labels and y coord.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/markrows {
  dup length 2 idiv /num xdef	% num of points we have to print
  gsave
   aload pop % place elts of array on stack
   /tyv xdef % read off y coord.
   num {laboff inch tyv abs inch yoff add moveto % set position
        gsave
	    1 -1 scale	% print string rightside up
	    showlab	% print some chars in greek if necessary
	grestore
	count 1 ge {/tyv xdef} if	
       } repeat 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for printing a label inside a region
% stack: x,y
%	 string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/namereg {
  gsave
    /ty xdef
    /tx xdef
    /st xdef
    st length /len xdef
    settime
    st getstrwid /mywid xdef
%    st stringwidth pop /mywid xdef % get width of string
    tx inch mywid 2 div sub xoff sub ty inch yoff add moveto
    /ind 0 def
    gsave
	1 -1 scale % print rightside up
       { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop


%        cur (;) eq {getchar cur setsymb}
%              {cur settime} ifelse show} loop

%	st	   % put string on stack
%	settime    % make sure we're using non-greek font
%	show
    grestore 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arrows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for putting vertical arrows in diagram.
% currently only point down
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/arrow {
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     vx inch vy 1 sub inch translate
     newpath
     2 setlinewidth
     0 0 moveto
     0 1 inch lineto
     0 1 inch translate
     -.2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     .2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     stroke
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print filled circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circ {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ellipses for points
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/smcircs {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     0 setgray
     newpath
     vx .25 add inch vy .25 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .5 add inch vy .5 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .75 add inch vy .75 sub inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print outline of circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circoutline {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
   grestore
} def                                                                      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print circle with dot in the center
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/capitol {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
     newpath
     vx inch vy inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print square
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/squ {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
  false vx triamt sub 
        vy triamt add 
	vx triamt add 
	vy triamt sub 0 2 [] outlbox
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print diamond
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/diam {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
   gsave
     vx inch vy inch translate
     45 rotate
    false 0 0 triamt 2 mul triamt 2 mul 0 2 [] outlbox
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print triangle
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/trian {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul def
   gsave
     vx inch vy inch translate
     newpath
     1 setlinejoin
     2 setlinewidth
     -1 triamt mul 2 div inch triamt 2.2 div inch moveto
     triamt 2 div inch triamt -.86 mul inch rlineto
     triamt 2 div inch triamt .86 mul inch rlineto
     closepath
     stroke
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print out points where desired
% stack: array of x,y coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points of x
% filled circles
/genpts {
  dup length 2 idiv /num xdef	% num of points we have to print
  aload pop   			% put all the points on the stack
  num {ptpr} repeat % display all of them
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/box {
  /byt xdef
  /bxt xdef
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/outlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty txt tyt box
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt swinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mmty xdef
  obin sub /mmtx xdef  
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt swtinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt neinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mmty xdef
  obin add /mmtx xdef  
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt netinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws un-bordered box starting at NW corner
%stack: SE x,y
% 	NW x,y
% 	gray level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/grect {
  /uyt xdef
  /uxt xdef
  /uy xdef
  /ux xdef  
  /gr xdef
  gsave
    ux uy uxt uyt box
    gsave
      gr setgray
      fill
    grestore
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% interpolate for various types of arc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/uparc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 4 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 4 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

/dnarc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 1 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 1 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generic arc routine
% stack: up boolean
%	 dash pattern
%	 SE x,y
%        NW x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/genarc {
  /arcda xdef	% dash style
  /arcup xdef	% go up?
  /y3 xdef  /x3 xdef  /y0 xdef  /x0 xdef
  arcup true eq {x0 y0 x3 y3 uparc} {x0 y0 x3 y3 dnarc} ifelse
  gsave
    newpath
    x0 inch y0 inch moveto
    arcda 0 setdash
    x1 inch y1 inch x2 inch y2 inch x3 inch y3 inch curveto 
    stroke
  grestore   
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% points of x - filled gray circles
/xpts {/ptpr {ptrad ptgr circ} def genpts} def 

% points of w - outlined circles
/wpts {/ptpr {ptrad ptgr circoutline} def genpts} def 

% points of x & w - dotted/outlined circles
/xwpts {/ptpr {ptrad ptgr capitol} def genpts} def 

% other points - square
/otherpts {/ptpr {ptrad ptgr squ} def genpts} def 

% other points - diamonds
/diampts {/ptpr {ptrad ptgr diam} def genpts} def 

% other points - triangles
/trianpts {/ptpr {ptrad ptgr trian} def genpts} def 

% ellipses
/smpts {/ptpr {ptrad ptgr smcircs} def genpts} def 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arc that is in rxw
/rxwarc {true [] genarc} def

% arc that is in ryw
/rywarc {true [10 10] genarc} def  

% arc t such that y = xt
/xtarc {false [3 3] genarc} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for identifying a region
/identreg {ztild 1 [2 2] outlbox} def

% for identifying a region
/swidentreg {ztild 1 [2 2] swinlbox} def

% for identifying a region
/stireg {ztild 1 [2 2] swtinlbox} def

% for identifying a region
/neidentreg {ztild 1 [2 2] neinlbox} def

% for identifying a region
/ntireg {ztild 1 [2 2] netinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for marking a region as attaining minimal value of dxw
/minreg {ztild 2 [] outlbox} def

% for identifying a region
/swminreg {ztild 2 [] swinlbox} def

% for identifying a region
/neminreg {ztild 2 [] neinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% draws a filled gray rectangle of specified gray level
% also puts xpts at NW and SE
/ptsgrect {
  /tyt xdef  /txt xdef  /ty xdef  /tx xdef
  tx ty txt tyt grect
  [tx ty txt tyt] xpts
} def

% END COMMANDS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% dfn of phi
gsave
1 inch 8 inch translate
1 -1 scale
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mainthm
gsave
lo 3.5 .5 6.5 5 ptsgrect
lo 3 1.5 6 6 ptsgrect
lo 1.5 2.5 5.5 7.5 ptsgrect
lo .5 4 5.5 7.5 ptsgrect
[6.5 0.5 3.5 1.5 3 2.5 1.5 4 6 5 5.5 6 0.5 7.5] wpts
[(;a_1) .5 (;b_1) 1.5 (;b_2) 2.5 (;b_3) 4 (;a_2) 5] markrows
[(;a_3) 6 (;b_4) 7.5] markrows
grestore
grestore


%%EndDocument
 @endspecial 1320 4875 a
 currentpoint currentpoint translate 1 .4 div 1 .4 div scale neg exch
neg exch translate
 1320 4875 a 299 5045 a Fn(Figure)j(1.)41
b Fw(Example)28 b(of)h(Case)f(1)g(of)h(Theorem)f(1.)40
b Fk(\016)p Fw('s)28 b(denote)h(1's)f(in)h(mat\()p Fx(w)r
Fw(\),)h Fk(\017)p Fw('s)e(denote)299 5145 y(1's)f(in)h(mat\()p
Fx(x)p Fw(\).)p eop
%%Page: 3 3
3 2 bop 997 66 a Fl(MAXIMAL)28 b(SINGULAR)i(LOCI)f(OF)g(SCHUBER)-5
b(T)29 b(V)-7 b(ARIETIES)29 b(IN)g Fm(S)s(L)p Fl(\()p
Fm(n)p Fl(\))p Fm(=B)666 b Fl(3)900 1160 y
 currentpoint currentpoint translate .4 .4 scale neg exch neg exch
translate
 900 1160 a
@beginspecial 0 @llx 0 @lly 720 @urx 288 @ury 7200 @rwi
@setspecial
%%BeginDocument: mainthm2.eps
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%Title: Image mainthm2
%%BoundingBox: 0 0 720 288
%%EndComments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% BEGIN COMMANDS

% arc's correspond to reflections we are interested in
% light shaded rectangle indicates dxw >= 1 there
% dark shaded rectangle indicates dxw >= 2 there
% gray circles indicate position of elts of x
clear

/inch {36 mul} def		% for sizing
/ooinch {1 36 div mul} def	% for sizing
/xdef {exch def} def		% reverse of def
/lo .85 def			% dxw >= 1 regions
/lt .55 def			% dxw >= 2 regions
/dk .15 def			% for other purposes
/ptgr .5 def			% gray level for pts
/ptrad 5 def			% radius of pts
/ztild 0.05 def			% generic inset
/zlw 2 def			% generic line with for outlbox
/laboff 0.25 def		% offset for markrows labels
/xoff 0 def			% offset for region labels
/yoff 7.5 def			% offset for region labels
/fsize 18 def			% fontsize

/settime {/Times-Italic findfont 24 scalefont setfont} def
/setsmtime {/Times-Italic findfont 14 scalefont setfont} def
/setsymb {/Symbol findfont 20 scalefont setfont} def
/getchar {st ind 1 getinterval /cur xdef ind 1 add /ind xdef} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% labels 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% since sometimes we need to change fonts in the middle,
% we need to calculate string width one character at a time
% stack: st - string
% returns width
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/getstrwid {
  gsave
  /st xdef 
  st length /len xdef
  /ind 0 def
  /mywid 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) eq 
	    {getchar cur setsymb
    	     stringwidth pop mywid add /mywid xdef}
	    {cur (') eq {} {cur settime
	     stringwidth pop mywid add /mywid xdef} ifelse
	    } ifelse 1 pop} loop
  grestore
  mywid
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print characters in string in either greek or roman
% assumes currentpoint is correct
% stack: st - string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/showlab {
  gsave
  /st xdef 
  st length /len xdef
  settime
%  st stringwidth pop /mywid xdef
  st getstrwid /mywid xdef
  -1 mywid mul 0 rmoveto
  /ind 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop
%	ifelse
%        cur (;) eq {getchar cur setsymb}
%                   {cur (_) eq 
%		     {getchar cur gsave setsmtime 0 .1 inch rmoveto} 

%cur settime} ifelse show} loop
%        cur (;) eq {getchar cur setsymb}
%                   {cur settime} ifelse show} loop
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% label rows along left side
% stack: array with labels and y coord.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/markrows {
  dup length 2 idiv /num xdef	% num of points we have to print
  gsave
   aload pop % place elts of array on stack
   /tyv xdef % read off y coord.
   num {laboff inch tyv abs inch yoff add moveto % set position
        gsave
	    1 -1 scale	% print string rightside up
	    showlab	% print some chars in greek if necessary
	grestore
	count 1 ge {/tyv xdef} if	
       } repeat 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for printing a label inside a region
% stack: x,y
%	 string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/namereg {
  gsave
    /ty xdef
    /tx xdef
    /st xdef
    st length /len xdef
    settime
    st getstrwid /mywid xdef
%    st stringwidth pop /mywid xdef % get width of string
    tx inch mywid 2 div sub xoff sub ty inch yoff add moveto
    /ind 0 def
    gsave
	1 -1 scale % print rightside up
       { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop


%        cur (;) eq {getchar cur setsymb}
%              {cur settime} ifelse show} loop

%	st	   % put string on stack
%	settime    % make sure we're using non-greek font
%	show
    grestore 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arrows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for putting vertical arrows in diagram.
% currently only point down
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/arrow {
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     vx inch vy 1 sub inch translate
     newpath
     2 setlinewidth
     0 0 moveto
     0 1 inch lineto
     0 1 inch translate
     -.2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     .2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     stroke
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print filled circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circ {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ellipses for points
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/smcircs {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     0 setgray
     newpath
     vx .25 add inch vy .25 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .5 add inch vy .5 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .75 add inch vy .75 sub inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print outline of circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circoutline {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
   grestore
} def                                                                      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print circle with dot in the center
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/capitol {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
     newpath
     vx inch vy inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print square
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/squ {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
  false vx triamt sub 
        vy triamt add 
	vx triamt add 
	vy triamt sub 0 2 [] outlbox
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print diamond
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/diam {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
   gsave
     vx inch vy inch translate
     45 rotate
    false 0 0 triamt 2 mul triamt 2 mul 0 2 [] outlbox
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print triangle
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/trian {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul def
   gsave
     vx inch vy inch translate
     newpath
     1 setlinejoin
     2 setlinewidth
     -1 triamt mul 2 div inch triamt 2.2 div inch moveto
     triamt 2 div inch triamt -.86 mul inch rlineto
     triamt 2 div inch triamt .86 mul inch rlineto
     closepath
     stroke
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print out points where desired
% stack: array of x,y coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points of x
% filled circles
/genpts {
  dup length 2 idiv /num xdef	% num of points we have to print
  aload pop   			% put all the points on the stack
  num {ptpr} repeat % display all of them
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/box {
  /byt xdef
  /bxt xdef
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/outlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty txt tyt box
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt swinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mmty xdef
  obin sub /mmtx xdef  
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt swtinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt neinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mmty xdef
  obin add /mmtx xdef  
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt netinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws un-bordered box starting at NW corner
%stack: SE x,y
% 	NW x,y
% 	gray level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/grect {
  /uyt xdef
  /uxt xdef
  /uy xdef
  /ux xdef  
  /gr xdef
  gsave
    ux uy uxt uyt box
    gsave
      gr setgray
      fill
    grestore
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% interpolate for various types of arc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/uparc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 4 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 4 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

/dnarc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 1 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 1 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generic arc routine
% stack: up boolean
%	 dash pattern
%	 SE x,y
%        NW x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/genarc {
  /arcda xdef	% dash style
  /arcup xdef	% go up?
  /y3 xdef  /x3 xdef  /y0 xdef  /x0 xdef
  arcup true eq {x0 y0 x3 y3 uparc} {x0 y0 x3 y3 dnarc} ifelse
  gsave
    newpath
    x0 inch y0 inch moveto
    arcda 0 setdash
    x1 inch y1 inch x2 inch y2 inch x3 inch y3 inch curveto 
    stroke
  grestore   
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% points of x - filled gray circles
/xpts {/ptpr {ptrad ptgr circ} def genpts} def 

% points of w - outlined circles
/wpts {/ptpr {ptrad ptgr circoutline} def genpts} def 

% points of x & w - dotted/outlined circles
/xwpts {/ptpr {ptrad ptgr capitol} def genpts} def 

% other points - square
/otherpts {/ptpr {ptrad ptgr squ} def genpts} def 

% other points - diamonds
/diampts {/ptpr {ptrad ptgr diam} def genpts} def 

% other points - triangles
/trianpts {/ptpr {ptrad ptgr trian} def genpts} def 

% ellipses
/smpts {/ptpr {ptrad ptgr smcircs} def genpts} def 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arc that is in rxw
/rxwarc {true [] genarc} def

% arc that is in ryw
/rywarc {true [10 10] genarc} def  

% arc t such that y = xt
/xtarc {false [3 3] genarc} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for identifying a region
/identreg {ztild 1 [2 2] outlbox} def

% for identifying a region
/swidentreg {ztild 1 [2 2] swinlbox} def

% for identifying a region
/stireg {ztild 1 [2 2] swtinlbox} def

% for identifying a region
/neidentreg {ztild 1 [2 2] neinlbox} def

% for identifying a region
/ntireg {ztild 1 [2 2] netinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for marking a region as attaining minimal value of dxw
/minreg {ztild 2 [] outlbox} def

% for identifying a region
/swminreg {ztild 2 [] swinlbox} def

% for identifying a region
/neminreg {ztild 2 [] neinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% draws a filled gray rectangle of specified gray level
% also puts xpts at NW and SE
/ptsgrect {
  /tyt xdef  /txt xdef  /ty xdef  /tx xdef
  tx ty txt tyt grect
  [tx ty txt tyt] xpts
} def

% END COMMANDS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1 inch 8 inch translate
1 -1 scale
gsave
lo 2.5 .5 4.5 4.5 grect
lo 1.5 1 2.5 4.5 grect 
lo 1 2 1.5 4.5 grect
lo .5 2 1 4.5 grect
lo 4.5 2.5 7.5 5.5 grect
lo 3.5 4.5 6.5 6.5 grect
% (A) true 3.5 2.5 4.5 4.5 identreg
[2.5 .5 1.5 1 .5 2 4.5 2.5 3.5 4.5 7.5 5.5 6.5 6.5] xpts
[4.5 .5 2.5 1 1.5 2 7.5 2.5 .5 4.5 6.5 5.5 3.5 6.5] wpts
[(;b_1) .5 (;b_2) 1 (;b_3) 2 (;a_1) 2.5 (;b_4) 4.5 (;a_2) 5.5 (;a_3) 6.5] markrows
((1)) 3.75 8 namereg
grestore
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
11 inch 0 inch translate
%
gsave
lo .5 .5 4.5 1.5 grect
lo .5 1.5 2 5 grect
lo 4.5 1.5 6.5 6.5 grect
lo 2 5 6.5 6.5 grect
%lo .5 .5 4.5 5 grect
%lo 4.5 1.5 6.5 6.5 grect
%lo 2 5 6.5 6.5 grect
[.5 .5 4.5 1.5 2 5 6.5 6.5] xpts
[4.5 .5 6.5 1.5 .5 5 2 6.5] wpts
[4 2.5 3.5 3 3 4.5] xwpts
(A   ) true 2 1.5 4.5 5 identreg
[(;b_1) .5 (;a_1) 1.5 (;b_2) 5 (;a_2) 6.5] markrows
((2)) 3.25 8 namereg
grestore
grestore


%%EndDocument
 @endspecial 900 1160 a
 currentpoint currentpoint translate 1 .4 div 1 .4 div scale neg exch
neg exch translate
 900 1160 a 599 1326 a Fn(Figure)38
b(2.)j Fw(Examples)32 b(for)h(Cases)f(2)h(and)h(3)e(of)i(Theorem)e(1.)
54 b(F)-7 b(or)33 b(clarit)n(y)f(in)i(stating)f(the)599
1425 y(theorem,)24 b(region)f(A)h(in)g(\(2\))h(is)e(not)h(shaded)g(as)f
(it)i(w)n(ould)e(b)r(e)i(in)f(the)g(remainder)f(of)h(the)h(pap)r(er.)
599 1525 y(The)j Fk(\014)p Fw('s)f(represen)n(t)f(p)r(oin)n(ts)h(where)
h(mat\()p Fx(x)p Fw(\))g(and)g(mat\()p Fx(w)r Fw(\))h(b)r(oth)f(ha)n(v)
n(e)e(en)n(tries.)400 1795 y(T)-7 b(o)27 b(pro)n(v)n(e)f(this)h
(theorem,)g(w)n(e)g(use)h(the)g(fact)f(that)h(\(b)n(y)f(de\014nition\))
h Fx(X)2622 1807 y Fm(w)2704 1795 y Fw(is)f(smo)r(oth)g(at)g
Fx(e)3220 1807 y Fm(x)3289 1795 y Fw(if)h(and)g(only)f(if)h(the)300
1895 y(dimension)c(of)f(the)h(Zariski)e(tangen)n(t)h(space)g(at)h(that)
g(p)r(oin)n(t)g(is)f(equal)g(to)h Fx(l)r Fw(\()p Fx(w)r
Fw(\).)36 b(Lakshmibai)23 b(and)g(Seshadri,)h([10)o(],)300
1994 y(describ)r(e)31 b(the)h(dimension)f(of)g(this)h(tangen)n(t)f
(space)g(in)g(terms)g(of)h(the)f(ro)r(ot)g(system.)48
b(In)32 b(particular,)f(using)g(the)300 2094 y(fact)d(that)g(#)p
Fk(f)p Fx(t)22 b Fk(2)i(T)44 b Fw(:)23 b Fx(xt)h(<)e(x)p
Fk(g)h Fw(=)g Fx(l)r Fw(\()p Fx(x)p Fw(\),)28 b(w)n(e)f(can)h
(paraphrase)d(their)i(result)h(as:)300 2250 y Fy(Theorem)i(2.)41
b Fw([10)o(])30 b Fj(The)h(Schub)l(ert)e(variety)i Fx(X)1832
2262 y Fm(w)1915 2250 y Fj(is)f(smo)l(oth)g(at)g Fx(e)2425
2262 y Fm(x)2496 2250 y Fj(if)h(and)f(only)h(if)300 2398
y Fw(\(1.1\))710 b(#)p Fk(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\))26 b(:=)c(#)p Fk(f)p Fx(t)h Fk(2)g(T)45 b Fw(:)23
b Fx(x)g(<)g(xt)h Fk(\024)e Fx(w)r Fk(g)h Fw(=)g Fx(l)r
Fw(\()p Fx(w)r Fw(\))c Fk(\000)f Fx(l)r Fw(\()p Fx(x)p
Fw(\))p Fx(:)400 2554 y Fw(Therefore,)26 b(w)n(e)h(ha)n(v)n(e)g(the)h
(follo)n(wing)e(c)n(haracterization)f(of)j(the)g(p)r(erm)n(utations)f
(in)h(maxsing\()p Fx(X)3456 2566 y Fm(w)3510 2554 y Fw(\):)300
2711 y Fy(F)-8 b(act)33 b(1.)41 b Fx(x)23 b Fk(2)h Fw(maxsing\()p
Fx(X)1175 2723 y Fm(w)1229 2711 y Fw(\))j(if)i(and)e(only)g(if)441
2835 y(\(1\))42 b(#)p Fk(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))25
b Fx(>)e(l)r Fw(\()p Fx(w)r Fw(\))c Fk(\000)f Fx(l)r
Fw(\()p Fx(x)p Fw(\))28 b(and)441 2934 y(\(2\))42 b(for)27
b(all)g Fx(t)c Fk(2)h(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\),)29
b(w)n(e)e(ha)n(v)n(e)g(#)p Fk(R)p Fw(\()p Fx(xt)q(;)14
b(w)r Fw(\))24 b(=)f Fx(l)r Fw(\()p Fx(w)r Fw(\))c Fk(\000)f
Fx(l)r Fw(\()p Fx(xt)p Fw(\).)1760 3140 y(2.)41 b Fn(Preliminaries)400
3289 y Fw(W)-7 b(e)22 b(b)r(egin)h(b)n(y)f(in)n(tro)r(ducing)f(our)h
(basic)f(notation)h(and)g(terminology)-7 b(.)34 b(Let)22
b Fh(S)2826 3301 y Fm(n)2894 3289 y Fw(denote)g(the)g(symmetric)g
(group)300 3389 y(on)27 b Fx(n)g Fw(letters.)36 b(W)-7
b(e)28 b(will)f(view)g(elemen)n(ts)g(of)g Fh(S)1770 3401
y Fm(n)1842 3389 y Fw(as)f(p)r(erm)n(utations)h(on)g([1)p
Fx(;)14 b(:)g(:)g(:)f(;)h(n)p Fw(].)37 b(T)-7 b(o)26
b(this)i(end,)f(w)n(e)g(iden)n(tify)g Fx(s)3872 3401
y Fm(i)300 3489 y Fw(with)k(the)h(transp)r(osition)e(\()p
Fx(i;)14 b(i)20 b Fw(+)g(1\).)47 b(Let)31 b Fx(w)r Fw(\()p
Fx(i)p Fw(\))h(b)r(e)f(the)h(image)e(of)h Fx(i)g Fw(under)g(the)g(p)r
(erm)n(utation)g Fx(w)r Fw(.)47 b(W)-7 b(e)32 b(ha)n(v)n(e)d(a)300
3588 y(one-line)24 b(notation)g(for)g(a)g(p)r(erm)n(utation)g
Fx(w)j Fw(giv)n(en)d(b)n(y)g(writing)g(the)g(image)g(of)g([1)p
Fx(;)14 b(:)g(:)g(:)g(;)g(n)p Fw(])24 b(under)g(the)h(action)f(of)g
Fx(w)r Fw(:)300 3688 y([)p Fx(w)r Fw(\(1\))p Fx(;)14
b(w)r Fw(\(2\))p Fx(;)g(:)g(:)g(:)h(;)f(w)r Fw(\()p Fx(n)p
Fw(\)].)38 b(W)-7 b(e)28 b(will)g(also)e(often)i(utilize)g(the)g(p)r
(erm)n(utation)g(matrix)f(for)g Fx(w)j Fw(\(denoted)e(mat\()p
Fx(w)r Fw(\)\).)400 3787 y(W)-7 b(e)28 b(use)f(the)h(standard)f(presen)
n(tation)1157 3931 y Fh(S)1226 3943 y Fm(n)1294 3931
y Fw(=)22 b Fk(h)p Fx(s)1452 3943 y Fl(1)1490 3931 y
Fx(;)14 b(:)g(:)g(:)g(;)g(s)1714 3943 y Fm(n)p Fi(\000)p
Fl(1)1867 3931 y Fw(:)27 b Fx(s)1956 3897 y Fl(2)1956
3952 y Fm(i)2017 3931 y Fw(=)22 b(1)p Fx(;)1917 4061
y(s)1956 4073 y Fm(i)1984 4061 y Fx(s)2023 4073 y Fm(j)2081
4061 y Fw(=)g Fx(s)2207 4073 y Fm(j)2242 4061 y Fx(s)2281
4073 y Fm(i)2337 4061 y Fw(for)27 b Fk(j)p Fx(i)18 b
Fk(\000)g Fx(j)5 b Fk(j)23 b Fx(>)g Fw(1,)k(and)1917
4190 y Fx(s)1956 4202 y Fm(i)1984 4190 y Fx(s)2023 4202
y Fm(i)p Fl(+1)2134 4190 y Fx(s)2173 4202 y Fm(i)2224
4190 y Fw(=)c Fx(s)2351 4202 y Fm(i)p Fl(+1)2462 4190
y Fx(s)2501 4202 y Fm(i)2529 4190 y Fx(s)2568 4202 y
Fm(i)p Fl(+1)2680 4190 y Fk(i)p Fx(:)300 4063 y Fw(\(2.1\))300
4342 y(Let)28 b Fk(S)i Fw(=)22 b Fk(f)p Fx(s)697 4354
y Fm(i)724 4342 y Fk(g)766 4357 y Fm(i)p Fi(2)p Fl([1)p
Fm(;:::)o(;n)p Fi(\000)p Fl(1])1161 4342 y Fw(denote)28
b(the)g(generating)e(set)i(for)f Fh(S)2304 4354 y Fm(n)2349
4342 y Fw(.)37 b(Let)28 b Fk(T)49 b Fw(denote)28 b(the)g(set)f(of)h
(all)f Fj(tr)l(ansp)l(ositions)300 4442 y Fw(in)h Fh(S)466
4454 y Fm(n)511 4442 y Fw(.)37 b(The)27 b(elemen)n(ts)h(of)f
Fk(T)49 b Fw(are)27 b(all)g(the)h(conjugates)f(of)h(elemen)n(ts)f(in)h
Fk(S)6 b Fw(:)300 4589 y(\(2.2\))481 b Fk(T)44 b Fw(=)23
b Fk(f)p Fx(t)1201 4601 y Fm(j;k)1311 4589 y Fw(=)g Fx(s)1438
4601 y Fm(j)1473 4589 y Fx(s)1512 4601 y Fm(j)s Fl(+1)1645
4589 y Fk(\001)14 b(\001)g(\001)f Fx(s)1794 4601 y Fm(k)q
Fi(\000)p Fl(2)1920 4589 y Fx(s)1959 4601 y Fm(k)q Fi(\000)p
Fl(1)2085 4589 y Fx(s)2124 4601 y Fm(k)q Fi(\000)p Fl(2)2263
4589 y Fk(\001)h(\001)g(\001)g Fx(s)2413 4601 y Fm(j)s
Fl(+1)2532 4589 y Fx(s)2571 4601 y Fm(j)2629 4589 y Fw(:)23
b(1)g Fk(\024)f Fx(j)28 b(<)23 b(k)j Fk(\024)d Fx(n)p
Fk(g)p Fx(:)300 4736 y Fw(If)i(w)n(e)f(wish)h(to)g(refer)f(to)g(a)g
(transp)r(osition)g Fx(t)h Fw(that)g(a\013ects)f(p)r(ositions)h
Fx(a)f Fw(and)h Fx(b)p Fw(,)g(but)g(the)g(relativ)n(e)f(v)-5
b(alues)24 b(of)h Fx(a)f Fw(and)300 4836 y Fx(b)j Fw(are)g(unkno)n(wn,)
g(w)n(e)g(will)h(write)g Fx(t)1402 4851 y Fi(f)p Fm(a;b)p
Fi(g)1559 4836 y Fw(.)400 4936 y(An)35 b Fj(expr)l(ession)43
b Fw(is)35 b(an)n(y)g(pro)r(duct)g(of)g(generators)e
Fx(s)2082 4948 y Fm(i)2110 4936 y Fw(.)60 b(The)35 b
Fj(length)42 b Fx(l)r Fw(\()p Fx(w)r Fw(\))36 b(of)g(an)f(elemen)n(t)g
Fx(w)k Fk(2)d Fh(S)3613 4948 y Fm(n)3693 4936 y Fw(is)g(the)300
5036 y(minim)n(um)30 b Fx(r)j Fw(for)c(whic)n(h)h(w)n(e)f(ha)n(v)n(e)g
(an)g(expression)g Fx(w)g Fw(=)d Fx(s)2168 5048 y Fm(i)2191
5056 y Fg(1)2242 5036 y Fk(\001)14 b(\001)g(\001)f Fx(s)2391
5048 y Fm(i)2414 5056 y Ff(r)2453 5036 y Fw(.)43 b(A)30
b Fj(r)l(e)l(duc)l(e)l(d)i(expr)l(ession)k Fx(w)30 b
Fw(=)c Fx(s)3530 5048 y Fm(i)3553 5056 y Fg(1)3604 5036
y Fk(\001)14 b(\001)g(\001)f Fx(s)3753 5048 y Fm(i)3776
5056 y Ff(r)3844 5036 y Fw(is)300 5135 y(an)27 b(expression)f(for)h
(whic)n(h)h Fx(l)r Fw(\()p Fx(w)r Fw(\))c(=)e Fx(r)r
Fw(.)38 b(It)28 b(is)g(a)f(standard)f(fact)i(that)300
5283 y(\(2.3\))914 b Fx(l)r Fw(\()p Fx(w)r Fw(\))24 b(=)f(#)p
Fk(f)p Fw(1)f Fk(\024)g Fx(i)h(<)g(j)28 b Fk(\024)22
b Fx(n)h Fw(:)g Fx(w)r Fw(\()p Fx(i)p Fw(\))h Fx(>)f(w)r
Fw(\()p Fx(j)5 b Fw(\))p Fk(g)p Fx(:)p eop
%%Page: 4 4
4 3 bop 0 66 a Fl(4)943 b(SARA)22 b(C.)h(BILLEY)f(AND)h(GREGOR)-5
b(Y)22 b(S.)g(W)-7 b(ARRINGTON)100 266 y Fw(If)25 b Fx(v)s(;)14
b(w)26 b Fk(2)d Fh(S)492 278 y Fm(n)537 266 y Fw(,)i(then)h
Fx(v)g Fk(\024)d Fx(w)k Fw(will)e(signify)f(that)h Fx(v)j
Fw(is)d(b)r(elo)n(w)f Fx(w)k Fw(in)d(the)g(Bruhat)f(\(or)g(Bruhat-Chev)
-5 b(alley\))23 b(order)0 365 y(\(see,)28 b(e.g.,)f([8)o(]\).)38
b(The)27 b(imp)r(ortance)g(of)h(this)g(order)e(comes)h(from)g(the)h
(corresp)r(ondence)0 503 y(\(2.4\))1274 b Fx(v)27 b Fk(\024)22
b Fx(w)k Fk(,)d Fx(X)1859 515 y Fm(v)1921 503 y Fk(\022)g
Fx(X)2078 515 y Fm(w)2132 503 y Fx(:)0 641 y Fw(This)d(order)f(has)h(a)
f(n)n(um)n(b)r(er)h(of)h(c)n(haracterizations.)31 b(One)20
b(of)g(the)h(most)f(common)f(de\014nitions)i(is)f(as)f(the)i(transitiv)
n(e)0 740 y(closure)g(of)h(the)g(relations)e Fx(v)s(t)k(<)e(v)k
Fw(for)21 b Fx(t)i Fk(2)g(T)44 b Fw(if)22 b Fx(l)r Fw(\()p
Fx(v)s(t)p Fw(\))h Fx(<)g(l)r Fw(\()p Fx(t)p Fw(\).)35
b(Ho)n(w)n(ev)n(er,)21 b(shortly)-7 b(,)22 b(w)n(e)g(will)g(presen)n(t)
f(a)h(description)0 840 y(of)28 b(this)f(order)g(that)h(is)f(more)g
(suitable)g(for)g(our)g(discussions.)100 940 y(F)-7 b(or)33
b(an)n(y)g(set)i Fx(Z)k Fw(=)34 b Fk(f)p Fx(z)831 952
y Fl(1)901 940 y Fx(<)f(z)1038 952 y Fl(2)1109 940 y
Fx(<)g Fk(\001)14 b(\001)g(\001)34 b Fx(<)g(z)1476 952
y Fm(k)1516 940 y Fk(g)g(\022)f Fw([1)14 b Fx(:)g(:)g(:)f(n)p
Fw(],)36 b Fx(x)e Fk(2)g Fh(S)2250 952 y Fm(n)2330 940
y Fw(de\014ne)g(\015)2622 952 y Fm(Z)2676 940 y Fw(\()p
Fx(x)p Fw(\))h(to)f(b)r(e)g(the)h(\\\015attened")0 1039
y(p)r(erm)n(utation)27 b(on)h([1)14 b Fx(:)g(:)g(:)f(k)s
Fw(])27 b(whose)g(elemen)n(ts)h(are)e(in)i(the)g(same)f(relativ)n(e)g
(order)f(as)h([)p Fx(x)p Fw(\()p Fx(z)2803 1051 y Fl(1)2840
1039 y Fw(\))p Fx(;)14 b(x)p Fw(\()p Fx(z)3027 1051 y
Fl(2)3065 1039 y Fw(\))p Fx(;)g(:)g(:)g(:)g(;)g(x)p Fw(\()p
Fx(z)3400 1051 y Fm(k)3441 1039 y Fw(\)].)100 1139 y(It)27
b(will)g(b)r(e)g(also)f(useful)h(to)f(de\014ne)h(the)h(notion)e(of)h
Fj(p)l(attern)h(avoidanc)l(e)p Fw(.)39 b(W)-7 b(e)27
b(sa)n(y)f(that)h Fx(w)f Fw(=)d([)p Fx(w)r Fw(\(1\))p
Fx(;)14 b(:)g(:)g(:)g(;)g(w)r Fw(\()p Fx(n)p Fw(\)])0
1238 y Fj(avoids)44 b Fw(the)35 b(pattern)g Fx(v)k Fw(=)d([)p
Fx(v)s Fw(\(1\))p Fx(;)14 b(:)g(:)g(:)f(;)h(v)s Fw(\()p
Fx(k)s Fw(\)])36 b(for)f Fx(k)j Fk(\024)e Fx(n)f Fw(if)g(w)n(e)g
(cannot)g(\014nd)g(1)h Fk(\024)f Fx(i)2743 1250 y Fl(1)2815
1238 y Fx(<)g Fk(\001)14 b(\001)g(\001)36 b Fx(<)f(i)3177
1250 y Fm(k)3253 1238 y Fk(\024)h Fx(n)f Fw(with)0 1338
y(\015)46 1353 y Fi(f)p Fm(i)103 1361 y Fg(1)136 1353
y Fm(;:::)o(;i)258 1362 y Ff(k)294 1353 y Fi(g)333 1338
y Fw(\()p Fx(w)r Fw(\))24 b(=)f Fx(v)s Fw(.)1140 1517
y(3.)41 b Fn(Criterion)32 b(f)n(or)g(Br)n(uha)-6 b(t)32
b(order)100 1666 y Fw(Our)38 b(main)g(theorem)h(is)f(concerned)g(not)h
(only)f(with)i(determining)e(whic)n(h)h(p)r(oin)n(ts)g(in)g(a)f(giv)n
(en)g(Sc)n(h)n(ub)r(ert)0 1766 y(v)-5 b(ariet)n(y)22
b(are)g(singular,)h(but)h(whic)n(h)f(are)f Fj(maximal)t(ly)32
b Fw(singular)22 b(\(in)i(the)f(sense)g(of)g(De\014nition)h(1\).)35
b(T)-7 b(o)23 b(ac)n(hiev)n(e)f(this,)0 1865 y(w)n(e)32
b(need)h(to)f(in)n(tro)r(duce)g(some)g(terminology)g(that)g(will)h(let)
g(us)g(relate)e Fk(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))35
b(and)d(the)h(Bruhat)f(order.)51 b(W)-7 b(e)0 1965 y(no)n(w)30
b(presen)n(t)h(the)g(form)n(ulation)f(of)h(the)h(Bruhat)e(order)g(whic)
n(h)h(w)n(e)f(will)h(b)r(e)h(using)f(in)g(this)g(pap)r(er.)47
b(W)-7 b(e)31 b(justify)0 2065 y(its)d(suitabilit)n(y)f(after)h(giving)
e(the)i(necessary)e(de\014nitions.)0 2216 y Fy(De\014nition)38
b(2.)44 b Fw(Let)33 b Fx(x;)14 b(w)36 b Fk(2)d Fh(S)1062
2228 y Fm(n)1107 2216 y Fw(,)i Fx(p;)14 b(q)36 b Fk(2)d
Fe(Z)o Fw(.)49 b(De\014ne)33 b(the)h Fj(r)l(ank)h(function)40
b Fw(for)33 b Fx(w)j Fw(b)n(y)d Fx(r)2865 2228 y Fm(w)2920
2216 y Fw(\()p Fx(p;)14 b(q)s Fw(\))33 b(=)f(#)p Fk(f)p
Fx(i)g Fk(\024)g Fx(p)h Fw(:)0 2315 y Fx(w)r Fw(\()p
Fx(i)p Fw(\))24 b Fk(\025)f Fx(q)s Fk(g)p Fw(.)36 b(The)28
b Fj(di\013er)l(enc)l(e)i(function)k Fw(for)27 b(the)h(pair)f
Fx(x;)14 b(w)31 b Fw(is)c(de\014ned)h(b)n(y)g Fx(d)2426
2327 y Fm(x;w)2537 2315 y Fw(\()p Fx(p;)14 b(q)s Fw(\))23
b(=)g Fx(r)2868 2327 y Fm(w)2922 2315 y Fw(\()p Fx(p;)14
b(q)s Fw(\))19 b Fk(\000)f Fx(r)3244 2327 y Fm(x)3286
2315 y Fw(\()p Fx(p;)c(q)s Fw(\).)0 2467 y Fy(Lemma)30
b(1.)40 b Fj(We)30 b(have)h Fx(x)24 b Fk(\024)e Fx(w)33
b Fj(if)d(and)g(only)h(if)f Fx(d)1591 2479 y Fm(x;w)1732
2467 y Fj(is)h(everywher)l(e)g(non-ne)l(gative.)0 2618
y Fy(Corollary)i(3.)41 b Fj(If)30 b Fx(x)24 b Fk(\024)e
Fx(y)k Fk(\024)d Fx(w)r Fj(,)30 b(then)g Fx(d)1286 2630
y Fm(x;w)1416 2618 y Fk(\000)18 b Fx(d)1542 2630 y Fm(y)r(;w)1681
2618 y Fj(is)30 b(everywher)l(e)h(non-ne)l(gative.)100
2769 y Fw(The)f(function)h Fx(d)644 2781 y Fm(x;w)786
2769 y Fw(a\013ords)e(us)i(a)f(graphical)f(view)h(of)h(the)f(Bruhat)g
(order.)45 b(Most)30 b(imp)r(ortan)n(tly)-7 b(,)31 b(it)g(lets)f(us)0
2869 y(see)i(the)h(set)f Fk(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\).)54 b(W)-7 b(e)33 b(will)g(no)n(w)f(in)n(tro)r(duce)g(the)g
(graphical)f(notation)h(that)h(is)g(utilized)g(in)f(the)h(pro)r(of)f
(of)0 2968 y(Theorem)26 b(1)g(as)h(w)n(e)f(feel)h(it)g(is)g(in)n
(teresting)f(in)h(its)g(o)n(wn)f(righ)n(t.)36 b(A)27
b(diagram)f(displa)n(ying)f(this)j(notation)e(is)h(o\013ered)0
3068 y(in)h(Figure)f(3.)540 4286 y
 currentpoint currentpoint translate .4 .4 scale neg exch neg exch
translate
 540 4286 a @beginspecial
0 @llx 0 @lly 756 @urx 324 @ury 7560 @rwi @setspecial
%%BeginDocument: diagex.eps
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%Title: Image diagex
%%BoundingBox: 0 0 756 324
%%EndComments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% BEGIN COMMANDS

% arc's correspond to reflections we are interested in
% light shaded rectangle indicates dxw >= 1 there
% dark shaded rectangle indicates dxw >= 2 there
% gray circles indicate position of elts of x
clear

/inch {36 mul} def		% for sizing
/ooinch {1 36 div mul} def	% for sizing
/xdef {exch def} def		% reverse of def
/lo .85 def			% dxw >= 1 regions
/lt .55 def			% dxw >= 2 regions
/dk .15 def			% for other purposes
/ptgr .5 def			% gray level for pts
/ptrad 5 def			% radius of pts
/ztild 0.05 def			% generic inset
/zlw 2 def			% generic line with for outlbox
/laboff 0.25 def		% offset for markrows labels
/xoff 0 def			% offset for region labels
/yoff 7.5 def			% offset for region labels
/fsize 18 def			% fontsize

/settime {/Times-Italic findfont 24 scalefont setfont} def
/setsmtime {/Times-Italic findfont 14 scalefont setfont} def
/setsymb {/Symbol findfont 20 scalefont setfont} def
/getchar {st ind 1 getinterval /cur xdef ind 1 add /ind xdef} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% labels 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% since sometimes we need to change fonts in the middle,
% we need to calculate string width one character at a time
% stack: st - string
% returns width
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/getstrwid {
  gsave
  /st xdef 
  st length /len xdef
  /ind 0 def
  /mywid 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) eq 
	    {getchar cur setsymb
    	     stringwidth pop mywid add /mywid xdef}
	    {cur (') eq {} {cur settime
	     stringwidth pop mywid add /mywid xdef} ifelse
	    } ifelse 1 pop} loop
  grestore
  mywid
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print characters in string in either greek or roman
% assumes currentpoint is correct
% stack: st - string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/showlab {
  gsave
  /st xdef 
  st length /len xdef
  settime
%  st stringwidth pop /mywid xdef
  st getstrwid /mywid xdef
  -1 mywid mul 0 rmoveto
  /ind 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop
%	ifelse
%        cur (;) eq {getchar cur setsymb}
%                   {cur (_) eq 
%		     {getchar cur gsave setsmtime 0 .1 inch rmoveto} 

%cur settime} ifelse show} loop
%        cur (;) eq {getchar cur setsymb}
%                   {cur settime} ifelse show} loop
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% label rows along left side
% stack: array with labels and y coord.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/markrows {
  dup length 2 idiv /num xdef	% num of points we have to print
  gsave
   aload pop % place elts of array on stack
   /tyv xdef % read off y coord.
   num {laboff inch tyv abs inch yoff add moveto % set position
        gsave
	    1 -1 scale	% print string rightside up
	    showlab	% print some chars in greek if necessary
	grestore
	count 1 ge {/tyv xdef} if	
       } repeat 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for printing a label inside a region
% stack: x,y
%	 string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/namereg {
  gsave
    /ty xdef
    /tx xdef
    /st xdef
    st length /len xdef
    settime
    st getstrwid /mywid xdef
%    st stringwidth pop /mywid xdef % get width of string
    tx inch mywid 2 div sub xoff sub ty inch yoff add moveto
    /ind 0 def
    gsave
	1 -1 scale % print rightside up
       { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop


%        cur (;) eq {getchar cur setsymb}
%              {cur settime} ifelse show} loop

%	st	   % put string on stack
%	settime    % make sure we're using non-greek font
%	show
    grestore 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arrows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for putting vertical arrows in diagram.
% currently only point down
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/arrow {
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     vx inch vy 1 sub inch translate
     newpath
     2 setlinewidth
     0 0 moveto
     0 1 inch lineto
     0 1 inch translate
     -.2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     .2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     stroke
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print filled circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circ {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ellipses for points
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/smcircs {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     0 setgray
     newpath
     vx .25 add inch vy .25 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .5 add inch vy .5 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .75 add inch vy .75 sub inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print outline of circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circoutline {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
   grestore
} def                                                                      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print circle with dot in the center
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/capitol {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
     newpath
     vx inch vy inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print square
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/squ {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
  false vx triamt sub 
        vy triamt add 
	vx triamt add 
	vy triamt sub 0 2 [] outlbox
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print diamond
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/diam {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
   gsave
     vx inch vy inch translate
     45 rotate
    false 0 0 triamt 2 mul triamt 2 mul 0 2 [] outlbox
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print triangle
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/trian {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul def
   gsave
     vx inch vy inch translate
     newpath
     1 setlinejoin
     2 setlinewidth
     -1 triamt mul 2 div inch triamt 2.2 div inch moveto
     triamt 2 div inch triamt -.86 mul inch rlineto
     triamt 2 div inch triamt .86 mul inch rlineto
     closepath
     stroke
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print out points where desired
% stack: array of x,y coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points of x
% filled circles
/genpts {
  dup length 2 idiv /num xdef	% num of points we have to print
  aload pop   			% put all the points on the stack
  num {ptpr} repeat % display all of them
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/box {
  /byt xdef
  /bxt xdef
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/outlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty txt tyt box
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt swinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mmty xdef
  obin sub /mmtx xdef  
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt swtinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt neinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mmty xdef
  obin add /mmtx xdef  
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt netinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws un-bordered box starting at NW corner
%stack: SE x,y
% 	NW x,y
% 	gray level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/grect {
  /uyt xdef
  /uxt xdef
  /uy xdef
  /ux xdef  
  /gr xdef
  gsave
    ux uy uxt uyt box
    gsave
      gr setgray
      fill
    grestore
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% interpolate for various types of arc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/uparc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 4 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 4 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

/dnarc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 1 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 1 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generic arc routine
% stack: up boolean
%	 dash pattern
%	 SE x,y
%        NW x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/genarc {
  /arcda xdef	% dash style
  /arcup xdef	% go up?
  /y3 xdef  /x3 xdef  /y0 xdef  /x0 xdef
  arcup true eq {x0 y0 x3 y3 uparc} {x0 y0 x3 y3 dnarc} ifelse
  gsave
    newpath
    x0 inch y0 inch moveto
    arcda 0 setdash
    x1 inch y1 inch x2 inch y2 inch x3 inch y3 inch curveto 
    stroke
  grestore   
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% points of x - filled gray circles
/xpts {/ptpr {ptrad ptgr circ} def genpts} def 

% points of w - outlined circles
/wpts {/ptpr {ptrad ptgr circoutline} def genpts} def 

% points of x & w - dotted/outlined circles
/xwpts {/ptpr {ptrad ptgr capitol} def genpts} def 

% other points - square
/otherpts {/ptpr {ptrad ptgr squ} def genpts} def 

% other points - diamonds
/diampts {/ptpr {ptrad ptgr diam} def genpts} def 

% other points - triangles
/trianpts {/ptpr {ptrad ptgr trian} def genpts} def 

% ellipses
/smpts {/ptpr {ptrad ptgr smcircs} def genpts} def 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arc that is in rxw
/rxwarc {true [] genarc} def

% arc that is in ryw
/rywarc {true [10 10] genarc} def  

% arc t such that y = xt
/xtarc {false [3 3] genarc} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for identifying a region
/identreg {ztild 1 [2 2] outlbox} def

% for identifying a region
/swidentreg {ztild 1 [2 2] swinlbox} def

% for identifying a region
/stireg {ztild 1 [2 2] swtinlbox} def

% for identifying a region
/neidentreg {ztild 1 [2 2] neinlbox} def

% for identifying a region
/ntireg {ztild 1 [2 2] netinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for marking a region as attaining minimal value of dxw
/minreg {ztild 2 [] outlbox} def

% for identifying a region
/swminreg {ztild 2 [] swinlbox} def

% for identifying a region
/neminreg {ztild 2 [] neinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% draws a filled gray rectangle of specified gray level
% also puts xpts at NW and SE
/ptsgrect {
  /tyt xdef  /txt xdef  /ty xdef  /tx xdef
  tx ty txt tyt grect
  [tx ty txt tyt] xpts
} def

% END COMMANDS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% x: 
gsave
1 inch 9.5 inch translate
1 -1 scale
%
gsave
lo 2 2 4 8 ptsgrect
lo 1 4 7 6 ptsgrect
lo 5 3 8 5 ptsgrect
lo 6 1 8 3 grect
lt 6 4 7 5 grect
[6 1] xpts
[3 7] xwpts
[3.5 4.5] diampts
false 6 3 7 4 minreg
false 2 4 4 6 identreg
2 2 4 8 rxwarc
5 6 1 4 rywarc
5 3 7 6 xtarc
((1) x) 4.5 9 namereg
[(a) 3 (b) 6 (c) 7 (;a) 2 (;b) 8] markrows
grestore

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% y:
10 inch 0 inch translate
%
gsave
lo 2 2 4 8 ptsgrect
lo 1 4 5 6 ptsgrect
lo 6 1 8 3 grect
lo 7 3 8 5 grect
lo 6 4 7 5 grect
[6 1 8 5 7 3] xpts
[3 7] xwpts
[3.5 4.5] diampts
[6.5 3.5] trianpts
false 6 3 7 4 minreg
false 2 4 4 6 identreg
2 2 4 8 rxwarc
5 6 1 4 rywarc
7 3 5 6 xtarc
((2) y=xt_a_,_b) 4.5 9 namereg
[(a) 3 (b) 6 (c) 7 (;a) 2 (;b) 8] markrows
grestore
grestore


%%EndDocument
 @endspecial 540 4286 a
 currentpoint currentpoint translate 1 .4 div 1 .4 div scale neg exch
neg exch translate
 540 4286 a 299 4456 a Fn(Figure)32
b(3.)41 b Fw(As)28 b(men)n(tioned)g(in)g(De\014nition)g(3,)f(pt)1910
4476 y Fm(x)1952 4456 y Fw(\()p Fx(c)p Fw(\))h(denotes)f(the)i(p)r
(osition)e(\()p Fx(c;)14 b(x)p Fw(\()p Fx(c)p Fw(\)\).)39
b(W)-7 b(e)299 4556 y(see)33 b(\(among)h(other)f(facts\))h(that)g
Fx(d)1433 4568 y Fm(x;w)1545 4556 y Fw(\()p Fk(\005)p
Fw(\))f Fk(\025)g Fw(1,)i Fx(d)1926 4568 y Fm(y)r(;w)2035
4556 y Fw(\()p Fk(4)p Fw(\))f(=)f Fx(d)2349 4568 y Fm(x;w)2460
4556 y Fw(\()p Fk(4)p Fw(\))22 b Fk(\000)g Fw(1)34 b
Fk(\025)f Fw(0,)i(pt)3061 4576 y Fm(x)3102 4556 y Fw(\()p
Fx(c)p Fw(\))g(=)299 4655 y(pt)377 4676 y Fm(w)431 4655
y Fw(\()p Fx(c)p Fw(\))28 b(and)g Fx(t)751 4667 y Fm(\013;\014)881
4655 y Fk(2)c(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\).)100 4884
y(First,)23 b(w)n(e)f(plot,)h(as)f(blac)n(k)f(disks,)i(all)f(or)g(some)
g(of)g(the)h(p)r(ositions)e(con)n(taining)h(1's)f(in)i(the)g(p)r(erm)n
(utation)f(matrix)0 4984 y(mat\()p Fx(x)p Fw(\))31 b(of)f
Fx(x)p Fw(.)44 b(W)-7 b(e)30 b(will)g(sometimes)f(o)n(v)n(erla)n(y)f
(mat\()p Fx(x)p Fw(\))i(and)g(mat\()p Fx(w)r Fw(\).)45
b(In)30 b(these)g(cases,)f(1's)g(in)h(mat\()p Fx(w)r
Fw(\))i(will)e(b)r(e)0 5083 y(mark)n(ed)24 b(b)n(y)h(op)r(en)g
(circles.)36 b(P)n(oin)n(ts)24 b(that)h(are)f(sim)n(ultaneously)h(in)g
(b)r(oth)h(diagrams)d(will)j(consist)f(of)g(a)g(blac)n(k)f(disk)0
5183 y(and)34 b(a)f(larger)g(concen)n(tric)f(circle.)56
b(Let)34 b([)p Fx(a;)14 b(b)p Fw(])22 b Fk(\002)h Fw([)p
Fx(c;)14 b(d)p Fw(])34 b(denote)g(the)g(set)g(of)g(all)g(p)r(oin)n(ts)g
(\()p Fx(p;)14 b(q)s Fw(\))34 b Fk(2)g Fe(R)3177 5153
y Fl(2)3254 5183 y Fw(suc)n(h)g(that)0 5283 y Fx(a)23
b Fk(\024)g Fx(p)f Fk(\024)h Fx(b)k Fw(and)h Fx(c)23
b Fk(\024)f Fx(q)27 b Fk(\024)22 b Fx(d)p Fw(.)37 b(The)28
b(follo)n(wing)f(notation)g(will)g(b)r(e)h(handy:)p eop
%%Page: 5 5
5 4 bop 997 66 a Fl(MAXIMAL)28 b(SINGULAR)i(LOCI)f(OF)g(SCHUBER)-5
b(T)29 b(V)-7 b(ARIETIES)29 b(IN)g Fm(S)s(L)p Fl(\()p
Fm(n)p Fl(\))p Fm(=B)666 b Fl(5)300 266 y Fy(De\014nition)31
b(3.)41 b Fw(F)-7 b(or)27 b Fx(t)1041 278 y Fm(p;q)1154
266 y Fk(2)d(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\),)29 b(set)1172
400 y Fk(A)1238 412 y Fm(p;q)1352 400 y Fw(:=)22 b Fk(A)1528
412 y Fm(p;q)1619 400 y Fw(\()p Fx(x)p Fw(\))i(=)f([)p
Fx(p)18 b Fw(+)g(1)p Fx(;)c(q)21 b Fk(\000)d Fw(1])g
Fk(\002)g Fw([)p Fx(x)p Fw(\()p Fx(p)p Fw(\))i(+)e(1)p
Fx(;)c(x)p Fw(\()p Fx(q)s Fw(\))k Fk(\000)g Fw(1])p Fx(;)-2792
b Fw(\(3.1\))p 1172 480 157 4 v 1172 546 a Fk(A)1238
558 y Fm(p;q)1352 546 y Fw(:=)p 1462 474 269 4 v 22 w
Fk(A)1528 558 y Fm(p;q)1619 546 y Fw(\()p Fx(x)p Fw(\))24
b(=)f([)p Fx(p;)14 b(q)s Fw(])k Fk(\002)g Fw([)p Fx(x)p
Fw(\()p Fx(p)p Fw(\))p Fx(;)c(x)p Fw(\()p Fx(q)s Fw(\)])p
Fx(;)-2218 b Fw(\(3.2\))1108 676 y(pt)1186 696 y Fm(x)1228
676 y Fw(\()p Fx(c)p Fw(\))24 b(:=)e(\()p Fx(c;)14 b(x)p
Fw(\()p Fx(c)p Fw(\)\))29 b(for)e Fx(c)c Fk(2)h Fw([1)p
Fx(;)14 b(:)g(:)g(:)f(;)h(n)p Fw(])p Fx(:)-2085 b Fw(\(3.3\))400
827 y(Along)25 b(with)h(the)g(p)r(oin)n(ts)g(of)g(mat\()p
Fx(x)p Fw(\),)h(w)n(e)f(can)f(shade)g(parts)g(of)h(our)f(diagram)f(in)i
(order)f(to)h(sp)r(ecify)g(that)g Fx(d)3789 839 y Fm(x;w)300
927 y Fw(satis\014es)i(a)g(particular)f(inequalit)n(y)h(on)g(a)g(giv)n
(en)g(region.)38 b(Ligh)n(t)28 b(shading)g(on)g(a)h(region)e
(signi\014es)h(that)g Fx(d)3633 939 y Fm(x;w)3769 927
y Fk(\025)c Fw(1)300 1026 y(on)33 b(that)h(region.)54
b(Dark)33 b(shading)g(signi\014es)g Fx(d)1792 1038 y
Fm(x;w)1936 1026 y Fk(\025)g Fw(2.)54 b(No)34 b(shading)f(places)f(no)i
(restrictions)e(on)h(the)h(v)-5 b(alues)300 1126 y Fx(d)343
1138 y Fm(x;w)454 1126 y Fw(.)40 b(A)29 b(region)f(with)h(a)f(blac)n(k)
g(b)r(order)f(is)i(one)f(where)g Fx(d)2125 1138 y Fm(x;w)2265
1126 y Fw(ac)n(hiev)n(es)f(the)i(minim)n(um)h(p)r(ossible)e(v)-5
b(alue)28 b(allo)n(w)n(ed)300 1226 y(b)n(y)g(the)g(shading)f(on)h(that)
g(region.)37 b(Dotted)29 b(b)r(orders)e(are)g(used)h(to)f(demarcate)g
(regions)g(w)n(e)g(wish)h(to)g(discuss)g(in)300 1325
y(the)g(text.)400 1425 y(As)21 b(men)n(tioned)h(ab)r(o)n(v)n(e,)f(the)h
(great)e(utilit)n(y)i(of)f(these)h(diagrams)d(arises)h(from)h(b)r(eing)
h(able)f(to)g(visualize)g Fk(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\))300 1525 y(along)34 b(with)i(the)f(information)g(on)g(the)g
(Bruhat)g(order.)58 b(T)-7 b(o)35 b(see)f(ho)n(w)h(w)n(e)g(do)g(this,)i
(supp)r(ose)e(w)n(e)g(ha)n(v)n(e)f(some)300 1624 y(re\015ection)28
b Fx(t)691 1636 y Fm(a;b)805 1624 y Fk(2)d(R)p Fw(\()p
Fx(x;)14 b(w)r Fw(\))30 b(\(whic)n(h)f(implies)g Fx(x)c(<)f(xt)1986
1636 y Fm(a;b)2100 1624 y Fk(\024)g Fx(w)r Fw(\).)41
b(No)n(w)28 b(compare)f(the)i(shading)f(\(with)h(resp)r(ect)f(to)300
1724 y Fx(w)r Fw(\))d(in)f(mat\()p Fx(x)p Fw(\))h(and)f(mat\()p
Fx(xt)1200 1736 y Fm(a;b)1289 1724 y Fw(\).)36 b(W)-7
b(e)25 b(see)e(\(as)h(in)g(Figure)f(3\),)i(that)f(in)g(the)g(region)f
Fk(A)2974 1736 y Fm(a;b)3063 1724 y Fw(\()p Fx(x)p Fw(\),)j
Fx(d)3266 1736 y Fm(xt)3329 1745 y Ff(a;b)3410 1736 y
Fm(;w)3507 1724 y Fw(=)d Fx(d)3638 1736 y Fm(x;w)3760
1724 y Fk(\000)11 b Fw(1.)300 1823 y(Hence,)28 b(b)n(y)f(Lemma)g(1,)h
(w)n(e)f(can)g(state)h(the)g(follo)n(wing:)300 1970 y
Fy(F)-8 b(act)27 b(2.)37 b Fw(Let)23 b Fx(t)790 1982
y Fm(a;b)902 1970 y Fk(2)h(T)44 b Fw(with)23 b Fx(x)h(<)e(xt)1489
1982 y Fm(a;b)1579 1970 y Fw(.)35 b(The)23 b(transp)r(osition)f
Fx(t)2330 1982 y Fm(a;b)2442 1970 y Fw(is)h(in)g Fk(R)p
Fw(\()p Fx(x;)14 b(w)r Fw(\))25 b(if)e(and)g(only)f(if)i(it)f(corresp)r
(onds)300 2069 y(to)k(a)h(region)e(in)i(mat\()p Fx(x)p
Fw(\))g(that)g(is)g(en)n(tirely)f(shaded)g(\(i.e.,)h
Fx(d)2172 2081 y Fm(x;w)2284 2069 y Fk(j)2307 2081 y
Fi(A)2360 2090 y Ff(a;b)2469 2069 y Fk(\025)22 b Fw(1\).)37
b(An)28 b(example)f(is)h(giv)n(en)f(in)g(Figure)g(4)1680
2857 y
 currentpoint currentpoint translate .4 .4 scale neg exch neg exch
translate
 1680 2857 a @beginspecial 0 @llx 0 @lly 252 @urx
180 @ury 2520 @rwi @setspecial
%%BeginDocument: shadedex.eps
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%Title: Image shadedex
%%BoundingBox: 0 0 252 180
%%EndComments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% BEGIN COMMANDS

% arc's correspond to reflections we are interested in
% light shaded rectangle indicates dxw >= 1 there
% dark shaded rectangle indicates dxw >= 2 there
% gray circles indicate position of elts of x
clear

/inch {36 mul} def		% for sizing
/ooinch {1 36 div mul} def	% for sizing
/xdef {exch def} def		% reverse of def
/lo .85 def			% dxw >= 1 regions
/lt .55 def			% dxw >= 2 regions
/dk .15 def			% for other purposes
/ptgr .5 def			% gray level for pts
/ptrad 5 def			% radius of pts
/ztild 0.05 def			% generic inset
/zlw 2 def			% generic line with for outlbox
/laboff 0.25 def		% offset for markrows labels
/xoff 0 def			% offset for region labels
/yoff 7.5 def			% offset for region labels
/fsize 18 def			% fontsize

/settime {/Times-Italic findfont 24 scalefont setfont} def
/setsmtime {/Times-Italic findfont 14 scalefont setfont} def
/setsymb {/Symbol findfont 20 scalefont setfont} def
/getchar {st ind 1 getinterval /cur xdef ind 1 add /ind xdef} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% labels 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% since sometimes we need to change fonts in the middle,
% we need to calculate string width one character at a time
% stack: st - string
% returns width
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/getstrwid {
  gsave
  /st xdef 
  st length /len xdef
  /ind 0 def
  /mywid 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) eq 
	    {getchar cur setsymb
    	     stringwidth pop mywid add /mywid xdef}
	    {cur (') eq {} {cur settime
	     stringwidth pop mywid add /mywid xdef} ifelse
	    } ifelse 1 pop} loop
  grestore
  mywid
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print characters in string in either greek or roman
% assumes currentpoint is correct
% stack: st - string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/showlab {
  gsave
  /st xdef 
  st length /len xdef
  settime
%  st stringwidth pop /mywid xdef
  st getstrwid /mywid xdef
  -1 mywid mul 0 rmoveto
  /ind 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop
%	ifelse
%        cur (;) eq {getchar cur setsymb}
%                   {cur (_) eq 
%		     {getchar cur gsave setsmtime 0 .1 inch rmoveto} 

%cur settime} ifelse show} loop
%        cur (;) eq {getchar cur setsymb}
%                   {cur settime} ifelse show} loop
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% label rows along left side
% stack: array with labels and y coord.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/markrows {
  dup length 2 idiv /num xdef	% num of points we have to print
  gsave
   aload pop % place elts of array on stack
   /tyv xdef % read off y coord.
   num {laboff inch tyv abs inch yoff add moveto % set position
        gsave
	    1 -1 scale	% print string rightside up
	    showlab	% print some chars in greek if necessary
	grestore
	count 1 ge {/tyv xdef} if	
       } repeat 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for printing a label inside a region
% stack: x,y
%	 string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/namereg {
  gsave
    /ty xdef
    /tx xdef
    /st xdef
    st length /len xdef
    settime
    st getstrwid /mywid xdef
%    st stringwidth pop /mywid xdef % get width of string
    tx inch mywid 2 div sub xoff sub ty inch yoff add moveto
    /ind 0 def
    gsave
	1 -1 scale % print rightside up
       { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop


%        cur (;) eq {getchar cur setsymb}
%              {cur settime} ifelse show} loop

%	st	   % put string on stack
%	settime    % make sure we're using non-greek font
%	show
    grestore 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arrows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for putting vertical arrows in diagram.
% currently only point down
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/arrow {
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     vx inch vy 1 sub inch translate
     newpath
     2 setlinewidth
     0 0 moveto
     0 1 inch lineto
     0 1 inch translate
     -.2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     .2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     stroke
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print filled circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circ {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ellipses for points
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/smcircs {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     0 setgray
     newpath
     vx .25 add inch vy .25 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .5 add inch vy .5 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .75 add inch vy .75 sub inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print outline of circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circoutline {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
   grestore
} def                                                                      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print circle with dot in the center
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/capitol {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
     newpath
     vx inch vy inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print square
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/squ {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
  false vx triamt sub 
        vy triamt add 
	vx triamt add 
	vy triamt sub 0 2 [] outlbox
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print diamond
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/diam {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
   gsave
     vx inch vy inch translate
     45 rotate
    false 0 0 triamt 2 mul triamt 2 mul 0 2 [] outlbox
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print triangle
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/trian {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul def
   gsave
     vx inch vy inch translate
     newpath
     1 setlinejoin
     2 setlinewidth
     -1 triamt mul 2 div inch triamt 2.2 div inch moveto
     triamt 2 div inch triamt -.86 mul inch rlineto
     triamt 2 div inch triamt .86 mul inch rlineto
     closepath
     stroke
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print out points where desired
% stack: array of x,y coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points of x
% filled circles
/genpts {
  dup length 2 idiv /num xdef	% num of points we have to print
  aload pop   			% put all the points on the stack
  num {ptpr} repeat % display all of them
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/box {
  /byt xdef
  /bxt xdef
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/outlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty txt tyt box
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt swinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mmty xdef
  obin sub /mmtx xdef  
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt swtinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt neinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mmty xdef
  obin add /mmtx xdef  
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt netinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws un-bordered box starting at NW corner
%stack: SE x,y
% 	NW x,y
% 	gray level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/grect {
  /uyt xdef
  /uxt xdef
  /uy xdef
  /ux xdef  
  /gr xdef
  gsave
    ux uy uxt uyt box
    gsave
      gr setgray
      fill
    grestore
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% interpolate for various types of arc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/uparc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 4 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 4 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

/dnarc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 1 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 1 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generic arc routine
% stack: up boolean
%	 dash pattern
%	 SE x,y
%        NW x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/genarc {
  /arcda xdef	% dash style
  /arcup xdef	% go up?
  /y3 xdef  /x3 xdef  /y0 xdef  /x0 xdef
  arcup true eq {x0 y0 x3 y3 uparc} {x0 y0 x3 y3 dnarc} ifelse
  gsave
    newpath
    x0 inch y0 inch moveto
    arcda 0 setdash
    x1 inch y1 inch x2 inch y2 inch x3 inch y3 inch curveto 
    stroke
  grestore   
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% points of x - filled gray circles
/xpts {/ptpr {ptrad ptgr circ} def genpts} def 

% points of w - outlined circles
/wpts {/ptpr {ptrad ptgr circoutline} def genpts} def 

% points of x & w - dotted/outlined circles
/xwpts {/ptpr {ptrad ptgr capitol} def genpts} def 

% other points - square
/otherpts {/ptpr {ptrad ptgr squ} def genpts} def 

% other points - diamonds
/diampts {/ptpr {ptrad ptgr diam} def genpts} def 

% other points - triangles
/trianpts {/ptpr {ptrad ptgr trian} def genpts} def 

% ellipses
/smpts {/ptpr {ptrad ptgr smcircs} def genpts} def 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arc that is in rxw
/rxwarc {true [] genarc} def

% arc that is in ryw
/rywarc {true [10 10] genarc} def  

% arc t such that y = xt
/xtarc {false [3 3] genarc} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for identifying a region
/identreg {ztild 1 [2 2] outlbox} def

% for identifying a region
/swidentreg {ztild 1 [2 2] swinlbox} def

% for identifying a region
/stireg {ztild 1 [2 2] swtinlbox} def

% for identifying a region
/neidentreg {ztild 1 [2 2] neinlbox} def

% for identifying a region
/ntireg {ztild 1 [2 2] netinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for marking a region as attaining minimal value of dxw
/minreg {ztild 2 [] outlbox} def

% for identifying a region
/swminreg {ztild 2 [] swinlbox} def

% for identifying a region
/neminreg {ztild 2 [] neinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% draws a filled gray rectangle of specified gray level
% also puts xpts at NW and SE
/ptsgrect {
  /tyt xdef  /txt xdef  /ty xdef  /tx xdef
  tx ty txt tyt grect
  [tx ty txt tyt] xpts
} def

% END COMMANDS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% x: both points contained inside
gsave
1 inch 5.5 inch translate
1 -1 scale
%
gsave
lo 1 1 2 2 grect
lo 1 2 4 4 grect
lo 1 4 3 5 grect
lo 3 4 4 5 grect
[1 1 2 2 4 5] xpts
[2 1 4 2 1 5] wpts
[5 3 3 4] xwpts
%3 4 5 3 xtarc
%2 2 3 4 rxwarc
%2 2 4 5 rxwarc
%3 4 4 5 rxwarc
%1 1 2 2 rxwarc
%((3) x_2) 3 6 namereg
grestore
grestore


%%EndDocument
 @endspecial 1680 2857 a
 currentpoint currentpoint translate 1 .4 div 1 .4 div scale neg exch
neg exch translate
 1680 2857 a 837 3057 a Fn(Figure)32
b(4.)41 b Fw(In)27 b(the)h(ab)r(o)n(v)n(e)f(con\014guration,)f
Fk(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))25 b(=)d Fk(f)p Fx(t)2738
3069 y Fl(1)p Fm(;)p Fl(2)2828 3057 y Fx(;)14 b(t)2895
3069 y Fl(2)p Fm(;)p Fl(4)2985 3057 y Fx(;)g(t)3052 3069
y Fl(2)p Fm(;)p Fl(5)3142 3057 y Fx(;)g(t)3209 3069 y
Fl(4)p Fm(;)p Fl(5)3299 3057 y Fk(g)p Fw(.)400 3274 y(Note)35
b(that)h(the)f(v)-5 b(alues)35 b(of)h Fx(d)1347 3286
y Fm(x;w)1493 3274 y Fw(on)g(the)f(region)p 2024 3207
156 4 v 34 w Fk(A)2090 3286 y Fm(a;b)2239 3274 y Fk(n)23
b(A)2370 3286 y Fm(a;b)2495 3274 y Fw(are)34 b(not)h(considered)g(in)g
(determining)h(the)300 3373 y(mem)n(b)r(ership)31 b(of)h
Fx(t)899 3385 y Fm(a;b)1020 3373 y Fw(in)f Fk(R)p Fw(\()p
Fx(x;)14 b(w)r Fw(\).)51 b(As)32 b(a)f(\014nal)g(piece)h(of)f
(notation,)h(in)g(order)e(to)i(highligh)n(t)f(a)g(re\015ection)g(that)
300 3473 y(w)n(e)c(are)g(particularly)f(in)n(terested)h(in,)h(w)n(e)f
(can)h(dra)n(w)e(a)h(corresp)r(onding)f(arc)g(in)i(our)f(diagram.)1628
3642 y(4.)41 b Fn(Elements)31 b(of)h Fk(R)p Fw(\()p Fx(x;)14
b(w)r Fw(\))400 3792 y(As)29 b(ma)n(y)f(b)r(e)h(ascertained)f(from)h
(Theorem)f(1,)h(the)g(criteria)f(for)g Fx(x)i Fw(to)f(b)r(e)g(an)g
(elemen)n(t)g(of)g(maxsing\()p Fx(X)3674 3804 y Fm(w)3728
3792 y Fw(\))g(are)300 3892 y(lo)r(cal)d(in)h(nature.)36
b(This)26 b(implies)h(that)g(w)n(e)f(ma)n(y)g(concen)n(trate)f(on)i
(only)f(certain)g(indices)g(in)h(our)f(p)r(erm)n(utation)g
Fx(w)300 3991 y Fw(in)i(order)e(to)i(determine)f(maxsing\()p
Fx(X)1503 4003 y Fm(w)1557 3991 y Fw(\).)37 b(W)-7 b(e)28
b(no)n(w)f(describ)r(e)h(these)f(indices)h(explicitly)-7
b(.)300 4138 y Fy(De\014nition)31 b(4.)41 b Fw(Let)300
4272 y(\(4.1\))597 b(\001\()p Fx(x;)14 b(w)r Fw(\))24
b(=)f Fk(f)p Fx(i;)14 b Fw(1)22 b Fk(\024)g Fx(i)h Fk(\024)g
Fx(n)f Fw(:)i Fk(9)j Fx(j;)14 b Fw(1)23 b Fk(\024)g Fx(j)28
b Fk(\024)22 b Fx(n;)14 b(t)2539 4287 y Fi(f)p Fm(i;j)s
Fi(g)2708 4272 y Fk(2)24 b(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\))p Fk(g)p Fx(:)300 4407 y Fw(If)28 b(\001\()p Fx(x;)14
b(w)r Fw(\))25 b(=)d Fk(f)p Fx(d)858 4419 y Fl(1)919
4407 y Fx(<)g(d)1049 4419 y Fl(2)1110 4407 y Fx(<)g Fk(\001)14
b(\001)g(\001)23 b Fx(<)g(d)1448 4419 y Fm(k)1489 4407
y Fk(g)p Fw(,)k(set)1749 4541 y Fd(e)-49 b Fx(x)23 b
Fw(=)g(\015)1950 4556 y Fl(\001\()p Fm(x;w)r Fl(\))2167
4541 y Fw(\()p Fx(x)p Fw(\))29 b(and)-2141 b(\(4.2\))1746
4671 y Fd(e)-61 b Fx(w)26 b Fw(=)d(\015)1950 4686 y Fl(\001\()p
Fm(x;w)r Fl(\))2167 4671 y Fw(\()p Fx(w)r Fw(\))p Fx(:)-2015
b Fw(\(4.3\))400 4820 y(Note)27 b(that)k Fd(e)-49 b Fx(x)28
b Fw(and)42 b Fd(e)-60 b Fx(w)30 b Fw(are)d(p)r(erm)n(utations)g(in)h
Fh(S)1919 4832 y Fm(k)1959 4820 y Fw(.)400 4920 y(W)-7
b(e)28 b(no)n(w)f(giv)n(e)f(a)h(su\016cien)n(t)h(condition)f(for)h(an)f
(index)h Fx(b)f Fw(to)g(b)r(e)h(in)g(\001\()p Fx(x;)14
b(w)r Fw(\).)300 5066 y Fy(Lemma)30 b(2.)40 b Fj(Supp)l(ose)30
b Fx(x)24 b(<)f(w)32 b Fj(and)e Fx(x)p Fw(\()p Fx(b)p
Fw(\))24 b Fk(6)p Fw(=)f Fx(w)r Fw(\()p Fx(b)p Fw(\))30
b Fj(with)g Fw(1)23 b Fk(\024)g Fx(b)f Fk(\024)h Fx(n)p
Fj(.)441 5183 y Fw(\(1\))42 b Fj(If)30 b Fx(w)r Fw(\()p
Fx(b)p Fw(\))24 b Fx(<)e(x)p Fw(\()p Fx(b)p Fw(\))31
b Fj(then)e Fk(9)h Fx(c)23 b(>)g(b)29 b Fj(with)i Fx(t)1809
5195 y Fm(b;c)1914 5183 y Fk(2)24 b(R)p Fw(\()p Fx(x;)14
b(w)r Fw(\))31 b Fj(and)g Fx(x)p Fw(\()p Fx(c)p Fw(\))24
b Fk(6)p Fw(=)e Fx(w)r Fw(\()p Fx(c)p Fw(\))p Fj(.)441
5283 y Fw(\(2\))42 b Fj(If)30 b Fx(w)r Fw(\()p Fx(b)p
Fw(\))24 b Fx(>)e(x)p Fw(\()p Fx(b)p Fw(\))31 b Fj(then)e
Fk(9)h Fx(a)23 b(<)g(b)29 b Fj(with)h Fx(t)1816 5295
y Fm(a;b)1929 5283 y Fk(2)23 b(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\))32 b Fj(and)e Fx(x)p Fw(\()p Fx(a)p Fw(\))24 b
Fk(6)p Fw(=)f Fx(w)r Fw(\()p Fx(a)p Fw(\))p Fj(.)p eop
%%Page: 6 6
6 5 bop 0 66 a Fl(6)943 b(SARA)22 b(C.)h(BILLEY)f(AND)h(GREGOR)-5
b(Y)22 b(S.)g(W)-7 b(ARRINGTON)100 266 y Fw(Lemma)27
b(2)h(tells)g(us)g(that)g(if)h Fx(x)p Fw(\()p Fx(i)p
Fw(\))24 b Fk(6)p Fw(=)g Fx(w)r Fw(\()p Fx(i)p Fw(\))29
b(then)f Fx(i)23 b Fk(2)i Fw(\001\()p Fx(x;)14 b(w)r
Fw(\).)40 b(It)28 b(turns)g(out)g(that)g(the)h(question)e(of)h(whether)
0 365 y(or)g(not)g Fx(x)h Fw(is)f(a)g(maximal)g(singular)f(p)r(oin)n(t)
i(\()p Fn(msp)p Fw(\))g(of)g Fx(X)1758 377 y Fm(w)1840
365 y Fw(dep)r(ends)g(only)f(on)g(the)h(pair)i Fd(e)-49
b Fx(x)p Fw(,)15 b Fd(e)-61 b Fx(w)s Fw(.)39 b(This)29
b(is)f(b)r(orne)g(out)0 465 y(b)n(y)f(the)h(follo)n(wing)f(three)g
(simple)h(facts:)141 590 y(\(1\))45 b Fd(e)-49 b Fx(x)23
b Fk(\024)38 b Fd(e)-61 b Fx(w)30 b Fw(if)e(and)g(only)f(if)h
Fx(x)c Fk(\024)e Fx(w)r Fw(.)141 689 y(\(2\))42 b Fx(l)r
Fw(\()p Fx(w)r Fw(\))19 b Fk(\000)f Fx(l)r Fw(\()p Fx(x)p
Fw(\))23 b(=)g Fx(l)r Fw(\()14 b Fd(e)-60 b Fx(w)r Fw(\))19
b Fk(\000)f Fx(l)r Fw(\()s Fd(e)-49 b Fx(x)p Fw(\).)141
796 y(\(3\))42 b(There)27 b(exists)g(a)g(bijection)h
Fk(R)p Fw(\()s Fd(e)-49 b Fx(x)q(;)29 b Fd(e)-61 b Fx(w)s
Fw(\))1511 749 y Fi(\030)1470 796 y Fk(\000)-14 b(!)23
b(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\).)1515 1010 y(5.)41
b Fn(The)32 b(map)g Fx(\036)2055 1022 y Fm(t)100 1159
y Fw(W)-7 b(e)31 b(ha)n(v)n(e)f(already)f(claimed)i(in)g(F)-7
b(act)32 b(1)e(that)h(maxsing)q(\()p Fx(X)1991 1171 y
Fm(w)2044 1159 y Fw(\))h(can)e(b)r(e)i(expressed)e(in)h(terms)g(of)g
Fk(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))33 b(for)0 1259 y
Fx(x)38 b Fk(\024)g Fx(w)r Fw(.)64 b(As)36 b(w)n(e)g(are)g(in)n
(terested)g(in)h(disco)n(v)n(ering)d(the)j Fj(maximal)45
b Fw(singular)36 b(p)r(oin)n(ts,)i(w)n(e)e(will)h(need)g(to)f(relate)0
1358 y Fk(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))29 b(to)f
Fk(R)p Fw(\()p Fx(y)s(;)14 b(w)r Fw(\))28 b(when)g Fx(x;)14
b(y)30 b Fw(di\013er)d(b)n(y)g(an)g(elemen)n(t)h(of)f
Fk(T)21 b Fw(.)37 b(So,)27 b(for)g(ev)n(ery)f(triple)i
Fx(y)s(t)22 b(<)h(y)j Fk(\024)c Fx(w)30 b Fw(with)e Fx(t)23
b Fk(2)h(T)d Fw(,)0 1458 y(w)n(e)k(will)h(de\014ne)f(a)g(map)g
Fx(\036)810 1418 y Fm(y)r(;w)810 1478 y(t)943 1458 y
Fw(:)e Fk(R)p Fw(\()p Fx(y)s(;)14 b(w)r Fw(\))24 b Fk(\000)-14
b(!)23 b(T)e Fw(.)37 b(The)25 b(v)-5 b(alues)25 b(of)g
Fx(y)s(;)14 b(w)28 b Fw(are)c(usually)h(clear)f(from)h(con)n(text)g
(and)g(w)n(e)0 1558 y(will)j(often)g(abbreviate)e Fx(\036)824
1518 y Fm(y)r(;w)824 1578 y(t)961 1558 y Fw(as)h Fx(\036)1112
1570 y Fm(t)1142 1558 y Fw(.)100 1657 y(W)-7 b(e)28 b(do)f(not)h(giv)n
(e)e(the)i(de\014nition)g(of)g Fx(\036)1332 1669 y Fm(t)1389
1657 y Fw(here,)f(but)h(w)n(e)g(do)f(note)g(t)n(w)n(o)g(prop)r(erties)g
(of)h(the)f(map:)141 1782 y(\(1\))42 b(If)28 b Fx(tt)432
1752 y Fi(0)478 1782 y Fw(=)23 b Fx(t)596 1752 y Fi(0)619
1782 y Fx(t)28 b Fw(then)g Fx(\036)915 1794 y Fm(t)944
1782 y Fw(\()p Fx(t)1006 1752 y Fi(0)1030 1782 y Fw(\))23
b(=)g Fx(t)1203 1752 y Fi(0)1226 1782 y Fw(.)141 1882
y(\(2\))42 b Fx(\036)338 1894 y Fm(t)363 1903 y Ff(a;b)449
1882 y Fw(\()p Fx(t)511 1897 y Fi(f)p Fm(a;c)p Fi(g)669
1882 y Fw(\))28 b(is)f(either)h Fx(t)1078 1897 y Fi(f)p
Fm(b;c)p Fi(g)1256 1882 y Fw(or)f Fx(t)1388 1897 y Fi(f)p
Fm(a;c)p Fi(g)1545 1882 y Fw(.)0 2040 y Fy(Remark)40
b(1.)45 b Fw(It)35 b(is)g(not)g(su\016cien)n(t)h(to)f(de\014ne)g
Fx(\036)1597 2052 y Fm(t)1627 2040 y Fw(\()p Fx(t)1689
2052 y Fm(b;c)1772 2040 y Fw(\))g(=)h Fx(t)1970 2055
y Fi(f)p Fm(t)p Fl(\()p Fm(b)p Fl(\))p Fm(;t)p Fl(\()p
Fm(c)p Fl(\))p Fi(g)2274 2040 y Fw(.)60 b(F)-7 b(or)34
b(example,)j(if)f Fx(y)i Fw(=)d([3)p Fx(;)14 b Fw(1)p
Fx(;)g Fw(2],)36 b(then)0 2140 y Fx(t)30 2152 y Fl(2)p
Fm(;)p Fl(3)143 2140 y Fk(2)24 b(R)p Fw(\()p Fx(y)s(;)14
b(w)r Fw(\),)28 b(but)h Fx(t)732 2152 y Fl(2)p Fm(;)p
Fl(3)845 2140 y Fk(62)23 b(R)p Fw(\()p Fx(y)s(t)1099
2152 y Fl(1)p Fm(;)p Fl(2)1190 2140 y Fx(;)14 b(w)r Fw(\).)100
2299 y(F)-7 b(or)27 b Fx(\036)298 2311 y Fm(t)355 2299
y Fw(to)g(b)r(e)h(useful,)h(w)n(e)e(will)h(need)f(the)h(follo)n(wing)f
(prop)r(ert)n(y)-7 b(.)0 2457 y Fy(Theorem)30 b(4.)41
b Fj(The)31 b(map)f Fx(\036)922 2469 y Fm(t)952 2457
y Fw(\()p Fk(R)p Fw(\()p Fx(y)s(;)14 b(w)r Fw(\)\))25
b Fx(,)-14 b Fk(!)23 b(R)p Fw(\()p Fx(y)s(t;)14 b(w)r
Fw(\))20 b Fk(n)e(f)p Fx(t)p Fk(g)28 b Fj(is)j(inje)l(ctive.)100
2615 y Fw(The)c(ab)r(o)n(v)n(e)g(theorem)g(has)g(as)g(a)g(simple)h
(corollary)d(a)i(sp)r(ecial)g(case)g(of)g(Deo)r(dhar's)g(conjecture)g
([5].)0 2774 y Fy(Corollary)33 b(5.)41 b Fw(#)p Fk(R)p
Fw(\()p Fx(y)s(;)14 b(w)r Fw(\))24 b Fk(\025)f Fx(l)r
Fw(\()p Fx(w)r Fw(\))c Fk(\000)f Fx(l)r Fw(\()p Fx(y)s
Fw(\))p Fj(.)100 2932 y Fw(V)-7 b(arious)26 b(forms)h(and)g
(generalizations)e(of)j(the)f(preceding)g(corollary)e(ha)n(v)n(e)h(b)r
(een)i(pro)n(v)n(en)e(b)n(y)h(Dy)n(er)g([6)o(])h(\(arbi-)0
3031 y(trary)i(Co)n(xeter)g(systems\),)i(Deo)r(dhar)e([5])h(\(t)n(yp)r
(e)h(A\),)g(P)n(olo)e([12)o(])h(\(\014nite)h(W)-7 b(eyl)31
b(groups\))g(and)g(Carrell-P)n(eterson)0 3131 y([2])c
(\(crystallographic)e(pro)r(ofs\).)100 3231 y(The)h(map)g
Fx(\036)501 3243 y Fm(t)558 3231 y Fw(can)g(also)f(b)r(e)i(used)f(to)h
(giv)n(e)e(a)h(simple)h(pro)r(of)f(of)g(the)h(follo)n(wing)e(w)n
(ell-kno)n(wn)g(fact)i(\([1,)f(8.2.10]\).)0 3389 y Fy(Theorem)36
b(6.)44 b Fj(If)35 b Fx(x)d Fk(\024)f Fx(w)37 b Fj(is)e(an)41
b Fn(msp)p Fj(,)36 b Fx(s;)14 b(s)1439 3359 y Fi(0)1496
3389 y Fj(any)35 b(simple)g(r)l(e\015e)l(ctions,)h(then)f
Fx(sw)f(<)d(w)37 b Fj(and)e Fx(w)r(s)3130 3359 y Fi(0)3185
3389 y Fx(<)c(w)37 b Fj(imply,)0 3489 y(r)l(esp)l(e)l(ctively,)31
b(that)f Fx(sx)23 b(<)g(x)30 b Fj(and)h Fx(xs)1151 3458
y Fi(0)1197 3489 y Fx(<)23 b(x)p Fj(.)1010 3702 y Fw(6.)41
b Fn(Str)n(ucture)31 b(of)h(Pr)n(oof)f(of)h(Theorem)f(1)100
3852 y Fw(The)c(\014rst)h(step)f(is)h(to)f(pro)n(v)n(e)f(the)i(follo)n
(wing)f(fact.)0 4010 y Fy(Lemma)j(3.)40 b Fj(L)l(et)30
b Fx(x)23 b(<)g(w)i Fk(2)f Fh(S)988 4022 y Fm(n)1063
4010 y Fj(b)l(e)29 b(an)37 b Fn(msp)p Fj(.)i(If)30 b
Fx(t)23 b Fk(2)g(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))32
b Fj(then)d Fx(l)r Fw(\()p Fx(xt)p Fw(\))24 b(=)f Fx(l)r
Fw(\()p Fx(x)p Fw(\))18 b(+)g(1)p Fj(.)100 4168 y Fw(Recall)i(that)k
Fd(e)-49 b Fx(x)21 b Fw(and)35 b Fd(e)-61 b Fx(w)24 b
Fw(are)19 b(the)i(restrictions)e(of)i Fx(x)g Fw(and)f
Fx(w)k Fw(to)c(those)g(p)r(ositions)h(that)f(a\013ect)h(the)g(comp)r
(osition)f(of)0 4268 y Fk(R)p Fw(\()p Fx(x;)14 b(w)r
Fw(\).)38 b(In)24 b(order)e(to)i(determine)f(the)i(structure)e(of)g
(maxsing)q(\()p Fx(X)2117 4280 y Fm(w)2170 4268 y Fw(\),)i(w)n(e)f
(then)g(pro)n(v)n(e)e(the)i(follo)n(wing)f(necessary)0
4367 y(conditions)k(on)j Fd(e)-49 b Fx(x)29 b Fw(for)e(an)n(y)h
Fn(msp)g Fx(x)g Fw(of)f Fx(X)1285 4379 y Fm(w)1339 4367
y Fw(:)0 4526 y Fy(Lemma)j(4.)40 b Fj(If)30 b Fx(x)24
b(<)f(w)32 b Fj(is)e(an)36 b Fn(msp)p Fj(,)31 b(then)h
Fd(e)-49 b Fx(x)30 b Fj(is)h(231-,)g(312-)f(and)h(1234-avoiding.)100
4684 y Fw(Com)n(bining)c(Lemma)g(4)g(and)h(Lemma)f(3,)g(w)n(e)g(see)h
(that)g(if)g Fx(x)23 b Fk(2)h Fw(maxsing\()p Fx(X)2499
4696 y Fm(w)2552 4684 y Fw(\),)29 b(then)0 4834 y(\(6.1\))677
b Fd(e)-49 b Fx(x)24 b Fw(=)f([)p Fx(k)s(;)14 b(:)g(:)g(:)f(;)h
Fw(1)p Fx(;)g(k)21 b Fw(+)d Fx(l)r(;)c(:)g(:)g(:)f(;)h(k)21
b Fw(+)d(1)p Fx(;)c(k)21 b Fw(+)d Fx(l)h Fw(+)f Fx(m;)c(:)g(:)g(:)g(k)
21 b Fw(+)d Fx(l)i Fw(+)e(1])0 4984 y(for)34 b(some)g
Fx(k)s(;)14 b(l)r(;)g(m)34 b Fk(\025)g Fw(0.)57 b(If)35
b(t)n(w)n(o)f(out)g(of)h(three)f(of)h Fx(k)s(;)14 b(l)r(;)g(m)33
b Fw(are)h(0,)i(then)i Fd(e)-49 b Fx(x)35 b Fw(is)f(strictly)g
(decreasing,)h(so)f Fx(x)h Fk(\024)f Fx(w)0 5083 y Fw(implies)e(that)f
Fx(x)f Fw(=)f Fx(w)r Fw(.)49 b(But)31 b(then)h Fx(x)g
Fw(cannot)f(p)r(ossibly)g(b)r(e)h(an)f Fn(msp)p Fw(.)48
b(With)33 b(some)d(w)n(ork,)h(one)g(can)g(sho)n(w)g(that)0
5183 y(the)f(cases)e(of)h Fx(k)s(;)14 b(l)r(;)g(m)24
b(>)h Fw(0)k(and)g Fx(k)s(;)14 b(l)27 b(>)e Fw(0)p Fx(;)14
b(m)25 b Fw(=)g(0)k(can)f(b)r(oth)i(o)r(ccur)e(as)h(elemen)n(ts)g(of)g
(maxsing\()p Fx(X)3099 5195 y Fm(w)3153 5183 y Fw(\).)42
b(With)30 b(this)0 5283 y(in)e(mind,)g(w)n(e)f(mak)n(e)g(the)h(follo)n
(wing)f(de\014nitions:)p eop
%%Page: 7 7
7 6 bop 997 66 a Fl(MAXIMAL)28 b(SINGULAR)i(LOCI)f(OF)g(SCHUBER)-5
b(T)29 b(V)-7 b(ARIETIES)29 b(IN)g Fm(S)s(L)p Fl(\()p
Fm(n)p Fl(\))p Fm(=B)666 b Fl(7)300 266 y Fy(De\014nition)31
b(5.)300 365 y Fw(F)-7 b(or)27 b Fx(k)s(;)14 b(m)23 b
Fk(\025)f Fw(2,)28 b(de\014ne)1281 500 y Fx(x)1328 512
y Fm(k)q(;m)1471 500 y Fw(=)23 b([)p Fx(k)s(;)14 b(:)g(:)g(:)g(;)g
Fw(1)p Fx(;)g(k)20 b Fw(+)e Fx(m;)c(:)g(:)g(:)g(;)g(k)21
b Fw(+)d(1])p Fx(;)-2231 b Fw(\(6.2\))1269 629 y Fx(w)1328
641 y Fm(k)q(;m)1471 629 y Fw(=)23 b([)p Fx(k)e Fw(+)d
Fx(m;)c(k)s(;)g(:)g(:)g(:)g(;)g Fw(2)p Fx(;)g(k)20 b
Fw(+)e Fx(m)h Fk(\000)f Fw(1)p Fx(;)c(:)g(:)g(:)f(;)h(k)21
b Fw(+)d(1])p Fx(:)-2631 b Fw(\(6.3\))300 764 y(F)-7
b(or)27 b Fx(k)s(;)14 b(m)23 b Fk(\025)f Fw(1)27 b(and)h
Fx(l)c Fk(\025)f Fw(2,)k(de\014ne)1041 899 y Fx(x)1088
911 y Fm(k)q(;l;m)1272 899 y Fw(=)c([)p Fx(k)s(;)14 b(:)g(:)g(:)f(;)h
Fw(1)p Fx(;)g(k)21 b Fw(+)d Fx(l)r(;)c(:)g(:)g(:)f(;)h(k)21
b Fw(+)d(1)p Fx(;)c(k)21 b Fw(+)d Fx(l)i Fw(+)e Fx(m;)c(:)g(:)g(:)f(;)h
(k)21 b Fw(+)d Fx(l)i Fw(+)e(1])p Fx(;)-2871 b Fw(\(6.4\))1029
1028 y Fx(w)1088 1040 y Fm(k)q(;l;m)1272 1028 y Fw(=)23
b([)p Fx(k)e Fw(+)d Fx(l)r(;)c(k)s(;)g(:)g(:)g(:)f(;)h
Fw(2)p Fx(;)g(k)20 b Fw(+)e Fx(l)i Fw(+)e Fx(m;)c(k)21
b Fw(+)d Fx(l)i Fk(\000)e Fw(1)p Fx(;)c(:)g(:)g(:)f(;)h(k)22
b Fw(+)c(2)p Fx(;)1581 1158 y Fw(1)p Fx(;)c(k)21 b Fw(+)d
Fx(l)i Fw(+)e Fx(m)g Fk(\000)g Fw(1)p Fx(;)c(:)g(:)g(:)f(;)h(k)21
b Fw(+)d Fx(l)i Fw(+)e(1)p Fx(;)c(k)21 b Fw(+)d(1])p
Fx(:)300 1100 y Fw(\(6.5\))400 1302 y(W)-7 b(e)28 b(are)e(then)i(able)g
(to)f(rephrase)f(Theorem)h(1)g(in)h(the)g(follo)n(wing)e(w)n(a)n(y:)300
1447 y Fy(Theorem)k(7.)41 b Fx(x)30 b Fj(is)g(an)37 b
Fn(msp)30 b Fj(of)g Fx(X)1455 1459 y Fm(w)1538 1447 y
Fj(if)h(and)f(only)h(if)441 1564 y Fw(\(1\))42 b Fx(t)23
b Fk(2)g(R)p Fw(\()p Fx(x;)14 b(w)r Fw(\))32 b Fj(implies)f
Fx(l)r Fw(\()p Fx(xt)p Fw(\))24 b(=)e Fx(l)r Fw(\()p
Fx(x)p Fw(\))d(+)f(1)p Fj(.)441 1664 y Fw(\(2\))69 b(\(a\))42
b Fj(F)-6 b(or)30 b(some)g Fx(k)s(;)14 b(m)23 b Fk(\025)f
Fw(2)p Fj(,)30 b(we)g(have)k Fd(e)-49 b Fx(x)24 b Fw(=)e
Fx(x)2013 1676 y Fm(k)q(;m)2163 1664 y Fj(and)45 b Fd(e)-61
b Fx(w)26 b Fw(=)d Fx(w)2556 1676 y Fm(k)q(;m)764 1763
y Fj(or)612 1863 y Fw(\(b\))42 b Fj(F)-6 b(or)30 b(some)g
Fx(k)s(;)14 b(m)23 b Fk(\025)f Fw(1)p Fj(,)30 b Fx(l)25
b Fw(=)d(2)29 b Fj(or)i Fx(k)25 b Fw(=)e Fx(m)g Fw(=)g(1)p
Fx(;)14 b(l)24 b Fk(\025)e Fw(2)p Fj(,)30 b(we)g(have)k
Fd(e)-49 b Fx(x)23 b Fw(=)g Fx(x)2981 1875 y Fm(k)q(;l;m)3172
1863 y Fj(and)45 b Fd(e)-61 b Fx(w)26 b Fw(=)c Fx(w)3564
1875 y Fm(k)q(;l;m)3725 1863 y Fj(.)400 2007 y Fw(T)-7
b(o)25 b(\014nish)h(the)g(pro)r(of)f(of)h(Theorem)f(1,)h(one)f(sho)n
(ws)g(that)h(the)g(forms)f(w)n(e)h(ha)n(v)n(e)e(disco)n(v)n(ered)g(for)
29 b Fd(e)-49 b Fx(x)26 b Fw(in)g(Lemma)f(4)300 2107
y(are)34 b(su\016cien)n(t)i(to)f(sho)n(w)g(that)h(these)f(p)r(oin)n(ts)
h(corresp)r(ond)d(to)j Fn(msp)p Fw('s)f(in)h(the)g(appropriate)e(Sc)n
(h)n(ub)r(ert)h(v)-5 b(ariet)n(y)e(.)300 2206 y(This)28
b(task)f(consists)f(of)i(t)n(w)n(o)f(elemen)n(tary)f(steps)i(whic)n(h)f
(w)n(e)h(omit:)441 2324 y(\(1\))42 b(Sho)n(w)27 b(that)h(the)g(p)r(oin)
n(ts)f Fx(x)h Fw(are)f(singular)f(p)r(oin)n(ts.)441 2423
y(\(2\))42 b(Sho)n(w)27 b(that)h(an)n(y)f(co)n(v)n(er)e(of)j
Fx(x)g Fw(that)g(is)f(still)h(b)r(elo)n(w)f Fx(w)k Fw(is)c(a)g(smo)r
(oth)h(p)r(oin)n(t.)300 2568 y Fy(Remark)34 b(2.)43 b
Fw(The)31 b(cardinalit)n(y)e(of)i(the)g(set)g(maxsing\()p
Fx(X)2153 2580 y Fm(w)2207 2568 y Fw(\))g(for)f Fx(w)h
Fk(2)d Fh(S)2642 2580 y Fm(n)2718 2568 y Fw(ma)n(y)i(b)r(e)h
Fx(O)r Fw(\()p Fx(n)3164 2537 y Fl(4)3202 2568 y Fw(\).)47
b(This)30 b(is)h(the)g(case,)300 2667 y(for)c(example,)g(when)h
Fx(n)23 b Fw(=)g(2)p Fx(k)30 b Fw(and)300 2802 y(\(6.6\))1124
b Fx(w)25 b Fw(=)e([)p Fx(k)e Fw(+)d(1)p Fx(;)c(:)g(:)g(:)f(;)h
Fw(2)p Fx(k)s(;)g Fw(1)p Fx(;)g(:)g(:)g(:)f(;)h(k)s Fw(])p
Fx(:)300 2960 y Fw(Then)28 b(#)14 b(maxsing\()p Fx(X)1000
2972 y Fm(w)1054 2960 y Fw(\))23 b(=)1197 2892 y Fd(\000)1235
2923 y Fm(k)1237 2988 y Fl(2)1271 2892 y Fd(\001)1310
2903 y Fl(2)1347 2960 y Fw(.)828 3129 y(7.)41 b Fn(Kazhd)n(an-Lusztig)
31 b(pol)-6 b(ynomials)31 b(a)-6 b(t)32 b(elements)g(of)f
Fw(maxsing\()p Fx(X)3285 3141 y Fm(w)3339 3129 y Fw(\))400
3279 y(The)i(set)g(\001\()p Fx(x;)14 b(w)r Fw(\))34 b(a\013ords)e(us)h
(the)g(opp)r(ortunit)n(y)g(to)f(reduce)h(the)g(computation)g(of)g(the)g
(Kazhdan-Lusztig)300 3378 y(p)r(olynomial)27 b(asso)r(ciated)f(to)i(a)f
(certain)g(pair)g(of)g(p)r(erm)n(utations)g(to)h(a)f(pair)g(of)g
(simpler)h(p)r(erm)n(utations:)300 3523 y Fy(Theorem)i(8.)41
b Fx(P)874 3535 y Fm(x;w)1009 3523 y Fw(=)22 b Fx(P)1151
3536 y Fc(e)-40 b Fm(x;)11 b Fc(e)-49 b Fm(w)1261 3523
y Fj(.)400 3667 y Fw(This)29 b(theorem)f(enables)g(us)h(to)g(easily)f
(calculate)h Fx(P)2049 3679 y Fm(x;w)2189 3667 y Fw(for)f
Fx(x)e Fk(2)g Fw(maxsing\()p Fx(X)2871 3679 y Fm(w)2925
3667 y Fw(\).)41 b(There)29 b(are)f(three)g(cases)g(to)300
3767 y(consider,)h(dep)r(ending)h(on)g(the)g(t)n(yp)r(e)g(of)g
(singularit)n(y)-7 b(.)42 b(Note)30 b(that)g(as)f(one)g(mo)n(v)n(es)g
(do)n(wn)g(in)h(the)g(Bruhat)f(order,)300 3866 y(the)f(\014rst)f
(non-trivial)g Fx(P)1076 3878 y Fm(x;w)1215 3866 y Fw(one)g(encoun)n
(ters)g(is)g(of)h(the)g(form)1388 4008 y(1)18 b(+)g Fx(q)1571
3974 y Fm(k)1778 4008 y Fw(or)193 b(1)18 b(+)g Fx(q)k
Fw(+)c Fx(q)2371 3974 y Fl(2)2426 4008 y Fw(+)g Fk(\001)c(\001)g(\001)
19 b Fw(+)f Fx(q)2748 3974 y Fm(k)2789 4008 y Fx(:)300
4152 y Fy(Theorem)30 b(9.)41 b Fj(The)31 b(Kazhdan-Lusztig)f(p)l
(olynomials)i(for)f Fx(x)23 b Fk(2)h Fw(maxsing\()p Fx(X)2754
4164 y Fm(w)2808 4152 y Fw(\))30 b Fj(ar)l(e)g(as)g(fol)t(lows.)441
4269 y Fw(\(1\))42 b Fj(4231-typ)l(e)31 b(singularities:)589
4369 y(If)i Fd(e)-49 b Fx(u)22 b Fw(=)h Fx(x)881 4381
y Fm(k)q(;m)1031 4369 y Fj(and)31 b Fd(e)-47 b Fx(v)26
b Fw(=)d Fx(w)1405 4381 y Fm(k)q(;m)1555 4369 y Fj(for)30
b Fx(k)s(;)14 b(m)23 b Fk(\025)f Fw(2)p Fj(,)30 b(then)1339
4514 y Fx(P)1392 4526 y Fm(u;v)1514 4514 y Fw(=)22 b
Fx(P)1657 4527 y Fc(e)-41 b Fm(u)q(;)q Fc(e)i Fm(v)1776
4514 y Fw(=)23 b(1)18 b(+)g Fx(q)j Fw(+)d Fk(\001)c(\001)g(\001)19
b Fw(+)f Fx(q)2387 4479 y Fl(min)o(\()p Fm(k)q Fi(\000)p
Fl(1)p Fm(;m)p Fi(\000)p Fl(1\))2838 4514 y Fx(:)441
4648 y Fw(\(2\))42 b Fj(3412-typ)l(e)31 b(singularities:)589
4748 y(If)i Fd(e)-49 b Fx(u)22 b Fw(=)h Fx(x)881 4760
y Fm(k)q(;)p Fl(2)p Fm(;m)1084 4748 y Fj(and)31 b Fd(e)-47
b Fx(v)26 b Fw(=)d Fx(w)1458 4760 y Fm(k)q(;)p Fl(2)p
Fm(;m)1660 4748 y Fj(with)31 b Fx(k)s(;)14 b(m)22 b Fk(\025)h
Fw(1)p Fj(,)30 b(then)1735 4882 y Fx(P)1788 4894 y Fm(u;v)1909
4882 y Fw(=)23 b Fx(P)2053 4895 y Fc(e)-41 b Fm(u)q(;)q
Fc(e)i Fm(v)2172 4882 y Fw(=)22 b(1)c(+)g Fx(q)s(:)441
5017 y Fw(\(3\))42 b Fj(45312-typ)l(e)32 b(singularities:)589
5116 y(If)h Fd(e)-49 b Fx(u)22 b Fw(=)h Fx(x)881 5128
y Fl(1)p Fm(;l;)p Fl(1)1042 5116 y Fj(and)31 b Fd(e)-46
b Fx(v)26 b Fw(=)d Fx(w)1417 5128 y Fl(1)p Fm(;l;)p Fl(1)1578
5116 y Fj(with)30 b Fx(l)25 b Fk(\025)d Fw(2)p Fj(,)30
b(then)1679 5258 y Fx(P)1732 5270 y Fm(u;v)1854 5258
y Fw(=)23 b Fx(P)1998 5271 y Fc(e)-41 b Fm(u;)q Fc(e)i
Fm(v)2117 5258 y Fw(=)22 b(1)c(+)g Fx(q)2387 5224 y Fm(l)p
Fi(\000)p Fl(1)2498 5258 y Fx(:)p eop
%%Page: 8 8
8 7 bop 0 66 a Fl(8)943 b(SARA)22 b(C.)h(BILLEY)f(AND)h(GREGOR)-5
b(Y)22 b(S.)g(W)-7 b(ARRINGTON)1019 266 y Fw(8.)41 b
Fn(Examples)31 b(calcula)-6 b(ting)31 b Fw(maxsing\()p
Fx(X)2495 278 y Fm(w)2549 266 y Fw(\))0 415 y Fy(Example)40
b(1.)46 b Fw(Using)36 b(Theorem)f(1,)j(in)e(Figure)g(5)g(w)n(e)f
(compute)i(the)f(singular)f(lo)r(cus)h(maxsing\()p Fx(X)3252
427 y Fm(w)3306 415 y Fw(\))g(of)g Fx(X)3546 427 y Fm(w)0
515 y Fw(where)27 b Fx(w)f Fw(=)c([6)p Fx(;)14 b Fw(8)p
Fx(;)g Fw(4)p Fx(;)g Fw(7)p Fx(;)g Fw(5)p Fx(;)g Fw(3)p
Fx(;)g Fw(1)p Fx(;)g Fw(2].)600 3060 y
 currentpoint currentpoint translate .4 .4 scale neg exch neg exch
translate
 600 3060 a @beginspecial
0 @llx 0 @lly 720 @urx 720 @ury 7200 @rwi @setspecial
%%BeginDocument: example.eps
%!PS-Adobe-2.0
%%Pages: 1
%%PageOrder: Ascend
%%Title: Image example
%%BoundingBox: 0 0 720 720
%%EndComments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% BEGIN COMMANDS

% arc's correspond to reflections we are interested in
% light shaded rectangle indicates dxw >= 1 there
% dark shaded rectangle indicates dxw >= 2 there
% gray circles indicate position of elts of x
clear

/inch {36 mul} def		% for sizing
/ooinch {1 36 div mul} def	% for sizing
/xdef {exch def} def		% reverse of def
/lo .85 def			% dxw >= 1 regions
/lt .55 def			% dxw >= 2 regions
/dk .15 def			% for other purposes
/ptgr .5 def			% gray level for pts
/ptrad 5 def			% radius of pts
/ztild 0.05 def			% generic inset
/zlw 2 def			% generic line with for outlbox
/laboff 0.25 def		% offset for markrows labels
/xoff 0 def			% offset for region labels
/yoff 7.5 def			% offset for region labels
/fsize 18 def			% fontsize

/settime {/Times-Italic findfont 24 scalefont setfont} def
/setsmtime {/Times-Italic findfont 14 scalefont setfont} def
/setsymb {/Symbol findfont 20 scalefont setfont} def
/getchar {st ind 1 getinterval /cur xdef ind 1 add /ind xdef} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% labels 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% since sometimes we need to change fonts in the middle,
% we need to calculate string width one character at a time
% stack: st - string
% returns width
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/getstrwid {
  gsave
  /st xdef 
  st length /len xdef
  /ind 0 def
  /mywid 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) eq 
	    {getchar cur setsymb
    	     stringwidth pop mywid add /mywid xdef}
	    {cur (') eq {} {cur settime
	     stringwidth pop mywid add /mywid xdef} ifelse
	    } ifelse 1 pop} loop
  grestore
  mywid
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print characters in string in either greek or roman
% assumes currentpoint is correct
% stack: st - string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/showlab {
  gsave
  /st xdef 
  st length /len xdef
  settime
%  st stringwidth pop /mywid xdef
  st getstrwid /mywid xdef
  -1 mywid mul 0 rmoveto
  /ind 0 def
  { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop
%	ifelse
%        cur (;) eq {getchar cur setsymb}
%                   {cur (_) eq 
%		     {getchar cur gsave setsmtime 0 .1 inch rmoveto} 

%cur settime} ifelse show} loop
%        cur (;) eq {getchar cur setsymb}
%                   {cur settime} ifelse show} loop
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% label rows along left side
% stack: array with labels and y coord.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/markrows {
  dup length 2 idiv /num xdef	% num of points we have to print
  gsave
   aload pop % place elts of array on stack
   /tyv xdef % read off y coord.
   num {laboff inch tyv abs inch yoff add moveto % set position
        gsave
	    1 -1 scale	% print string rightside up
	    showlab	% print some chars in greek if necessary
	grestore
	count 1 ge {/tyv xdef} if	
       } repeat 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for printing a label inside a region
% stack: x,y
%	 string
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/namereg {
  gsave
    /ty xdef
    /tx xdef
    /st xdef
    st length /len xdef
    settime
    st getstrwid /mywid xdef
%    st stringwidth pop /mywid xdef % get width of string
    tx inch mywid 2 div sub xoff sub ty inch yoff add moveto
    /ind 0 def
    gsave
	1 -1 scale % print rightside up
       { ind len 1 sub gt {exit} if getchar 
        cur (;) ne cur (_) ne and 
	  {cur settime show} 
	  {cur (;) eq {getchar cur setsymb show}
	              {getchar cur 
			setsmtime 0 inch -.15 inch rmoveto show
		       0 inch .15 inch rmoveto} ifelse} 
		       ifelse} loop


%        cur (;) eq {getchar cur setsymb}
%              {cur settime} ifelse show} loop

%	st	   % put string on stack
%	settime    % make sure we're using non-greek font
%	show
    grestore 
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arrows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for putting vertical arrows in diagram.
% currently only point down
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/arrow {
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     vx inch vy 1 sub inch translate
     newpath
     2 setlinewidth
     0 0 moveto
     0 1 inch lineto
     0 1 inch translate
     -.2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     .2 inch -.2 inch moveto
     0 0 0 2 inch .4 inch arct
     stroke
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print filled circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circ {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
} def                     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ellipses for points
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/smcircs {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     0 setgray
     newpath
     vx .25 add inch vy .25 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .5 add inch vy .5 sub inch vrad 3 div 0 360 arc
     fill
     newpath
     vx .75 add inch vy .75 sub inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print outline of circle with specified gray level
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/circoutline {
   /vgr xdef
   /vrad xdef
   /vy  xdef
   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
   grestore
} def                                                                      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print circle with dot in the center
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/capitol {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   gsave        % changing graylevel
     newpath
     1 setgray
     vx inch vy inch vrad 0 360 arc
     fill
   grestore
   gsave        % changing graylevel
     newpath
     0 setgray
     vx inch vy inch vrad 0 360 arc
     stroke
     newpath
     vx inch vy inch vrad 3 div 0 360 arc
     fill
   grestore
} def                                 
                                   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print square
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/squ {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
  false vx triamt sub 
        vy triamt add 
	vx triamt add 
	vy triamt sub 0 2 [] outlbox
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print diamond
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/diam {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul 3 div def
   gsave
     vx inch vy inch translate
     45 rotate
    false 0 0 triamt 2 mul triamt 2 mul 0 2 [] outlbox
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print triangle
% stack: gray level
% 	 radius
% 	 x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/trian {
   /vgr xdef   /vrad xdef   /vy  xdef   /vx  xdef
   /triamt vrad ooinch 2 mul def
   gsave
     vx inch vy inch translate
     newpath
     1 setlinejoin
     2 setlinewidth
     -1 triamt mul 2 div inch triamt 2.2 div inch moveto
     triamt 2 div inch triamt -.86 mul inch rlineto
     triamt 2 div inch triamt .86 mul inch rlineto
     closepath
     stroke
   grestore
} def                                                                 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% print out points where desired
% stack: array of x,y coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% points of x
% filled circles
/genpts {
  dup length 2 idiv /num xdef	% num of points we have to print
  aload pop   			% put all the points on the stack
  num {ptpr} repeat % display all of them
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/box {
  /byt xdef
  /bxt xdef
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/outlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty txt tyt box
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt swinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/swtinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin add /mmty xdef
  obin sub /mmtx xdef  
  obin add /mty xdef
  obin sub /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt swtinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/neinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mtx mty txt tyt neinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws a box starting a NW corner
%doesn't fill or stroke
%doesn't gsave
%used by outlbox & grect
%stack: bottom right coords
% 	upper left coords
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinbox {
  /byt xdef
  /bxt xdef
  /bym xdef
  /bxm xdef	
  /bymm xdef
  /bxmm xdef	
  /by xdef
  /bx xdef  
  newpath
  bx inch by inch moveto
  bx inch bym inch lineto
  bxm inch bym inch lineto
  bxm inch bymm inch lineto
  bxmm inch bymm inch lineto
  bxmm inch byt inch lineto
  bxt inch byt inch lineto
  bxt inch by inch lineto
  closepath
} def	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws outline of box starting at NW corner
%uses specified dash style and thickness and inset
%stack: bottom right coords
% 	upper left coords
% 	label boolean
%	label string if boolean = true
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/netinlbox {
  /obds xdef
  /obth xdef
  /obin xdef
  obin sub /mmty xdef
  obin add /mmtx xdef  
  obin sub /mty xdef
  obin add /mtx xdef  
  obin sub /tyt xdef
  obin sub /txt xdef
  obin add /ty xdef
  obin add /tx xdef  
  /nr xdef
  gsave
    tx ty mmtx mmty mtx mty txt tyt netinbox
    0 setgray
    obds 0 setdash
    obth setlinewidth
    stroke
  grestore
%  nr {tx txt add 2 div ty tyt add 2 div namereg} if
  nr {tx txt tx sub 2 div add ty tyt ty sub 2 div add namereg} if
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%draws un-bordered box starting at NW corner
%stack: SE x,y
% 	NW x,y
% 	gray level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/grect {
  /uyt xdef
  /uxt xdef
  /uy xdef
  /ux xdef  
  /gr xdef
  gsave
    ux uy uxt uyt box
    gsave
      gr setgray
      fill
    grestore
  grestore
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% interpolate for various types of arc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/uparc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 4 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 4 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

/dnarc {
  /ly3 xdef  /lx3 xdef  /ly0 xdef  /lx0 xdef

  lx0 lx3 add 2 div /x1 xdef
  lx3 lx0 sub 1 mul 5 div lx0 add /x2 xdef
  ly0 ly3 sub 1 mul 5 div ly3 add /y1 xdef
  ly0 ly3 add 2 div /y2 xdef
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generic arc routine
% stack: up boolean
%	 dash pattern
%	 SE x,y
%        NW x,y
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/genarc {
  /arcda xdef	% dash style
  /arcup xdef	% go up?
  /y3 xdef  /x3 xdef  /y0 xdef  /x0 xdef
  arcup true eq {x0 y0 x3 y3 uparc} {x0 y0 x3 y3 dnarc} ifelse
  gsave
    newpath
    x0 inch y0 inch moveto
    arcda 0 setdash
    x1 inch y1 inch x2 inch y2 inch x3 inch y3 inch curveto 
    stroke
  grestore   
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% points of x - filled gray circles
/xpts {/ptpr {ptrad ptgr circ} def genpts} def 

% points of w - outlined circles
/wpts {/ptpr {ptrad ptgr circoutline} def genpts} def 

% points of x & w - dotted/outlined circles
/xwpts {/ptpr {ptrad ptgr capitol} def genpts} def 

% other points - square
/otherpts {/ptpr {ptrad ptgr squ} def genpts} def 

% other points - diamonds
/diampts {/ptpr {ptrad ptgr diam} def genpts} def 

% other points - triangles
/trianpts {/ptpr {ptrad ptgr trian} def genpts} def 

% ellipses
/smpts {/ptpr {ptrad ptgr smcircs} def genpts} def 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arcs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% arc that is in rxw
/rxwarc {true [] genarc} def

% arc that is in ryw
/rywarc {true [10 10] genarc} def  

% arc t such that y = xt
/xtarc {false [3 3] genarc} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% regions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for identifying a region
/identreg {ztild 1 [2 2] outlbox} def

% for identifying a region
/swidentreg {ztild 1 [2 2] swinlbox} def

% for identifying a region
/stireg {ztild 1 [2 2] swtinlbox} def

% for identifying a region
/neidentreg {ztild 1 [2 2] neinlbox} def

% for identifying a region
/ntireg {ztild 1 [2 2] netinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for marking a region as attaining minimal value of dxw
/minreg {ztild 2 [] outlbox} def

% for identifying a region
/swminreg {ztild 2 [] swinlbox} def

% for identifying a region
/neminreg {ztild 2 [] neinlbox} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% draws a filled gray rectangle of specified gray level
% also puts xpts at NW and SE
/ptsgrect {
  /tyt xdef  /txt xdef  /ty xdef  /tx xdef
  tx ty txt tyt grect
  [tx ty txt tyt] xpts
} def

% END COMMANDS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% x: 
gsave
1 inch 20 inch translate
1 -1 scale
%
gsave
lo 4 1 6 5 grect
lo 3 3 5 6 grect
[6 1 4 3 5 5 3 6] wpts
[4 1 3 3 6 5 5 6] xpts
[8 2 7 4 1 7 2 8] xwpts
((1) x = [4,8,3,7,6,5,1,2]) 4.5 9 namereg
[(1) 1 (2) 2 (3) 3 (4) 4 (5) 5 (6) 6 (7) 7 (8) 8] markrows
grestore

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
10 inch 0 inch translate
%
gsave
lo 4 2 8 4 grect
lo 3 3 7 5 grect
lo 3 3 5 6 grect
[8 2 4 3 7 4 5 5 3 6] wpts
[4 2 3 3 8 4 7 5 5 6] xpts
[6 1 1 7 2 8] xwpts
((2) x = [6,4,3,8,7,5,1,2]) 4.5 9 namereg
[(1) 1 (2) 2 (3) 3 (4) 4 (5) 5 (6) 6 (7) 7 (8) 8] markrows
grestore

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
-10 inch 10 inch translate
%
gsave
lo 4 1 6 3 grect
lo 5 3 7 5 grect
lo 6 2 8 4 grect
[6 1 8 2 4 3 7 4 5 5] wpts
[4 1 6 2 5 3 8 4 7 5] xpts
[3 6 1 7 2 8] xwpts
((3) x = [4,6,5,8,7,3,1,2]) 4.5 9 namereg
[(1) 1 (2) 2 (3) 3 (4) 4 (5) 5 (6) 6 (7) 7 (8) 8] markrows
grestore

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
10 inch 0 inch translate
%
gsave
lo 1 3 4 7 grect
lo 2 7 5 8 grect
lo 4 5 5 8 grect
[4 3 5 5 1 7 2 8] wpts
[1 3 4 5 2 7 5 8] xpts
[6 1 8 2 7 4 3 6] xwpts
((4) x = [6,8,1,7,4,3,2,5]) 4.5 9 namereg
[(1) 1 (2) 2 (3) 3 (4) 4 (5) 5 (6) 6 (7) 7 (8) 8] markrows
grestore
grestore


%%EndDocument
 @endspecial 600 3060 a
 currentpoint currentpoint translate 1 .4 div 1 .4 div scale neg exch
neg exch translate
 600 3060 a 1619 3259 a Fn(Figure)32
b(5)0 3516 y Fy(Example)e(2.)41 b Fw(F)-7 b(or)27 b Fx(w)f
Fw(=)c([6)p Fx(;)14 b Fw(4)p Fx(;)g Fw(5)p Fx(;)g Fw(1)p
Fx(;)g Fw(2)p Fx(;)g Fw(3],)671 3656 y(maxsing\()p Fx(X)1071
3668 y Fm(w)1125 3656 y Fw(\))24 b(=)e Fk(f)p Fw([4)p
Fx(;)14 b Fw(1)p Fx(;)g Fw(6)p Fx(;)g Fw(5)p Fx(;)g Fw(2)p
Fx(;)g Fw(3])p Fx(;)38 b Fw([4)p Fx(;)14 b Fw(2)p Fx(;)g
Fw(6)p Fx(;)g Fw(1)p Fx(;)g Fw(5)p Fx(;)g Fw(3])p Fx(;)38
b Fw([4)p Fx(;)14 b Fw(3)p Fx(;)g Fw(6)p Fx(;)g Fw(1)p
Fx(;)g Fw(2)p Fx(;)g Fw(5])p Fx(;)984 3785 y Fw([6)p
Fx(;)g Fw(1)p Fx(;)g Fw(4)p Fx(;)g Fw(2)p Fx(;)g Fw(5)p
Fx(;)g Fw(3])p Fx(;)38 b Fw([6)p Fx(;)14 b Fw(1)p Fx(;)g
Fw(4)p Fx(;)g Fw(3)p Fx(;)g Fw(2)p Fx(;)g Fw(5])p Fx(;)38
b Fw([6)p Fx(;)14 b Fw(2)p Fx(;)g Fw(4)p Fx(;)g Fw(1)p
Fx(;)g Fw(3)p Fx(;)g Fw(5])p Fk(g)p Fx(:)0 3938 y Fy(Example)30
b(3.)41 b Fw(Using)27 b(a)h(computer)f(it)h(is)f(easy)g(to)g
(calculate,)g(for)g(example,)h(that)g(for)0 4078 y(\(8.1\))694
b Fx(w)26 b Fw(=)d([17)p Fx(;)14 b Fw(6)p Fx(;)g Fw(2)p
Fx(;)g Fw(15)p Fx(;)g Fw(12)p Fx(;)g Fw(11)p Fx(;)g Fw(3)p
Fx(;)f Fw(8)p Fx(;)h Fw(1)o(6)p Fx(;)g Fw(7)o Fx(;)g
Fw(14)o Fx(;)g Fw(5)p Fx(;)g Fw(1)o(3)p Fx(;)f Fw(9)p
Fx(;)h Fw(1)o(0)p Fx(;)g Fw(1)o Fx(;)g Fw(4])p Fx(;)0
4218 y Fw(#)g(maxsing\()p Fx(X)483 4230 y Fm(w)537 4218
y Fw(\))23 b(=)g(29.)1558 4403 y Fn(References)35 4535
y Fv([1])35 b Fu(S.)k(Billey)h(and)g(V.)g(Lakshmibai)p
Fv(,)h Fb(Singular)f(L)l(o)l(ci)f(of)h(Schub)l(ert)f(V)-5
b(arieties)p Fv(,)41 b(no.)d(182)h(in)f(Progress)g(in)g(Mathematics,)
145 4618 y(Birkh\177)-35 b(auser,)23 b(2000.)35 4701
y([2])35 b Fu(J.)30 b(Carrell)p Fv(,)g Fb(On)g(the)g(smo)l(oth)i(p)l
(oints)f(of)g(a)f(Schub)l(ert)h(variety)p Fv(,)e(v)n(ol.)f(16)h(of)g
(CMS)f(Conference)i(pro)r(ceedings,)h(June)e(1994,)145
4785 y(pp.)24 b(15{24.)35 4868 y([3])35 b Fu(J.)c(B.)h(Carrell)f(and)g
(J.)g(Kuttler)p Fv(,)g Fb(On)g(the)g(smo)l(oth)i(p)l(oints)f(of)g
(T-stable)f(varieties)f(in)h Ft(G=B)k Fb(and)e(the)e(Peterson)g(map)p
Fv(,)145 4951 y(preprin)n(t,)23 b(\(1999\).)35 5034 y([4])35
b Fu(C.)22 b(Chev)-6 b(alley)p Fv(,)20 b Fb(Sur)j(les)f(d)n(\023)-35
b(ec)l(omp)l(ositions)26 b(c)l(el)t(lulair)l(es)e(des)f(esp)l(ac)l(es)g
Ft(G=B)s Fv(,)e(Pro)r(ceedings)g(of)f(Symp)r(osia)g(in)g(Pure)g
(Mathemat-)145 5117 y(ics,)j(56)h(\(1994\).)35 5200 y([5])35
b Fu(V.)h(Deodhar)p Fv(,)h Fb(L)l(o)l(c)l(al)g(Poinc)l(ar)n(\023)-35
b(e)38 b(duality)e(and)h(non-singularity)f(of)g(Schub)l(ert)f
(varieties)p Fv(,)i(Comm.)32 b(Algebra,)k(13)f(\(1985\),)145
5283 y(pp.)24 b(1379{1388.)p eop
%%Page: 9 9
9 8 bop 997 66 a Fl(MAXIMAL)28 b(SINGULAR)i(LOCI)f(OF)g(SCHUBER)-5
b(T)29 b(V)-7 b(ARIETIES)29 b(IN)g Fm(S)s(L)p Fl(\()p
Fm(n)p Fl(\))p Fm(=B)666 b Fl(9)335 266 y Fv([6])35 b
Fu(M.)25 b(D)n(yer)p Fv(,)e Fb(The)j(nil-He)l(cke)e(ring)i(and)g(De)l
(o)l(dhar's)i(c)l(onje)l(ctur)l(e)e(on)g(Bruhat)h(intervals)p
Fv(,)c(In)n(v)n(en)n(t.)i(Math.,)e(111)i(\(1993\).)335
349 y([7])35 b Fu(V.)27 b(Gashar)o(o)o(v)p Fv(,)c Fb(Su\016ciency)j(of)
h(L)l(akshmib)l(ai-Sandhya)j(singularity)d(c)l(onditions)h(for)f(Schub)
l(ert)g(varieties)p Fv(,)e(In)h(preparation,)445 432
y(\(2000\).)335 515 y([8])35 b Fu(J.)25 b(E.)h(Humphreys)p
Fv(,)c Fb(R)l(e\015e)l(ction)k(gr)l(oups)h(and)f(Coxeter)f(gr)l(oups)p
Fv(,)g(Cam)n(bridge)e(Univ)n(ersit)n(y)g(Press,)g(1990.)335
598 y([9])35 b Fu(V.)20 b(Lakshmibai)g(and)g(B.)h(Sandhy)l(a)p
Fv(,)c Fb(Criterion)k(for)g(smo)l(othness)i(of)e(Schub)l(ert)g
(varieties)f(in)h Ft(S)t(L)p Fv(\()p Ft(n)p Fv(\))p Ft(=B)s
Fv(,)f(Pro)r(c.)e(Indian)i(Acad.)445 681 y(Sci.)j(\(Math)i(Sci.\),)e
(100)i(\(1990\),)g(pp.)e(45{52.)300 764 y([10])35 b Fu(V.)29
b(Lakshmibai)g(and)g(C.)g(S.)g(Seshadri)p Fv(,)f Fb(Singular)i(lo)l
(cus)g(of)g(a)f(Schub)l(ert)h(variety)p Fv(,)d(Bull.)g(Amer.)e(Math.)j
(So)r(c.,)g(11)g(\(1984\),)445 847 y(pp.)c(363{366.)300
930 y([11])35 b Fu(L.)26 b(Manivel)p Fv(,)c Fb(L)l(e)j(lieu)h
(singulier)g(des)f(varietes)h(de)f(Schub)l(ert)p Fv(,)f(arXiv:math.A)n
(G/0102124,)g(\(2001\).)300 1013 y([12])35 b Fu(P.)24
b(Polo)p Fv(,)e Fb(On)i(Zariski)f(tangent)g(sp)l(ac)l(es)j(of)e(Schub)l
(ert)g(varieties,)f(and)i(a)f(pr)l(o)l(of)h(of)f(a)h(c)l(onje)l(ctur)l
(e)f(of)g(De)l(o)l(dhar)p Fv(,)g(Indag.)e(Math.,)445
1096 y(5)i(\(1994\),)h(pp.)f(483{493.)400 1193 y Fb(E-mail)i(addr)l
(ess)5 b Fv(:)33 b Fa(billey@math.mit.edu)400 1335 y
Fu(A)n(uthor)l('s)24 b(address:)34 b(Dept.)25 b(of)e(Ma)l(thema)l
(tics,)h(2-363c,)f(Massa)o(chusetts)i(Institute)g(of)e(Technology,)i
(Cambridge,)300 1418 y(MA)g(02139)400 1559 y Fb(E-mail)h(addr)l(ess)5
b Fv(:)33 b Fa(gwar@math.harvard.edu)400 1700 y Fu(A)n(uthor)l('s)25
b(address:)35 b(Dept.)25 b(of)g(Ma)l(thema)l(tics,)f(Har)-6
b(v)g(ard)25 b(University,)h(Cambridge,)e(MA)h(02138)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
