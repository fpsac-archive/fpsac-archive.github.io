%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: 79.dvi
%%Pages: 11
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips 79.dvi -o 79.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.02.26:0744
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (79.dvi)
@start
%DVIPSBitmapFont: Fa cmtt8 8 14
/Fa 14 120 df<123E127FEAFF80A5EA7F00123E0909738823>46
D<EB07F0EB1FFCEB7FFE48B5FC4814803907FC1FC0380FE0079038C0FFE0EA1F83485AEA
3E0FD87E1F13F0007C138FEB3F0738783E0338F87C01A212F0EB7800A5EB7C0112F8A239
783E03E0387C3F0790381F8FC0007E13FFD83E0F1380D83F071300381F83FE390FC0F9E0
9038E007F03807FC0F6CB5FC6C14C06C6C138090381FFE00EB07F81C297DA823>64
D<3803FF80000F13E04813F8487F80EB80FFEC3F80381F001FC7FC140F14FF137F0003B5
FC120F5A387FF00F130012FCA25A141F7E6C133F387F81FF90B512FC6C14FE7E000713C7
3901FE01FC1F1D7D9C23>97 D<B47E7FA41207A7EBC1FCEBC7FF01DF13C090B512E015F0
9038FE0FF8EBF8039038F001FCEBE000A249137EA2153EA5157E7F15FC7F14019038F803
F89038FE0FF090B5FC15E001DF138001CF1300380383F81F297FA823>I<ECFF8015C0A4
1407A7EB7F873801FFE74813F7000F13FF5A13E0383F803F387F001F007E130FA2481307
A25AA56C130FA2127E141F007F133F383F807FEBE0FF6CB512FE7E000313F76C13C73800
7F031F297EA823>100 D<EB3FC0EBFFF800037F4813FF481480381FF07F393F801FC0EB
000F007E130715E05AB6FCA415C000F8C8FC7EA2007EEB01C0007FEB03E0383F800713E0
391FF81FC06CB5FC6C14800001EBFE006C6C5AEB1FE01B1D7D9C23>I<EC01F090383F07
FC9038FFDFFE000313FF5A48147E381FE1FE9038807E18393F003F00A2003E7FA4003F5B
A2381F807EEBE1FE6CB45A485B5C001E13C0013FC7FC90C8FC121F1340380FFFFCECFF80
4814C04814F0397E0007F8007C130048147CA248143CA36C147C6C14FC007FEB03F8EBE0
1F6CB512F0000F14C06C14800001EBFE0038003FF01F2E7E9D23>103
D<133813FEA5133890C7FCA6EA7FFC487EA3127FEA003EB3387FFFFEB6FCA36C13FE182A
7AA923>105 D<EA7FFEB5FCA37EEA001FB3AD007FB512C0B612E0A36C14C01B297CA823>
108 D<38FF81FCEBC7FF01DF138090B512C0A23907FE0FE0EBF807EBF00313E0A313C0AD
39FFFE1FFF5CA380201D7F9C23>110 D<397FF00FE039FFF87FF8ECFFFC13FB6CB5FCC6
13F8ECC078EC800091C7FC5BA25BA35BAA387FFFFCB57EA36C5B1E1D7E9C23>114
D<3801FF9C000F13FE5A127FA2EAFF0000FC137E48133EA26C131C6C1300EA7FF0383FFF
80000F13E06C13F838007FFCEB01FEEB007F0070133F00F8131F7E143F7E38FF80FFEBFF
FE14FC14F814F000701380181D7B9C23>I<39FF807FC001C013E0A400071303B0140714
0FEBE03F90B6FC7EA2C613F3EB3FC1201D7F9C23>117 D<397FF00FFE39FFF81FFFA339
7FF00FFE001FC712F86C14F0A57F390783E1E0EB87F1A3EB8FF90003EB79C013CFA2EBDF
7BA2EBDE3B00011480EBFE3FA2EBFC1FA23900F80F00201D7F9C23>119
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmti8 8 10
/Fb 10 116 df<387FFFC0A2B5FCA26C130012057A901A>45 D<011FB612FEA2903900FE
0001EE007E4A143EA20101151E171C5CA21303A25C16E001071301170002E05B1503130F
15074A485A91B5FC5BECC01F4A6CC7FCA2133FA2DA000E13E0A2491401030013C0017E14
03178001FE14071700495C161E12015E49147CED01FC0003EC0FF8B7FC5E2F2D7CAC30>
69 D<EB07C0EB1FF090387C39C0EBF81FEA01F03803E00FEA07C0120FD81F801380A2EA
3F00141F481400127EA25C00FE133E5AA2EC7E18EC7C385AA214FCD878011378397C03F8
70A2393C0F78E0381E1E3D390FF81FC03903E00F001D1F799D24>97
D<153EEC07FEA2EC007EA2157CA215FCA215F8A21401A215F0A21403EB07C390381FF3E0
EB7C3BEBF81FEA01F03903E00FC0EA07C0120FEA1F801580EA3F00141F5A007E1400A25C
12FE48133EA2EC7E18153848137CA214FCD878011378397C03F870A2393C0F78E0381E1E
3D390FF81FC03903E00F001F2F79AD24>100 D<EB03F8EB0FFEEB3E0FEBF8073901F003
80EA03E0EA07C0000F1307D81F8013005C383F001E5C387F03F8EBFFE049C7FC007EC8FC
12FE5AA4127CEC0180EC03C0EC07806CEB0F00141E6C137C380F83F03803FFC0C648C7FC
1A1F799D21>I<130E131FEB3F80A2EB1F00130E90C7FCA9EA03E0EA0FF0EA1E78EA1C7C
12381278127013FCEAF0F812E012E1EAC1F0120112035B12075BA2120F13831387121F13
075BEA3F0E123EEA1E1C133C1338EA0FF0EA03C0112E7AAC16>105
D<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380
A2121FA21300A25AA2123EA2127EA2127CA2EAFC30137012F8A213F013E012F012F113C0
12FBEA7F80EA1E000E2F7AAD12>108 D<3B07801FC007F03B1FE07FF01FFC3B3DF1E0F8
783E3B38F3C078F01E3B78FF007DC01FD870FEEB7F80A2D8F1FC1400D8E1F8137EA24913
7C00C302FC5B0003163E495BA200070101147E177C01C05B17FC000F0103ECF830187001
80EBE00117F0001F010715F0040313E0010001C013E0EFE1C048010F1301EFE380003E91
398000FF00001C6DC7123C341F7A9D3A>I<3807803E391FE0FF80393CF3C1C03938F781
E03878FF07EA70FE13FC12F139E1F8038091C7FC5B12C312035BA21207A25BA2120FA25B
A2121FA290C8FCA25AA2123E121C1B1F7A9D1E>114 D<EB0FC0EB7FF0EBF03C3801E01C
3803C01EEA0780143EA2000F133C1418EBC00013F813FF6C13C06C13E06C13F0EA007F13
0713031301EA780012FCA2130100F813E012E0EB03C038F0078038781F00EA1FFCEA07F0
171F7A9D1D>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmsy8 8 1
/Fc 1 1 df<B812C0A32A037A9137>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd eufm10 10 1
/Fd 1 104 df<02101310027C1370903901FF80E04913F3010F13FF133F5BD801FC14C0
3803F80FEC003F150F5B1207A2151FAF6D133F6DEBFFE06D5A9038FF079FEC8F0F6C13FC
6C01F813F014F06C13E0EB7F8090383F0007131E4914E0017014C0485A486C1480486C14
00486C130648B45B007FEBC01800E7EBF0300003EBFFE0C6FC6D5B011F5BD903FEC7FCEB
003824387FA62A>103 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmmi5 5 3
/Fe 3 121 df<137F3801FFC0390781E060380E00F048EB78C0123C48EB7D80143D48EB
3F00143EA2143CA20070137C387801FC393C0F9E30391FFE0FE03907F007C01C127C9126
>11 D<137013F8A213F013E01300A6EA0F80EA1FC0EA31E01261A2EAC3C01203EA0780A3
EA0F001308EA1E18A213301370EA0FE0EA07800D1D7D9C16>105
D<3807E0F0381FF3F838383F1CEA703E38603C3C00C0137C12001438EB7800A212380078
130438F8F00CA200F013183861F870387F3FE0381E0F8016127C9121>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmex10 10 8
/Ff 8 89 df<160F161F163E167C16F8ED01F0ED03E0ED07C0150FED1F801600153E157E
5D4A5A5D14034A5A5D140F4A5AA24AC7FC143E147E5CA2495AA2495AA2495AA2130F5CA2
495AA2133F91C8FCA25B137E13FEA25B1201A25B1203A35B1207A35B120FA35BA2121FA4
5B123FA690C9FC5AAA12FEB3AC127FAA7E7FA6121F7FA4120FA27FA312077FA312037FA3
12017FA212007FA2137E137F7FA280131FA26D7EA2801307A26D7EA26D7EA26D7EA2147E
143E143F6E7EA26E7E1407816E7E1401816E7E157E153E811680ED0FC01507ED03E0ED01
F0ED00F8167C163E161F160F28C66E823D>18 D<12F07E127C7E7E6C7E6C7E6C7E7F6C7E
1200137C137E7F6D7E130F806D7E1303806D7EA26D7E147C147E80A26E7EA26E7EA26E7E
A2811403A26E7EA2811400A281157E157FA2811680A2151F16C0A3150F16E0A3150716F0
A31503A216F8A4150116FCA6150016FEAA167FB3AC16FEAA16FC1501A616F81503A416F0
A21507A316E0150FA316C0151FA31680153FA216005DA2157E15FE5DA214015DA24A5AA2
14075DA24A5AA24A5AA24AC7FCA2147E147C14FC495AA2495A5C1307495A5C131F49C8FC
137E137C5B1201485A5B485A485A48C9FC123E5A5A5A28C67E823D>I<EC01F01407140F
143F147F903801FFC0491380491300495A495A495A495A5C495A485B5A91C7FC485AA248
5AA2485AA2123F5BA2127F5BA412FF5BB3B3A71C4B607E4A>56 D<EAFFC0B3B3A77F127F
A47F123FA27F121FA26C7EA26C7EA26C7E807E6C7F6D7E806D7E6D7E6D7E6D7E6D13806D
13C09038007FF0143F140F140714011C4B60804A>58 D<EC1FF8B3B3A7143F15F0A4EC7F
E0A315C014FFA2491380A215005B5C1307495A5C131F495A5C495A495A4890C7FC485A48
5A485A485AEA7FE0EAFF8090C8FC12FCB4FC7FEA7FE0EA1FF06C7E6C7E6C7E6C7E6C7F6D
7E6D7E806D7E130F806D7E1303807F1580A26D13C0A2147F15E0A3EC3FF0A415F8141FB3
B3A71D9773804A>60 D<EAFFC0B3A90A1B60804A>62 D<BB12FC86A3D87FC0C9001F7FF0
007F6C6C17076C6C050113806C6CEF007F1A1F6C6CF00FC06C6C18076C6C1803F201E06C
6D17006D6C1860013F19706E18306D7E6D6C18181B006D7E6D7E6D7EA26D7F6E7E6E7EA2
6E7E6E7E6E7EA26E7E6E7E80826F7E6F7EA26F7E6F7E6F5A5EA24B5A5E4BCBFC153E157E
5D5D4A5A4A5A14075D4A5A4ACCFC143E147E147C5C4948181801031930495A4A18704948
186049CC12E0491801017EF003C0017C180749180F4848F01F800003197F49EF01FF4848
050713004848173F48CA000FB5FC48BA5AA25ABB5AA24D537B7F58>80
D<BF12E08AA38A6C90CCFC0900806C6D19076C6D07007F6C6D1A1F1D076C6DF201FF6C6D
747E6C6DF33F801E0F6C6D1B076D6CF303C06D6D1A01F600E06D7F6D6D1B706D1D30816D
6D1B186D6D1B007F816E7E6E7FA26E7F6E7F6E7FA26E7F6E7F6E7FA26F7E6F7F6F7FA26F
7F6F7F81836F7F6F7F167F83707F707F8284707F707FA2707F82715A60173F715A604D5A
4DCDFC17FEA24C5A4C5A4C5A4C5A4C5A5F163F4CCEFC16FE4B5A4B5A4B5AA24B5A4B5A4B
5A4BCFFC15FEA24A5A4A5A4A481B184A481B304A5A4B1B70023F1C604ACF12E002FE1B01
4948F303C049481B074948F30F801E1F49481B7F4948F3FF0049481A0349CE120F01FEF3
7FFEF403FF48481A7F4848077FB55A48BEFC48655AA248655ABFFC666D747B7F78>88
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsy5 5 1
/Fg 1 49 df<EA0380EA07C0A3EA0F80A313005A121EA2123E123CA212381278A21270A2
5AA20A157D9612>48 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmsy7 7 6
/Fh 6 111 df<B712FEA327037A8F34>0 D<13E0EA01F0EA03F8A3EA07F0A313E0A2120F
13C0A3EA1F80A21300A25A123EA35AA3127812F8A25A12100D1E7D9F13>48
D<49B5FC130F133F01FFC7FCEA01F8EA03E0EA078048C8FC121E121C123C123812781270
A212F05AA2B7FCA300E0C8FCA27E1270A212781238123C121C121E7E6C7EEA03E0EA01F8
6CB4FC013FB5FC130F130120277AA12D>50 D<ED1F80EDFFC0020313E04A13F0EC1E0FEC
3C07EC780314F0010114E002E013C0010314004AC7FC13075C130FA249C8FCA3133EA313
7E137CA313FC5BA25B1201A24848140E161C49147C48B47E4801F813F89138FFC0F048EC
FFE0D83C0F1480D87000140048EB07F8272A7DA82E>76 D<0060153000E01570B3A76C15
F0007015E0007814016CEC03C0001FEC0F80D80FC0EB3F003907F801FE0001B512F86C6C
13E0010F90C7FC24247CA22D>91 D<12E0A27E1270A212781238123C121CA2121E120E12
0F7EA27F1203A27F12017F1200A27F137013781338A2133C131C131E130EA2130F7F8013
03A2801301801300A2801470A214781438143C141CA2141E140E140F80A2158014031401
193B7CAB22>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmti10 10 37
/Fi 37 124 df<EE3FFC4BB51280923907E007C092391F8001E0DB3F0013F0037E13034B
1307A24A5A18E04A48EB038094C7FCA314075DA4140F5DA3010FB7FCA25F903A001F8000
7EA217FE023F5C92C7FCA216015F5C147E16035FA214FE4A13075FA30101140F5F4AECC1
C0A2161F1783010316805CA2EF870013074A5CEE0F8EEE079EEE03FC010FEC00F04A91C7
FCA35C131FA2001C90CAFC127E5BEAFE3E133C137CEAF878EA78F0EA3FE0EA0F80344C82
BA2F>12 D<EE7FE0923903FFFC7E92380FC03E92381F000F033EEB3FFE4B137F03FC14FC
5D1401173D4A48EB01F8A21703A24A4814F0A21707A2020F15E05D170FA218C0010FB7FC
A3903B001F80001F80A2173F143F92C71300A25FA24A147E147E17FEA25F14FE4A1301A2
5FA2010114035CEFF070A21607010316F04AECE0E0A3EFE1C013074A14C3933803E380EE
01E7933800FF004948143C94C7FCA3495AA3001C90CAFC127E133E12FE133C137CEAF878
EA78F0EA3FE0EA0F80374C82BA31>I<EA03C0EA07F0120F121F13F8A313F0EA07B0EA00
3013701360A213E013C01201EA038013005A120E5A5A5A5A5A0D197A8819>44
D<387FFFF8A2B5FCA214F0150579941E>I<120EEA3F80127F12FFA31300127E123C0909
778819>I<DB03FE130E92393FFF801E92B5EAE03C913903FE01F0913A0FF000787CDA3F
C0EB3CFC4AC7EA1FF802FE140FEB03FC49481407494815F049481403495A5C49C813E05B
485A5B000317C0485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90CBFCA41738A2
17784816707E17F06C5E16015F16036C6C4A5A94C7FC001F150E6D141E000F5D6D5C6C6C
495A6C6CEB03C0D801FEEB0F8027007F807EC8FC6DB45A010F13E0010090C9FC373D74BA
3B>67 D<0103B612FEEFFFC018F0903B0007F8000FF84BEB03FCEF00FE020F157FF03F80
4B141F19C0021F150F19E05D1807143F19F05DA2147FA292C8FCA25C180F5CA2130119E0
4A151FA2130319C04A153FA201071780187F4A1600A2010F16FEA24A4A5A60011F15034D
5A4A5D4D5A013F4B5A173F4A4AC7FC17FC017FEC03F84C5A91C7EA1FC04949B45A007F90
B548C8FCB712F016803C397CB83F>I<0107B8FCA3903A000FF000034BEB007F183E141F
181E5DA2143FA25D181C147FA29238000380A24A130718004A91C7FC5E13015E4A133E16
7E49B512FEA25EECF8000107147C163C4A1338A2010F147818E04A13701701011F16C016
004A14031880013F150718004A5CA2017F151E173E91C8123C177C4915FC4C5A49140700
01ED7FF0B8FCA25F38397BB838>I<0107B712FEA3903A000FF000074B1300187C021F15
3CA25DA2143FA25D1838147FA292C8FCEE03804A130718004A91C7FCA201015CA24A131E
163E010314FE91B5FC5EA2903807F800167C4A1378A2130FA24A1370A2011F14F0A24A90
C8FCA2133FA25CA2137FA291CAFCA25BA25B487EB6FCA337397BB836>I<0103B512F8A3
90390007F8005DA2140FA25DA2141FA25DA2143FA25DA2147FA292C7FCA25CA25CA21301
A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA291C8FC497E
B6FCA25C25397CB820>73 D<0107B512FCA25E9026000FF8C7FC5D5D141FA25DA2143FA2
5DA2147FA292C8FCA25CA25CA21301A25CA21303A25CA21307A25CA2130F170C4A141CA2
011F153C17384A1478A2013F157017F04A14E01601017F140317C091C71207160F49EC1F
80163F4914FF000102071300B8FCA25E2E397BB834>76 D<0007B812E0A25AD9F800EB00
1F01C049EB07C0485AD900011403121E001C5C003C17801403123800785C007016071407
00F01700485CA2140FC792C7FC5DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA2
1301A25CA21303A25CA21307A25CA2130FA25CEB3FF0007FB512F8B6FCA2333971B83B>
84 D<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A485A120FEBC001
001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A2141F1583168014
3F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F022
2677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0F8EB
E7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A21380A2123F1300A214
075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E5C387801F8007C5B38
3C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<147F903803FFC090380F
C1E090381F0070017E13784913383901F801F83803F003120713E0120FD81FC013F091C7
FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007EEB01E0003EEB03C0EC
0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01F815FFA3150316F0A2
1507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07FE90381F877F90383E
03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F801403127F01005BA2
14075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C017F1300ECFF076C48
5B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>I<147F903803FFC090
380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F14F0383F8001EC07E0
EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14381578007E14F0003E
EB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D2677A426>I<ED07C0
ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0160014075DA4140F5DA414
1F5D010FB512C05B16809039003F800092C7FCA45C147EA414FE5CA413015CA413035CA4
13075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C137C1378EAF8F01278EA3F
C0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00F
EB0F80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480A2153F1207
491400A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF3
90380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F838
7C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FFA3EA00075CA3130F5CA313
1F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F140048
5A16C05B49EB1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD98001131C
15F8163C003F01031338010013F0A216704814E0007E15F016E0EDE1C000FE903801E380
48903800FF000038143C263B7BB92A>I<EB01C0EB07E014F0130F14E01307EB038090C7
FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B
1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5A
EA07F8EA01E0143879B619>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91
C8FCA35B017EEB0F80ED3FE015F09039FE01C1F09038FC0387EC0707140E0001011C13E0
EBF83891383003800270C7FC00035BEBF1C0EBF38001FFC8FCEA07FC7FEBFFC0EBE7F838
0FE1FCEBC07E147F80001F809039801F81C0A21583003F013F138001001303A215074815
00007E133EEC1E0E151E00FE6D5A48EB07F80038EB01E0243B7BB926>107
D<EB0FC0EA07FFA3EA001F1480A2133FA21400A25BA2137EA213FEA25BA21201A25BA212
03A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131E
EAFC1CA2133C133812F81378EA7870EA7CE0121FEA0F80123B79B915>I<D801E001FEEB
07F03C07F803FF801FFC3C0E3C0F07C0783E3C1E3E3C03E1E01F261C1F78D9F3C013803C
383FF001F7800F02E01400007801C013FE007018C002805B4A4848EB1F80EAF07FD8E07E
5CA200000207143F01FE1700495CA2030F5C0001177E495C18FE031F5C120349DA800113
1C18F8033F153C00070403133849020013F0A24B1570000F17E049017E15F019E003FEEC
E1C0001FEE01E34949903800FF000007C70038143C3E2679A444>I<D801E013FE3A07F8
03FF803A0E3C0F07C03A1E3E3C03E0261C1F787F39383FF00114E0007813C00070811480
4A485AEAF07FEAE07EA20000140701FE5C5BA2150F00015D5B151F5E12034990383F8380
160316070007027F130049137EA2160E000F147C49141E161C5E001FEC3C7849EB1FE000
07C7EA0780292679A42F>I<147F903803FFC090380FC1F090381F00F8017E137C5B4848
137E4848133E0007143F5B120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115
FC5AEC03F8A2EC07F015E0140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F0
3803FFC0C648C7FC202677A42A>I<9039078007C090391FE03FF090393CF0787C903938
F8E03E9038787FC00170497EECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA2
5CA20107147FA24A1400A2010F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7
FC017F133EEC70FC90387E3FF0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512
C0A3293580A42A>I<ECF803903807FE0790381F871F90383E03BF017C13FEEBF8011201
3803F000484813FC120F5B001F130115F8EA3F80A2007F1303010013F0A34813074814E0
A3140F4814C0A3141F1580143FA2007C137FECFF006C5AEB03BF381F0F7F3807FE7EEA01
F0C7FC14FE5CA313015CA313035C130748B512C0A3203577A426>I<3903C003F0390FF0
1FFC391E783C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F0
7E90C7FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC
120E212679A423>I<14FE903807FF8090380F83C090383E00E04913F00178137001F813
F00001130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13
C01300143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E0
6CB45AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480A3133F1400A35B13
7E007FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3121FEB801CA214
3C003F1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F01835
79B31C>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C0038140F131F0078
15C01270013F131F00F0130000E015805BD8007E133FA201FE14005B5D120149137EA215
FE120349EBFC0EA20201131E161C15F813E0163CD9F003133814070001ECF07091381EF8
F03A00F83C78E090393FF03FC090390FC00F00272679A42D>I<01F0130ED803FC133FD8
071EEB7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E140000E08013FEC6
485B150E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A140300035C6D48C7
FC0001130E3800F83CEB7FF8EB0FC0212679A426>I<01F01507D803FC903903801F80D8
071E903907C03FC0D80E1F130F121C123C0038021F131F49EC800F00701607A249133FD8
F07E168000E0ED000313FEC64849130718000001147E5B03FE5B0003160E495BA2171E00
070101141C01E05B173C1738A217781770020314F05F0003010713016D486C485A000190
391E7C07802800FC3C3E0FC7FC90393FF81FFE90390FE003F0322679A437>I<903907E0
07C090391FF81FF89039787C383C9038F03E703A01E01EE0FE3803C01F018013C0D80700
14FC481480000E1570023F1300001E91C7FC121CA2C75AA2147EA214FEA25CA21301A24A
1370A2010314F016E0001C5B007E1401010714C000FEEC0380010F1307010EEB0F003978
1CF81E9038387C3C393FF03FF03907C00FC027267CA427>I<13F0D803FCEB01C0D8071E
EB03E0D80E1F1307121C123C0038140F4914C01270A249131FD8F07E148012E013FEC648
133F160012015B5D0003147E5BA215FE00075C5BA214015DA314035D14070003130FEBF0
1F3901F87FE038007FF7EB1FC7EB000F5DA2141F003F5C48133F92C7FC147E147C007E13
FC387001F8EB03E06C485A383C1F80D80FFEC8FCEA03F0233679A428>I<B712FCA22602
79962A>123 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmsy10 10 24
/Fj 24 111 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA
7F00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB
01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380F
C1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F090
380FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F0
4848EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<15
301578B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A3007FB812F8B912FCA26C17F8
36367BB641>6 D<020FB6128091B712C01303010F1680D91FF8C9FCEB7F8001FECAFCEA
01F8485A485A485A5B48CBFCA2123EA25AA2127812F8A25AA87EA21278127CA27EA27EA2
6C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FF86DB71280010316C01300020F158091CAFCAE
001FB812804817C0A26C1780324479B441>18 D<007FB512FCB712C016F06C15FCC8EA07
FE9238007F80EE1FC0EE07E0707E707E707E177C83A283A2EF0F80A2170718C0A21703A8
1707A21880170FA2EF1F00A2173EA25F17FC4C5A4C5A4C5AEE1FC0EE7F80DB07FEC7FC00
7FB65AB712F016C06C02FCC8FCCCFCAE007FB712FEB9FCA26C5E324479B441>I<EF0180
EF07C0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED7FC04A
48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07FCEA3FF0EA
7FC048CBFC5AEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC
3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE
933800FF80EF3FC0170FEF038094C7FCAE007FB81280B912C0A26C1780324479B441>I<
126012F812FEEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC
3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE
933800FF80EF3FC0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1F
F0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA07
FCEA1FF0EA7FC048CBFC12FC1270CCFCAE007FB81280B912C0A26C1780324479B441>I<
181EA4181F84A285180785727EA2727E727E85197E85F11F80F10FC0F107F0007FBA12FC
BCFCA26C19FCCCEA07F0F10FC0F11F80F13F00197E61614E5A4E5AA24E5A61180F96C7FC
A260181EA4482C7BAA53>33 D<D93F801508D9FFF0151C000313FC487F486D7E4880273F
C07FF0143C9026000FF81438007CD903FE147800786D6C14F80070903A007FC003F000F0
91383FF80F48020FB512E06F14C0030114806F1400EE3FFC0040ED07F0CCFCB0007FB812
F8B912FCA26C17F836267BA641>39 D<DA03C0143C0207153E4B141EA2020F151F92C87E
4A82023E6F7E023C1503027C824A6F7E4A150001018349B87E498349834984013ECAEA07
C001FCEF03F04848717E4848717ED80FE0187FD83F80F01FC0B4CCEA0FF0A2D83F80F01F
C0D80FE0F07F00D803F018FC6C6C4D5A6C6C4D5A013EEF07C06DB95A6D95C7FC6D5F6D5F
D901F0C95A01005F6E1501027C4B5A023C5E023E15076E4B5A6E93C8FC6F5C0207151EA2
6F143E0203153C4C307DAC53>44 D<91381FFFFE91B6FC1303010F14FED91FF0C7FCEB7F
8001FEC8FCEA01F8485A485A485A5B48C9FCA2123EA25AA2127812F8A25AA2B712FE16FF
A216FE00F0C9FCA27EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1F
F06DB512FE010314FF1300021F13FE283279AD37>50 D<EE0180EE03C01607A2EE0F80A2
EE1F00A2163EA25EA25EA24B5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA24A5AA2
4A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FCA2
133EA25B13FC5B485AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A12602A4E75
BB00>54 D<0060161800F0163C6C167CA200781678007C16F8A2003C16F0003E1501A26C
ED03E0A26C16C06D1407A2000716806D140FA26C6CEC1F00A26CB612FEA36C5D01F8C712
7CA2017C5CA2013C5C013E1301A2011E5C011F1303A26D6C485AA201075CECC00FA20103
91C7FC6E5AA2903801F03EA20100133CECF87CA2EC7878EC7CF8A2EC3FF0A26E5AA36E5A
A36E5A6EC8FC2E3C80B92F>56 D<007FB612F0B712F8A27EC91278B3A5003FB612F85AA2
7EC91278B3A5007FB612F8B7FCA26C15F0253A7CB92E>I<EE01FCEE0FFEEE7FFF4BB5FC
4B1480ED0F03ED1E014B7E157C4B137F4A5A020315004B137E0207147C4A48137017C04A
4890C7FCA24AC9FCA25C147E14FEA25C1301A25C1303A3495AA4495AA4495AA35C133F91
CAFCA2137E182049ED01E017034848ED0FC0D9F7F8141F48B56C148003F014004802FF13
3E48EDF03C0107ECFFF8261E007F14E048010F5C0070010049C7FC00C0EC0FF0333D7EBA
39>76 D<0060161800F0163CB3B26C167CA2007C16F8A26CED01F0003F15036C6CEC07E0
6C6CEC0FC0D807F0EC3F80D803FE903801FF003A00FFC00FFC6DB55A011F14E0010391C7
FC9038007FF82E347CB137>91 D<EC7FF80103B5FC011F14E0017F14F89039FFC00FFC3A
03FE0001FFD807F09038003F80D80FC0EC0FC04848EC07E048C8EA03F0003E150148ED00
F8A248167CA248163CB3B2006016182E347CB137>I<14034A7E4A7EA24A7EA34A7EA2EC
7CF8A2ECF87CA2ECF03C0101133EA249487EA249486C7EA249486C7EA2EC00034980A201
3E6D7EA2496D7EA20178147801F8147CA2484880A2484880A24848EC0F80A2491407000F
16C0A248C8EA03E0A2003EED01F0A2003C1500007C16F8A248167CA248163C006016182E
347CB137>94 D<0060161800F0163C6C167CA2007C16F8A2003C16F0003E1501A26CED03
E0A26C6CEC07C0A2000716806D140FA26C6CEC1F00A26C6C143EA26C6C5CA20178147801
7C14F8A26D495AA26D495AA26D5CEC8007A26D6C485AA26D6C48C7FCA2903801F03EA201
00133CECF87CA2EC7CF8A2EC3FF0A26E5AA36E5AA26E5A6EC8FC2E347CB137>I<EC01F8
140FEC3F80ECFC00495A495A495AA2130F5CB3A7131F5C133F49C7FC13FEEA03F8EA7FE0
48C8FCEA7FE0EA03F8EA00FE137F6D7E131F80130FB3A7801307A26D7E6D7E6D7EEC3F80
EC0FF814011D537ABD2A>102 D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3
A7801307806D7E6D7EEB007EEC1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7
131F5C133F91C7FC137E485AEA07F0EAFFC000FCC8FC1D537ABD2A>I<126012F0B3B3B3
B3A91260045377BD17>106 D<126012F07EA21278127CA2123C123EA2121E121FA27E7F
A212077FA212037FA212017FA212007FA21378137CA2133C133EA2131E131FA27F80A213
0780A26D7EA2130180A2130080A21478147CA2143C143EA2141E141FA2801580A2140715
C0A2140315E0A2140115F0A2140015F8A21578157CA2153C153EA2151E150C1F537BBD2A
>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr7 7 37
/Fk 37 124 df<1306130C13181330136013E0EA01C0EA0380A2EA07005A120E121EA212
1C123CA35AA512F85AAB7E1278A57EA3121C121EA2120E120F7EEA0380A2EA01C0EA00E0
136013301318130C13060F3B7AAB1A>40 D<12C012607E7E7E120E7EEA0380A2EA01C013
E0120013F0A213701378A3133CA5133E131EAB133E133CA51378A3137013F0A213E01201
13C0EA0380A2EA0700120E120C5A5A5A5A0F3B7DAB1A>I<140EB3A2B812E0A3C7000EC8
FCB3A22B2B7DA333>43 D<1238127C12FEA3127C123807077B8613>46
D<EB3F803801FFF03803E0F83807803C48487E001E7F003E1480A2003C1307007C14C0A4
00FC14E0AE007C14C0A36CEB0F80A36CEB1F006C131E6C6C5A3803E0F86CB45A38003F80
1B277EA521>48 D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521
>I<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC
15005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA0180390300
030012065A001FB5FC5A485BB5FCA219267DA521>I<13FF000313E0380F01F8381C007C
0030137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC38
0001E06D7E147C80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F
01F03807FFC0C690C7FC19277DA521>I<1438A2147814F81301A2130313071306130C13
1C131813301370136013C012011380EA03005A120E120C121C5A12305A12E0B612E0A2C7
EAF800A7497E90383FFFE0A21B277EA621>I<0018130C001F137CEBFFF85C5C1480D819
FCC7FC0018C8FCA7137F3819FFE0381F81F0381E0078001C7F0018133EC7FC80A21580A2
1230127C12FCA3150012F00060133E127000305B001C5B380F03E03803FFC0C648C7FC19
277DA521>I<EB0FE0EB3FF8EBF81C3801E0063803C01F48485AEA0F005A121E003E131E
91C7FC5AA21304EB3FC038FCFFF038FDC078EB003CB4133E48131E141FA2481480A4127C
A4003C1400123E001E131E143E6C133C6C6C5A3803C1F03801FFC06C6CC7FC19277DA521
>I<1230123C003FB512E0A215C0481480A239700007000060130E140C48131C5C5CC75A
5C1301495AA249C7FC5B130E131EA3133E133CA2137CA413FCA813781B287DA621>I<13
7F3803FFE0380781F8380E007C48131E5A801278A3127C007E131EEA3F80EBE03C6C6C5A
380FFCF03807FFC06C5BC613E0487F38079FFC380F07FEEA1E0348C67E48133FEC1F8048
130FA21407A315001278140E6C5B6C5B380F80F03803FFE0C66CC7FC19277DA521>I<13
7F3801FFC03807C1E0380F0070001E1378003E7F003C133E007C131EA200FC131FA41580
A4007C133FA2123C003E137F001E135F380F01DF3807FF9F3801FE1FD8001013001300A2
143E123C007E133CA25C5C007C5B383003C0381C0780D80FFFC7FCEA03F819277DA521>
I<140EA2141FA34A7EA3EC6FC0A2ECEFE014C7A290380183F0A390380301F8A201067F14
00A249137EA2011C137F01187FA24980013FB5FCA2903960000FC0A201E080491307A248
486D7EA200038115011207D81FC0497ED8FFF890383FFFE0A22B2A7EA931>65
D<B612E015FC3907F0003F0003EC0FC0ED07E01503ED01F016F8A6ED03F016E01507ED1F
C0ED7F0090B512FC819039F0003F80ED07E0ED03F0ED01F8ED00FCA2167EA616FCA2ED01
F8ED03F0ED07E00007EC3FC0B7120015F827287EA72E>I<91387FC002903903FFF80690
390FE01E0E90383F0007017CEB019ED801F0EB00FE4848147E4848143E5B000F151E48C8
FC48150E123EA2007E1506A2127C00FC1500A8127C007E1506A2123EA2003F150C7E6C7E
000715186D14386C6C14306C6C1460D8007CEB01C0013FEB038090390FE01E00903803FF
F89038007FC0272A7DA82F>I<B612F015FE3A07F0003F800003EC07C0ED01F06F7E167C
82A282EE0F80A3EE07C0A317E0A917C0A2160F1780A2EE1F00A2163E5E5E4B5AED07E000
07EC3F80B600FEC7FC15F02B287EA732>I<B712F0A23907F000070003EC00F816781638
A21618A3160C1560A21600A215E0A2140390B5FCA2EBF0031400A21560A21606A2ED000C
A4161C16181638A21678ED01F80007EC07F0B7FCA227287EA72D>I<B712C0A23907F000
1F0003EC03E015011500A21660A31630A215C01600A31401A2140790B5FCA2EBF0071401
A21400A492C7FCA9487EB512E0A224287EA72B>I<91387FC002903903FFF80690390FE0
1E0E90383F0007017CEB019ED801F0EB00FE4848147E4848143E5B000F151E48C8FC4815
0E123EA2007E1506A2127C00FC92C7FCA792387FFFE0127C007E02001300167E123EA212
3F7E6C7E6C7EA26C7ED801F814FEEA007C013FEB039E90390FE00F0E903903FFFC029026
007FE0C7FC2B2A7DA833>I<B512C0A23807F8006C5AB3B0487EB512C0A212287EA718>
73 D<90B512C0A2903801FE006D5AB3A9123812FEA3130100FC5B387803F000705B383C
0FC0D80FFFC7FCEA03FC1A297EA722>I<B512E0A2D807F8C8FC6C5AB3A416C0A3150116
80A31503A21507150FED3F00000714FFB7FCA222287EA729>76 D<D8FFF0EDFFF06D5C00
07EEFE0000035E017CEC037CA26D1406A26D140CA36D6C1318A26D6C1330A36D6C1360A2
6D6C13C0A3903900F80180A291387C0300A2EC3E06A36E5AA2EC0F98A3EC07F0A26E5AEA
0780D80FC015FE3CFFFC01C01FFFF0A234287DA73C>I<D8FFF0903807FFE07FD803FC90
38007E006D143C1618137F6D7E6D7EA26D7E6D7E6D7EA26D7E6D7E147FA2EC3F80EC1FC0
EC0FE015F01407EC03F8EC01FCEC00FEA2157FED3F98ED1FD8A2ED0FF815071503A21501
1500486C1478487ED8FFFC143816182B287EA731>I<EC7FC0903803FFF890381FC07F90
393E000F8001F8EB03E048486D7E48486D7E4848147C484880A248C87E481680003E150F
007E16C0A2007C1507A200FC16E0A9007EED0FC0A36CED1F80A26C16006D5C6C6C147E00
07157C6C6C5C6C6C495AD800FCEB07E0013EEB0F8090261FC07FC7FC903807FFFC903800
7FC02B2A7DA833>I<B612E015FC3907F0003F0003EC0FC0ED03E0ED01F016F8150016FC
A616F8150116F0ED03E0ED0FC0ED3F0090B512FC15E001F0C8FCAF487EB512C0A226287E
A72D>I<B67E15F03907F000FC0003143FED0F806F7E82150382A55E15075E4B5A033FC7
FC15FC90B512F0A29038F001FCEC007F6F7E151F82150FA71730A3923807E070486C1560
B539C003F0E0923800FFC0C9EA3F002C297EA730>82 D<90387F80203903FFF060390780
78E0380E000E481307481303007813010070130012F0A21560A27E1500127C127FEA3FE0
13FF6C13F06C13FC000313FFC61480010F13C0010013E0EC0FF014031401EC00F8A200C0
1478A46C1470A26C14F06C14E06CEB01C000EFEB078039E3E01F0038C0FFFC38801FF01D
2A7DA825>I<007FB7FCA23A7E003F003F0078150F007081006081A200E01680481501A5
C791C7FCB3A64A7E013FB5FCA229287EA72F>I<B539C007FFE0A2D807F8C7EA7E006C48
143C1618B3A816386C6C143016706C6C1460017C14E0017E495A6D495A90260F8007C7FC
903807E03E903801FFF89038003FC02B297EA731>I<B590B5EB3FFEA2D80FF8D90FF8EB
07F06C486D48EB03E00003EF01C003031580A26C6C6EEB0300A36C6CD906FC1306A26D16
0E017ED90C7E130CA2017F027F131C6D496C1318A290261F80386D5AED301FA290260FC0
706D5AED600FA26D6C486C6C5AA214F0903B03F18003F180A202F914F3902801FB0001FB
C7FCA202FF14FF6D486D5AA2027E5C027C147CA202381438A33F297FA743>87
D<B56CEB7FF8A2D807FCC7EA1FC06C48EC0F006C6C140E5E6C6C1418017F14385E6D6C13
606D6C13E05E6D6C485A903807F00302F890C7FC01031306903801FC0E903800FE0C5DEC
7F38EC3FB015E0141F6E5AAE4A7E0103B5FCA22D287FA731>89 D<EAFFC0A3EAE000B3B3
B1EAFFC0A30A3B7AAB13>91 D<EAFFC0A31201B3B3B112FFA30A3B7FAB13>93
D<B612FEA21F02808F21>123 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmmi7 7 15
/Fl 15 123 df<EB0FE0EB3FF8EBF83E2601E01F13603A03C00F80C038078007D80F0013
C0001EECC180123E003CECE300007C130315E65A15ECA215F8485C5DA40078130F021D13
C06C903879F180391E03E0F33A0FFF807F003903FC003C231B7C992B>11
D<EB07F8EB1FFF01381380EB303FEC1F00140691C7FC1338133CA27F131F6D7E806D7EA2
EB3FF0EB7BF8EA01E13803C1FCEA0780EA0F00001E137C003E137E123C007C137CA25AA4
481378A214F85CA2387801E05C6C485A6C48C7FCEA0FFE6C5A192A7DA81E>14
D<013FB612F0A2903901FC00074A1301160001031560A25CA21307A25CED0180010F0103
130093C7FC14C05D131F151EECFFFEA290383F801E150C1400A249131C1518137E92C8FC
13FEA25BA21201A25BA21203B512F0A22C287DA72A>70 D<90383FFFF0A2903801FC005C
A21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C7FCA25BA2137EA213FEA2
5BA21201A25BA21203B512C0A21C287DA71D>73 D<90383FFFF8A2D901FCC7FC5CA21303
A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA249141C1618137E163801FE
1430167049146016E000011401ED03C0491307ED0F800003147FB7FC160026287DA72E>
76 D<D93FFC903801FFF88001019138001F006E141E170C902603BF80131C1718EC1FC0
A2496C6C1338173090380607F0A290260E03F81370176090380C01FCA290261C00FE13E0
5F0118137FA20138EB3F81031F5B013014C1150F017014E3030790C7FC016014F3150301
E014FF6F5A5B15001201167C5B486C143C1207D8FFFC1418A235287DA735>78
D<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212605B12C0A2EA
01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F06C5A11287DA6
17>105 D<1407EC0F80141FA21500140E91C7FCA7EB03E0EB07F8EB0C3C1318EB303E13
6013C0A248485AA2C7FCA25CA4495AA4495AA4495AA4495AA21238D87C1FC7FC12FC133E
485AEA70F8EA7FE0EA1F80193380A61B>I<133EEA07FEA2EA007CA213FCA25BA21201A2
5BA21203EC07809038E01FC0EC38600007EB61E014C3EBC187EBC307D80FC613C09038CC
038001B8C7FC13E0487E13FEEB3F80EB0FC0486C7E1303003E1460A2127EECC0C0127CEC
C18012FC903801E30038F800FE0070137C1B297CA723>I<3907801FC0390FE07FF03918
F0E0F83930F1807CEBFB00D860FE133C5B5B00C1147C5B1201A248485BA34A5AEA07C016
60EC03E0A23A0F8007C0C0A2EDC180913803C300D81F0013C7EC01FE000EEB00F8231B7D
9929>110 D<9038F007C03901FC1FF039031E78780006EBE03C90381FC01C000CEB801E
14005B0018141F133E1200137E153E137CA213FC157C5B1578000114F0A2EC01E0EC03C0
3903FC07809038FE1F00EBE7FCEBE1F0D807E0C7FCA25BA2120FA25B121FEAFFF8A22025
809922>112 D<EB0FE0EB7FF8EBF03C3801C00E0003131E3807803EA2143C000F1318EB
E0006CB4FC14C06C13E06C13F06C13F813071301EA3C00007E1378A24813F05A387001E0
EB03C0383C0F80381FFE00EA07F8171B7C991F>115 D<90387C03C03901FF0FF0390707
9C30390E03B078000CEBF0F8001813E1123015F0396007C0E015001200A2495AA449C7FC
15301238007C1460EAFC3E15C0EAF87E39F06F03803970C70700383F83FE381F01F81D1B
7D9926>120 D<EA03E0486C1370D80C7813F8EA187C0030EB01F0A2126013F800C0EB03
E0A2EA01F0A2EC07C0EA03E0A33907C00F80A4EC1F00A25C00035B3801E0FE3800FFBEEB
3F3E13005C121E003F5B5C387E01E0383C03C038300780D81C1FC7FCEA0FFCEA07F01D26
7D9922>I<013E13C0137F9038FF818048EBC3004813FF380701FE3806000C00045BC75A
5C5CEB03800106C7FC5B5B5B5B9038C00180EA038039060003005C380FF81E381FFFFE38
383FFC38601FF86D5A38C007C01A1B7D9920>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmmi10 10 45
/Fm 45 123 df<EC3FC0ECFFF8903807E07C90380F801FD93F00EB800C017E130F499038
07C01C4848ECE018485A484801031338000FEDF0305B001F16704848156017E0007F16C0
90C713F1178016F34816004815F716FE5EA2485D5EA4007E1407150F003E91381DF81800
3F14796C02E11338270F8007C013303B07E03F007CF02601FFF8EB3FC026003FC0EB0F80
2E267DA435>11 D<1403EC3FF891387FFF80D901E313C014800103133F9138001F80ED07
0092C7FC80A280A2808013018080130080147F81143F8149B47E130790380F8FF0EB3E0F
496C7E13F83801F003D803E07F1207380FC0011380121FEA3F0014005A127EA212FE5D48
1301A35DA24813035D6C13075D127C4A5A6C91C7FC5C6C133E6C6C5A3807C0F03801FFE0
D8003FC8FC223D7DBB25>14 D<EC3FF0EB01FF010F13E090383FC00049C7FC13FCEA03F8
485A5B120F485AA2485AA2387FFFFE80A290C8FC5A5AA5127EA4123E123F7E6C6C13606D
13E03903E003C03901F01F0038007FFCEB0FE01C257DA322>I<133F14C0EB07F06D7E80
1301A26D7EA3147FA36E7EA36E7EA36E7EA36E7EA36E7EA36E7EA26E7EA214014A7E5C4A
7E91381E3F80143C14784A6C7E1301EB03E049486C7EEB0F80EB1F00496D7E137E5B4848
6D7E485A485A000F6E7E485A485A48C87E12FE167F4816800070151F293B7CB930>21
D<1503A35DA21506A2150EA2150CA2151CA21518A21538A21530A21570A2EC07FE91383F
FFC0903901FCE3F0903907E0E0F890391F80C03ED93E007FEB7C01D801F8EC0F80D803F0
018013C0D807E014071403D80FC015E0D81F801300A248485AA2007E1306A2020E130F12
FE48010C14C0A2021CEB1F80A20218EB3F00A20238137E007C5D1430007E4A5A003E9038
7003F06CEC07C09138600F80D80F80013FC7FC3903E0E0FC3901F8E7F039007FFF80D90F
FCC8FCEB01C0A25CA21303A291C9FCA25BA21306A2130EA2130CA22B4B7CB931>30
D<EC3FE0903801FFFC010713FF011F148090397F801FC09038F80007D801E01303484890
C7FC48C9FCA21206A5000713F038039FFF3801FF0F14FF38039FFE48C9FC120E5A5A1230
12701260A212E0A215080060141C00701418007814386C14F0391F8007E06CB55A6C91C7
FC000113FC38003FE022287FA527>34 D<121C127FEAFF80A5EA7F00121C0909798817>
58 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A
5A5A12600A19798817>I<EF0380EF0FC0173FEFFF80933803FE00EE0FF8EE3FE0EEFF80
DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80D903FEC9FCEB0FF8
EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EA7F8000FECBFCA2EA7F80EA3FE0EA0FF8EA03
FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED
0FF8ED03FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FC0170FEF0380323279AD
41>I<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A215
80140FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C13
0FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B12
0FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A>I<17601770
17F01601A21603A21607160FA24C7EA216331673166316C3A2ED0183A2ED030315068315
0C160115181530A21560A215C014011580DA03007FA202061300140E140C5C021FB5FC5C
A20260C7FC5C83495A8349C8FC1306A25BA25B13385B01F01680487E000716FFB56C013F
13FF5EA2383C7DBB3E>65 D<0103B7FC4916E018F8903B0007F80007FE4BEB00FFF03F80
020FED1FC0180F4B15E0F007F0021F1503A24B15F81801143F19FC5DA2147FA292C8FCA2
5C18035CA2130119F84A1507A2130319F04A150FA2010717E0181F4A16C0A2010FEE3F80
A24AED7F00187E011F16FE4D5A4A5D4D5A013F4B5A4D5A4A4A5A057FC7FC017F15FEEE03
FC91C7EA0FF049EC7FC0B8C8FC16FC16C03E397DB845>68 D<0103B812F05BA290260007
F8C7123F4B1407F003E0020F150118005DA2141FA25D19C0143FA24B1330A2027F147019
0092C7126017E05C16014A495A160F49B6FCA25F9138FC000F01031407A24A6DC8FCA201
075C18034A130660010F160693C7FC4A150E180C011F161C18184A1538A2013F5E18F04A
4A5AA2017F15074D5A91C8123F49913803FF80B9FCA295C7FC3C397DB83D>I<0103B812
E05BA290260007F8C7123F4B140FF003C0140F18015DA2141FA25D1980143FA25D176002
7F14E095C7FC92C75AA24A1301A24A495A16070101141F91B6FC94C8FCA2903903FC001F
824A130EA21307A24A130CA2010F141CA24A90C9FCA2131FA25CA2133FA25CA2137FA291
CBFC497EB612C0A33B397DB835>I<0103B5D8F803B512F8495DA290260007F8C73807F8
004B5DA2020F150F615DA2021F151F615DA2023F153F615DA2027F157F96C7FC92C8FCA2
4A5D605CA249B7FC60A202FCC7120101031503605CA201071507605CA2010F150F605CA2
011F151F605CA2013F153F605CA2017F157F95C8FC91C8FC496C4A7EB690B6FCA345397D
B845>72 D<0107B512FCA216F890390007F8005DA2140FA25DA2141FA25DA2143FA25DA2
147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2
133FA25CA2137FA291C8FC497EB6FCA326397DB824>I<0203B512FCA3DA000113006F5A
A215015EA315035EA315075EA3150F5EA3151F5EA3153F5EA3157F93C7FCA35D5DA31401
A25DA21403120FD83F805B127FEBC007D8FF805BA24A5AEB001F00FC5C00E0495A006049
C8FC007013FE383801F8381E07F03807FFC0D801FEC9FC2E3B7AB82E>I<0103B6FC5B5E
90260007FCC8FC5D5D140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA213
01A25CA21303A25CA2130718404A15C0A2010F150118804A1403A2011F16005F4A140617
0E013F151E171C4A143C177C017F5D160391C7120F49EC7FF0B8FCA25F32397DB839>76
D<902603FFF891381FFFF8496D5CA2D90007030113006FEC007C02061678DA0EFF157081
020C6D1460A2DA1C3F15E0705CEC181F82023815016F6C5C1430150702706D1303030392
C7FC02607FA2DAE0015C701306ECC0008201016E130EEF800C5C163F0103EDC01C041F13
1891C713E0160F49EDF03818300106140717F8010E02031370EFFC60130CEE01FE011C16
E004005B011815FF177F1338600130153FA20170151F95C8FC01F081EA07FCB512E01706
A245397DB843>78 D<0103B7FC4916E018F8903B0007F80007FC4BEB00FE187F020FED3F
80F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED7F80A292C8130018FE4A4A5A60
4AEC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903FCCAFCA25CA21307A25CA2130F
A25CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FCA33B397DB835>80
D<0103B612F849EDFF8018E0903B0007F8001FF84BEB03FCEF00FE020F157FA24BEC3F80
A2021F16C0A25DA2143FF07F805DA2027FEDFF006092C7485A4D5A4A4A5A4D5A4AEC1F80
057FC7FC0101EC07F891B612E094C8FC9139FC000FC00103EC03F0707E4A6D7E83130717
7E5C177F010F5D5F5CA2011F1401A25CA2133F16034A4A1360A2017F17E019C091C71401
496C01011480B61503933900FE0700EF7E0ECAEA1FFCEF07F03B3B7DB83F>82
D<92391FE00380DBFFFC130002036D5A91390FE01F8F91393F0007DF027EEB01FE02F813
00495A4948147E177C4948143C495AA2011F153891C8FCA3491530A28094C7FC80806D7E
14FEECFFE06D13FE6DEBFFC06D14F06D806D80021F7F02037FEC003F03037F1500167F16
3F161FA3120C160FA2001C151F94C7FCA3003C153EA25E003E5D127E007F4A5A6D495A6D
EB0FC0D8F9F0495AD8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9FC313D7CBA33>
I<0003B812FEA25A903AF8003FC00101C0913880007E4848163C90C7007F141C121E001C
92C7FCA2485CA200305C007017180060130112E0485CA21403C716005DA21407A25DA214
0FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25CEB0F
FC003FB6FC5AA237397EB831>I<267FFFFC91383FFFC0B55DA2000390C83807FC006C48
ED03E06060000094C7FC5F17065FA25F6D5DA26D5D17E05F4C5AA24CC8FC6E1306A2013F
5C161C16185EA25E6E5BA2011F495A150393C9FC1506A25D6E5AA2010F5B157015605DA2
ECE18002E3CAFC14F3EB07F614FE5C5CA25C5CA26D5AA25C91CBFC3A3B7CB830>86
D<277FFFFC01B500F890B51280B5FC60000390C7D807FCC7380FF80001FC4BEC03E00001
6204035E98C7FC621A0604075DA2040F5DA2041B5D6216336D02735D1663000003C34A5A
83DB01834AC8FC04815CDB0301140603075D1506030C5DA203185D197003301560611560
6D01E04A5A15C090267F01804AC9FC17FEDA030014060400130E0206150C020E5D140C4A
5DA24A5D18E04A5D715A5C4A92CAFCA26DC85AA2013E157C1778133C1770133801301560
513B7CB84E>I<49B500F890387FFFF095B5FC1AE0D90003018090380FFC004BC713E002
01ED07804EC7FC6E6C140E606F5C705B606F6C485A4D5A031F91C8FCEEE0065F6F6C5A5F
03075B705A16F96FB45A94C9FC6F5AA36F7EA34B7FED037F9238063FC0150E4B6C7E1538
ED700F03E07F15C04A486C7EEC0300020613034A805C4A6D7E14704A1300494880495A49
C86C7E130E011E153F017E4B7ED803FF4B7E007F01E0011FEBFFC0B5FC6144397EB845>
I<B500FC91383FFFE0A3000390C83807FC006CEE03E06C5F4D5A95C7FC6D6C140E5F5F6D
6C14305F5F6D6C495A4CC8FC010F5C6E130E160C01075C6E5B5E6D6C5B15014B5AD901FE
90C9FC15065D6D6C5A5D15706E5A5D5D6ECAFC5CA3147E14FEA35C1301A35C1303A35C13
07A2130F000FB512F0A25D3B397DB830>I<147E903803FF8090390FC1C38090391F00EF
C0017E137F49133F485A4848EB1F8012075B000F143F48481400A2485A5D007F147E90C7
FCA215FE485C5AA214015D48150CA21403EDF01C16181407007C1538007E010F1330003E
131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F0026267DA42C>97
D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0FCEBE3FF9038E707
C0390FFE03E09038F801F001F013F8EBE000485A15FC5BA2123F90C7FCA214015A127EA2
140312FE4814F8A2140715F05AEC0FE0A215C0EC1F80143F00781400007C137E5C383C01
F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>I<EC3FC0903801FFF0903807E03C90
380F800E90383F0007017E131F49137F484813FF485A485A120F4913FE001F1438484813
00A2127F90C8FCA35A5AA45AA315031507007E1406150E003E143C003F14706C14E0390F
8007C03907C03F003801FFF838003FC020267DA424>I<163FED1FFFA3ED007F167EA216
FEA216FCA21501A216F8A21503A216F0A21507A2027E13E0903803FF8790380FC1CF9038
1F00EF017EEB7FC049133F485A4848131F000715805B000F143F485A1600485A5D127F90
C7127EA215FE5A485CA21401A248ECF80CA21403161CEDF0181407007C1538007E010F13
30003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F00283B7DB9
2B>I<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F000E1380121C12
1812381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B12035BA20007
131813E01438000F133013C01470EB806014E014C01381EB838038078700EA03FEEA00F8
15397EB71D>105 D<150FED3F80A2157FA31600151C92C7FCABEC0F80EC3FE0ECF0F090
3801C0F849487E14005B130E130C131CEB1801133801305BA2EB0003A25DA21407A25DA2
140FA25DA2141FA25DA2143FA292C7FCA25CA2147EA214FEA25CA21301001E5B123F387F
83F0A238FF87E0495A00FE5BD87C1FC8FCEA707EEA3FF8EA0FC0214981B722>I<EB03F0
EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED1FF0ED783801
FEEBE0F89039FC01C1FCEC0383EC07070001130ED9F81C13F891383803F091387001E000
0349C7FCEBF1C0EBF38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC07F6E7E141F00
1F80D9800F1330A21670003F011F136001001380A216E04815C0007E1481020F13801583
00FE903807870048EB03FE0038EB00F8263B7CB92B>I<EB0FC0EA03FF5AA2EA001F1480
A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25B
A2121FA25BA2123FA290C7FCA25AA2EA7E03A2EAFE07130612FCA2130E130C131C1318EA
7C38EA3C70EA1FE0EA0780123B7DB919>I<D803E0137F3A07F801FFE03A0E3C0781F03A
1C3E1E00F826383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA20000
140101FE5C5BA2150300015D5B15075E120349010F133016C0031F13700007ED80605B17
E0EE00C0000F15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267EA432
>110 D<EC1FC0ECFFF8903807E07E90380F801F90393F000F80017E14C0491307484814
E0485A4848EB03F0120F5B121F48481307A2127F90C7FCA2150F5A4815E0A2151F16C0A2
48EC3F8016005D157E007E5C4A5A003E495A003F495A6C495A6C6C48C7FC3807E07E3801
FFF038003F8024267DA428>I<90390F8003F090391FE00FFC903939F03C1F903A70F870
0F80903AE0FDE007C09038C0FF80030013E00001491303018015F05CEA038113015CA2D8
00031407A25CA20107140FA24A14E0A2010F141F17C05CEE3F80131FEE7F004A137E16FE
013F5C6E485A4B5A6E485A90397F700F80DA383FC7FC90387E1FFCEC07E001FEC9FCA25B
A21201A25BA21203A25B1207B512C0A32C3583A42A>I<02FC13C0903803FF0190380F83
8390383F01C790397E00EF8049137F485A4848133F000715005B485A001F5C157E485AA2
007F14FE90C75AA3481301485CA31403485CA314075D140F127C141F007E495A003E137F
381F01EF380F839F3903FF1F80EA00FC1300143F92C7FCA35C147EA314FE5C130190387F
FFF0A322357DA425>I<14FF010313C090380F80F090383E00380178131C153C4913FC00
01130113E0A33903F000F06D13007F3801FFE014FC14FF6C14806D13C0011F13E0130390
38003FF014071403001E1301127FA24814E0A348EB03C012F800E0EB07800070EB0F006C
133E001E13F83807FFE0000190C7FC1E267CA427>115 D<EB01C0497E1307A4130F5CA3
131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA313FE5BA312015BA312035BA312
075BA3120FEBC006A2140E001F130CEB801C141814385C146014E0380F81C038078780D8
03FEC7FCEA00F819357EB31E>I<01F8EB03C0D803FEEB07E0D8070F130F000E018013F0
121C12180038140700301403D8701F130112601500D8E03F14E000C090C7FC5BEA007E16
C013FE5B1501000115805B150316001203495B1506150E150C151C151815385D00015C6D
485A6C6C485AD97E0FC7FCEB1FFEEB07F024267EA428>118 D<903907E001F090391FF8
07FC9039783E0E0F9039E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF5A000E
4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214FEA24A
130CA20101141C001E1518003F5BD87F81143801835C00FF1560010714E03AFE0E7C01C0
D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267EA42F>120
D<13F8D803FE1470D8070F14F8000EEB8001121C121800381403003015F0EA701F126001
3F130700E0010013E012C05BD8007E130F16C013FE5B151F000115805BA2153F00031500
5BA25D157EA315FE5D1401000113033800F80790387C1FF8EB3FF9EB0FE1EB00035DA200
0E1307D83F805B007F495AA24A5A92C7FCEB003E007C5B00705B6C485A381E07C06CB4C8
FCEA01FC25367EA429>I<D901E01360D90FF813E0496C13C090383FFE0190397FFF0380
90B5EA07009038F81FFF3901E003FE9038C0001C495B5DC85A4A5A4A5A4AC7FC140E5C5C
14F0495AEB038049C8FC130E5B4913035B495B484813064848130E48C75AD80FFC137C39
1FFF81F8381E0FFFD838075B486C5B00605CD8E00190C7FC38C0007C23267DA427>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmcsc10 10 26
/Fn 26 122 df<DB7FC01330912607FFF81370023F13FE913AFFC01F80F0903A03FE0003
E1D907F8EB00F3D91FE0147B4948143F4948141F49C8120F4848150748481503A2484815
0148481500A2485A1870123F5B1830127FA349160012FFAB127F7F1830A2123FA27F001F
177018606C7E18E06C6C16C06C6C150118806C6C15036C6CED07006D6C5C6D6C141E6D6C
5CD907F85CD903FEEB01E0903A00FFC00FC0023FB5C7FC020713FC9138007FE0343D7ABA
41>67 D<B912C0A3C601C0C7FC6D48141FEF07E017031701A21700A21860A31870183016
18A31800A31638A21678ED03F891B5FCA3EC8003ED00781638A21618A21806A3180E93C7
120CA4181CA31838A2187818F817011703170F496CEC7FF0B9FCA337397DB83E>69
D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397CB822>73
D<B612E0A3000101C0C8FC6C90C9FCB3AD1706A5170E170CA3171CA3173C177CA217FC16
03EE0FF8486D137FB8FCA32F397CB839>76 D<B500C049B512E0A280C66C6C9039000FFC
00EF03F0D96FF86E5AD967FC6E5AA2EB63FEEB61FF8113606E7E6E7EA26E7E6E7E811407
6E7E81806E7F6F7E82153F6F7E82150F6F7E6F7EA26F7E6F138017C0167FEE3FE0EE1FF0
A2EE0FF8EE07FC17FE1603EE01FFA282177F173FA2171F170F13F0486C1507D807FE1503
B500F01401A217003B397CB844>78 D<B7FC16F016FE000190398001FF806C90C7EA3FE0
EE0FF0707E707E707EA2838284A695C7FC5E5F5F1603EE07F04C5AEE3F80DB01FEC8FC91
B512F816E091380003FCED00FEEE7F80707E707E707EA2160783A583A61930A283160319
70486D6D6C1360B66D14E094387F81C094383FC380CA380FFF00EF01FC3C3B7CB842>82
D<1407A24A7EA34A7EA3EC37E0A2EC77F01463A2ECC1F8A201017F1480A2903803007EA3
01067FA2010E80010C131FA2496D7EA2013FB57EA29038300007496D7EA3496D7EA20001
8149130012036D801207D81FE0903801FF80D8FFF8010F13F8A22D2C7DAB33>97
D<B612F015FE3A07F8003F806C48EB0FC0ED07E0ED03F016F8150116FCA516F8A2ED03F0
1507ED0FE0ED3F80913801FF0090B512F815FF9039F0001FC0ED07E0ED03F0ED01F816FC
150016FEA616FC1501A2ED03F8ED07F0ED0FE0486CEB3FC0B7120015F8272B7CAA30>I<
91383FC006903901FFF80E90390FE03E1E90381F0007017EEB03BE01F8EB01FE48481300
4848147E0007153E485A001F151E5B003F150E90C8FC5A1606A212FE1600AA007F1506A3
7E6D140E001F150C7F000F151C6C6C1418000315386C6C14706C6C14E0017EEB01C0011F
EB078090390FE03E00903801FFF89038003FC0272D7BAB31>I<B612F015FE3907F8007F
6C48EB0FC0ED03E06F7E6F7E167C167E82A2EE1F80A217C0160FA317E0AA17C0A3EE1F80
A217005E163E5E16FC4B5A4B5AED0FC0486CEB7F80B600FEC7FC15F02B2B7CAA34>I<B7
12E0A23907F8000F6C481303ED00F01670A21630A41618A215C01600A31401A2140790B5
FCA2EBF0071401A21400A21606A21500A2160CA4161CA2163C167C16F8486C1307B7FCA2
272B7CAA2E>I<B712C0A23907F8001F6C481303ED01E01500A21660A41630A215C01600
A31401A2140790B5FCA2EBF0071401A21400A492C7FCAB487EB512E0A2242B7CAA2C>I<
91383FE003903901FFF807903907E01E0F90391F00078F017EEB01DF496DB4FC48488048
4880484880485A001F815B003F8190C8FC5A82A212FE93C7FCA892383FFFF8A2007F0200
1380EE3F00A27E7F121F7F120F6C7E6C7E6C6C5C6C7E017E5C011FEB01CF903907E00F87
903901FFFE039026003FF0C7FC2D2D7BAB35>I<B539C07FFFE0A23B07F80003FC006C48
6D5AB190B6FCA29038F00001B2486C497EB539C07FFFE0A22B2B7CAA33>I<B512C0A238
07F8006C5AB3B3487EB512C0A2122B7CAA19>I<B512E0A2D807F8C8FC6C5AB3A61660A4
16C0A31501A21503A21507ED1F80486C13FFB7FCA2232B7CAA2B>108
D<D8FFF0ED3FFC6D157F0007178000031700017C15DFA26DEC019FA36DEC031FA26D6C13
06A36D6C130CA26D6C1318A26D6C1330A36D6C1360A2027C13C0A391383E0180A291381F
0300A3EC0F86A2EC07CCA3EC03F8A2486C6C5AA2D81FE0ED3F803CFFFC00E007FFFCA236
2B7CAA3E>I<D8FFF0903807FFE07F0007020013006C6C143C7F017F14187F806D7E130F
806D7E6D7EA26D7E6D7E147E147FEC3F80141F15C0EC0FE0EC07F0140315F8EC01FC1400
15FE157FED3F98151F16D8ED0FF81507A215031501A2486C13001678D81FE01438EAFFFC
16182B2B7CAA33>I<EC7FC0903803FFF890380FC07E90393F001F80017CEB07C04848EB
03F048486D7E4913004848147C000F157E484880A248C8EA1F80A24816C0A2007E150FA2
00FE16E0AA007FED1FC0A36C16806D143F001F1600A26C6C147E6C6C5CA26C6C495A6C6C
495AD8007CEB07C0013FEB1F8090260FC07EC7FC903803FFF89038007FC02B2D7BAB35>
I<B612E015FC3907F800FE6C48EB1F80ED0FC0ED07E016F01503A216F8A516F0A2150716
E0ED0FC0ED1F80EDFE0090B55A15E001F0C8FCB1487EB512C0A2252B7CAA2E>I<B67E15
F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B5AA24B5A033FC7FC15FE90B512F0
5D9038F001F8EC007E816F7EA26F7EA582A4171816F015071738486C903803F830B5D8C0
0113709238007FE0C9EA1F802D2C7CAA32>114 D<017F13603901FFE0E0380780F9380E
001F48130748130312780070130100F01300A315607EA26C14007E127F13C0EA3FFEEBFF
E06C13F8000713FE6C7FC61480010F13C01300EC0FE01407EC03F01401A212C01400A37E
15E06C1301A26CEB03C06CEB0780B4EB0F0038F3E01E38E0FFF838C01FE01C2D7BAB26>
I<007FB712C0A23A7E003FC00F007890381F8003007015011600126000E016E0A2481660
A5C71500B3A8EC7FE0011FB57EA22B2B7DAA31>I<B539C007FFE0A2D807F8C713006C48
143CA21618B3A916386C6C1430A2000015706D5C017C5C6D13016D495A90260F800FC7FC
903803E03C903800FFF8EC3FC02B2C7CAA33>I<3B7FFF800FFFC0A2000790390003FE00
6C48EB01F800015D000015C0017F13036D5C6E48C7FC90381FC0066D6C5A151C6D6C5A90
3803F83001015BECFCE06D6C5AEC7F80A2143F6E7E140F4A7E4A7E1433EC63F8ECE1FCEC
C0FE903801807E0103137F49486C7E0106131F4980011C6D7E496D7E0130130301708001
F06D7E000181000781D81FF8491380B46C4913F8A22D2B7DAA33>120
D<B56CEB1FFEA2D80FFCC7EA0FF00003ED07C01780000116006C6C1406017F140E160C6D
6C5B6D6C133816306D6C5B6D6C13E05E6D6C485A903801FC0393C7FC903800FE06EC7F0E
150CEC3F9CEC1FF85D140F6E5AAF4A7E49B57EA22F2B7EAA33>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmr10 10 79
/Fo 79 125 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F
8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A328
01F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F
00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B
7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C
1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203
C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500
C1B51280A3413B7FBA45>I<133C137EA213FE1201EA03FC13F0EA07E0EA0FC0EA1F80EA
1E005A5A5A12C00F0F6FB92A>19 D<030C1303031E497EA2033E130FA2033C91C7FCA203
7C5BA20378131EA303F8133EA24B133CA20201147CA24B1378A2020314F8A24B5BA30207
1301007FB91280BA12C0A26C1880C7271F0007C0C7FC021E5CA3023E130FA2023C91C8FC
A2027C5BA20278131EA302F8133E007FB91280BA12C0A26C1880280003E000F8C8FC4A5B
A301071301A202805BA2010F1303A202005BA2491307A2011E5CA3013E130FA2013C91C9
FCA2017C5BA20178131EA20130130C3A4A7BB945>35 D<121C127FEAFF80A213C0A3127F
121C1200A412011380A2120313005A1206120E5A5A5A12600A1979B917>39
D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA212075B120F90C7FC
A25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F1203A26C7EA26C7E
1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12C07E12707E7E7E120F
6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA21480A3EB07C0A6EB03E0
B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA2485A485AA2485A48C7
FC120E5A5A5A5A5A13527CBD20>I<15301578B3A6007FB812F8B912FCA26C17F8C80078
C8FCB3A6153036367BAF41>43 D<121C127FEAFF80A213C0A3127F121C1200A412011380
A2120313005A1206120E5A5A5A12600A19798817>I<B512FCA516057F941C>I<121C127F
EAFF80A5EA7F00121C0909798817>I<150C151E153EA2153C157CA2157815F8A215F014
01A215E01403A215C01407A21580140FA215005CA2141E143EA2143C147CA2147814F8A2
5C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2133C137CA2137813F8A25B
1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A
12601F537BBD2A>I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007
147C48487FA248C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C15
80A36C15006D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FC
EB03F8233A7DB72A>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB5
12F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E
486D7E123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D
4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B491303
48481400485A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF
4913C03901F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC8
5A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E
7EED7F80A216C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070
ECFF006C495A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A
>I<1538A2157815F8A2140114031407A2140F141F141B14331473146314C313011483EB
030313071306130C131C131813301370136013C01201EA038013005A120E120C5A123812
305A12E0B712F8A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780
133C9038F003F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE903878
0F803907E007E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490
C71300485C12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F8000
01B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90
383F800790387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2
485AA3127F90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E
497FA249148016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B
15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<123012
38123E003FB612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5D
C712014A5A92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495A
A3133FA5137FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901
E001F848486C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C
133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13
F801F07F3903E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F
0078EC0FE000F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C13
1ED807E0137C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF
017F13C09038FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090
C7FCA248EC1FC0A616E0A56C143FA27F123F001F147FA26C6C13FF3907E001DF0003149F
3801F0033900FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C
5BA24A5A4A5A49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC023
3A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C09
2479A317>I<121C127FEAFF80A5EA7F00121CC7FCB2121C127F5A1380A4127F121D1201
A412031300A25A1206A2120E5A121812385A1260093479A317>I<007FB812F8B912FCA2
6C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61 D<EB3FE03801FFFE3907C0
3F80390E000FC0003CEB07F000301303007014F8007C130100FE14FC7EA4127E003CEB03
F8C7FCEC07F0A2EC0FE0EC1F80EC3F00147E147C5C495A5C495A5CA249C7FCA31306AA90
C8FCA8130EEB3F80497EA56D5A010EC7FC1E3B7CBA27>63 D<1538A3157CA315FEA34A7E
A34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7FEC180FA202387FEC3007A202707F
EC6003A202C07F1501A2D901807F81A249C77F167FA20106810107B6FCA24981010CC712
1FA2496E7EA3496E7EA3496E7EA213E0707E1201486C81D80FFC02071380B56C90B512FE
A3373C7DBB3E>65 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707E
A2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0
EE07F0707E707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486D
EB7FF0B812C094C7FC16F832397DB83B>I<913A01FF800180020FEBE003027F13F8903A
01FF807E07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE15
3F12014848151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD
127F6DED0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F
15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F
13F002011380313D7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0F
F0EE03F8707E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF
0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7
FC16F816C036397DB83F>I<B812FCA30001903880000F6C90C71201EE007E173E171E17
0EA31706A317078316C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A21500
A21860A318E093C712C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9FC
A333397DB839>I<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170C
A4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692
C8FCAD4813C0B612C0A32F397DB836>I<DBFF8013C0020FEBF001023F13FC9139FF803F
03903A03FC000787D90FF0EB03CF4948EB00EF4948147F4948143F49C8121F485A484815
0F48481507A248481503A2485A1701123F5B007F1600A448481600AB93B6FCA26C7E9338
007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E6D6C14FF6D6C14
EFD90FF8EB03C7D903FEEB0783903A00FFC03F0191393FFFFC00020F01F0130002001380
383D7CBA41>I<B648B512FEA30001902680000313006C90C76C5AB3A491B6FCA391C712
01B3A6486D497EB648B512FEA337397DB83E>I<B612C0A3C6EBC0006D5AB3B3AD497EB6
12C0A31A397EB81E>I<B649B5FCA3000101809038007FF06C90C8EA3F80053EC7FC173C
17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A7F
4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E707E
A2707EA2707E707EA2707E707F8484486D497FB6011FEBFF80A339397DB841>75
D<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317F0A21601160316
0FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA20001F0FC002600DFC0
ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2
027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180
A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D4849
7EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080C69238007FE06EEC
1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7EA26E7E6E7E8114
0F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F
1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E486C153E487ED8
0FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138FE01FC903901F800
7ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F
4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FC
AC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F00031700
6C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC9039
00FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE000190398001FF80
6C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FCA2EE07F817
F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397DB839>I<B6
12FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA2
4C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82707E
707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C5A04011306933800
FE0ECAEA3FFCEF07F0393B7DB83D>82 D<D90FF813C090383FFE0190B512813903F807E3
3907E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A36C
1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F1480
010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA216
F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8
010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB001F273E0001FE1303
48EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF80
011FB612E0A335397DB83C>I<B6903807FFFEA3000101809038007FE06C90C8EA1F80EF
0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6C
EB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80373B7DB83E>I<B500
FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E1403017F93C7FCA2
80013F1506A26E140E011F150C80010F5DA28001075DA26E147001031560A26D6C5CA280
6D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C020F1318A26E6C5A
A215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E>I<B5
D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED
03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067F
A26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE60
07A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0C
A203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA202
015E4B1407A2020093C8FC4B80503B7EB855>I<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A4
0D5378BD17>91 D<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D537FBD17>93
D<EA01801203EA0700120E5A12181238123012701260A212E05AA412CEEAFF8013C0A312
7FA2EA3F80EA0E000A197AB917>96 D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0
486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA
1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0F
E0781FF03A03FFF00FE03A007F8007C026277DA52A>I<EA03F012FFA3120F1203B0EC1F
E0EC7FF89038F1E03E9039F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED
00FCA216FEA2167E167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0F
C09039C7801F00903881E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF80
90387E03E03901F80070484813F83907E001FC380FC003A2EA1F80123F90380001F848EB
00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C
13706C6C13E039007C07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F
150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F4848133F4848131FA2484813
0F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEB
EFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF
90387C0FC03901F803E03903F001F0D807E013F8380FC0004848137CA248C7127E153E5A
153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E
6D131CD801F013386C6C137090387E03E090381FFF80903803FC0020277EA525>I<147E
903803FF8090380FC1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCADB512FC
A3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C
3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A248486C7EA86C6C
485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06C
B512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E140348140116F848
1400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39
007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F
9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280
A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3
AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01
F813FFA313071301B3B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F00EA0F
FEEA03F8154984B719>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC0160015
7C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E
8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C
>I<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000
FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F70013
CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA3
40257EA445>I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F700
13FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE90380FFF
8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090C712074815
E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D
131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>
I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB07E049EB
03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB
0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328
357EA42E>I<D903F813C090381FFE0190387E07819038FC01C33903F000E30007147748
48133749133F001F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C
6C137F6C6C13EF3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FC
A328357DA42C>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE
9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313
E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C
13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303A37E15806C1307
7EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A51338A31378A313
F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03017E1300
6D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407
B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03
FC07E00029267EA42E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D1480
00011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001
075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1F
FFE03FFEA3260FF8009038000FF86C48017EEB03E018C00003023EEB0180A26C6C013FEB
0300A36C6CEC8006156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF038D91F83
1430150102C3EBF87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F804A133F
A2010192C7FC4A7FA20100141E4A130E0260130C37257EA33C>I<B538807FFFA33A03FE
003FF00001EC1F80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB
03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7E090380383F090380703F8EB060149
6C7E011C137E49137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C
>I<B538803FFEA33A0FF8000FF06C48EB07C00003EC03806C7E16007F00001406A2017E
5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FBC7FCA214
FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0E
EA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07
F00038EB0FE012300070EB1FC0EC3F800060137F150014FE495AA2C6485A495AA2495A49
5A495AA290387F000613FEA2485A485A0007140E5B4848130C4848131CA24848133C48C7
127C48EB03FC90B5FCA21F247EA325>I<BD12C0A25202809653>124
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr6 6 1
/Fp 1 57 df<137F3803FFC0380781E0380E00704813380018131C1238A3123C003F1338
381FC078EBE0F0380FF9E03807FF80120114C0000713F0380F0FF8381C03FC383801FE38
70007E141F48130F1407A314060070130E0078130C6C1338001F13F03807FFC0C6130018
227DA01E>56 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmmi8 8 9
/Fq 9 101 df<13FC13FFEB1FC0130F6D7EA36D7EA2130180A26D7EA3147EA280A36E7E
A2140F81A24A7E143F147FECF3F0EB01E3EB03C190380781F8130F49C67E133E5B49137E
485A48487F1207485A4848EB1F8048C7FC127E48EC0FC048EC07E000701403232F7DAD29
>21 D<15C0140114031580A214071500A25C140EA2141E141CA2143C143814781470A214
F05CA213015CA213035C130791C7FCA25B130EA2131E131CA2133C1338A21378137013F0
5BA212015BA212035BA2120790C8FC5A120EA2121E121CA2123C1238A212781270A212F0
5AA21A437CB123>61 D<1670A216F01501A24B7EA21507150DA2151915391531ED61FC15
6015C0EC0180A2EC03005C14064A7F167E5C5CA25C14E05C4948137F91B6FC5B0106C712
3FA25B131C1318491580161F5B5B120112031207000FED3FC0D8FFF8903807FFFEA22F2F
7DAE35>65 D<013FB6FC17C0903A00FE0007F0EE01F84AEB00FC177E1301177F5CA21303
177E4A14FEA20107EC01FC17F84AEB03F0EE07E0010FEC1FC0EE7F009138C003FC91B55A
4914FE9139C0003F804AEB0FC017E0013F140717F091C7FC16035BA2017E1407A201FE15
E0160F4915C0161F0001ED3F80EE7F004914FEED03F80003EC0FF0B712C003FCC7FC302D
7CAC35>I<013FB512FEEEFFC0903A00FE0007F0EE01F84AEB007E8301018118804A140F
18C00103150718E05CA21307A25CA2130FA24A140FA2131F18C04A141FA2013F1680173F
91C81300A249157EA2017E5D5F01FE14014C5A494A5A4C5A00014BC7FC163E4914FCED03
F00003EC1FC0B7C8FC15F8332D7CAC3A>68 D<013FB71280A2D900FEC7127F170F4A1407
A20101150318005CA21303A25C16300107147094C7FC4A136016E0130F15019138C007C0
91B5FC5BECC0074A6C5AA2133FA20200EB000CA249151C92C71218017E1538173001FE15
705F5B4C5A000115034C5A49140F161F00034AB4C7FCB8FC5E312D7DAC34>I<92387FC0
03913903FFF80791391FC03E0F91397E00071FD901F8EB03BF4948EB01FED90FC0130049
48147E49C8FC017E157C49153C485A120348481538485AA2485A173048481500A2127F90
CAFCA35A5AA292381FFFFCA29238003FC0EE1F80163F1700A2127E5E167E7EA26C6C14FE
000F4A5A6C7E6C6C1307D801F8EB1E3CD8007EEBFC3890391FFFE018010390C8FC302F7C
AD37>71 D<013FB6FC17E0903A00FE0007F0EE01FC4AEB007EA2010181A25C1880010316
005F5CA2010715FEA24A5C4C5A010F4A5A4C5A4AEB1F8004FFC7FC91B512F84914C00280
C9FCA3133F91CAFCA35B137EA313FE5BA312015BA21203B512E0A2312D7DAC2D>80
D<151FEC03FFA2EC003FA2153EA2157EA2157CA215FCA215F8A21401EB07E190381FF9F0
EB7C1DEBF80FEA01F03903E007E0EA07C0120FEA1F8015C0EA3F00140F5A007E1480A214
1F12FE481400A2EC3F021506143E5AEC7E0E007CEBFE0C14FC0101131C393E07BE18391F
0E1E38390FFC0FF03903F003C0202F7DAD24>100 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmcsc10 8 28
/Fr 28 122 df<1238127C12FEA212FF127F123B1203A41206A3120CA212181230127012
200814798615>44 D<1238127C12FEA3127C12380707798615>46
D<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500
FC14F0B0007C14E0A3007E1307003E14C0A2001E1480001F130F6C14006D5A3807C03E38
03F0FC3800FFF0EB3FC01C2D7CAB25>48 D<EB7F803801FFF0380781FC380E007F0018EB
1F805A0070EB0FC00060EB07E0127800FC14F07E1403A3007C1307C7FC15E0A2140F15C0
EC1F8015005C147E14785C495A495A495A49C7FC131C5B5B4913305B485A48C712601206
4814E0001FB5FC5A4814C0B6FCA21C2C7CAB25>50 D<000CEB0180380F800F90B512005C
5C14F014C0D80C7CC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F801E497E000EEB078000
0C14C0C7FCEC03E0A315F0A31238127C12FCA215E05A0060130715C0007014800030130F
6CEB1F00000E133E380780F83801FFE038007F801C2D7CAB25>53
D<EC0380A34A7EA24A7EA34A7E141BA2EC31F8A2EC71FC1460A2ECE0FEECC07EA249487E
A349486C7EA249800106130FA249801507A2011FB57EA29038180003496D7EA201708001
601300A24980167EA2484880A2486C1580D80FE0EC7FC0D8FFFC903807FFFEA22F2F7DAE
36>65 D<D8FFF892380FFF806D5D0003EFE00000015F01BE1537A2019F1567A3D98F8014
C7A2D987C0EB0187A3D983E0EB0307A2D981F01306A3D980F8130CA2027C1318A36E1330
A26E1360A391380F80C0A2913807C180A3913803E300A2EC01F6A3EC00FCA2486C1378D8
0FF04B7EB50203B512801530392D7CAC42>77 D<D8FFF8903801FFFE7FD801FE9038001F
E06DEC078001BFEC0300EB9F8080138FEB87E0801383EB81F880EB80FE147E801580141F
EC0FC015E0EC07F0140315F8EC01FC1400157E157F153FED1F8316C3ED0FE31507ED03F3
16FB15016FB4FCA28282A282486C80D80FF080B5FC822F2D7DAC36>I<90383F80103901
FFF0303907C07C70380F000E001CEB07F0003C130300381301481300A200F01470A31530
7EA26C1400127EEA7F80EA3FF013FF6C13F06C13FE6C7F000114806C6C13C0010713E090
38007FF0EC07F81401140015FC157C12C0153CA37E1538A26C14786C14706C14E06CEB01
C038E7800339E1F00F0038C07FFE38800FF01E2F7BAD29>83 D<B539F001FFFEA2D803FC
C7EA1FE06C48EC0780EE0300B3AC000015067F137C5E7F011E5C011F5CD907805B903903
E001C0903901F80F809026007FFEC7FCEC0FF02F2E7DAC36>85 D<B53CC03FFFE003FFF0
A22807F80001FEC7EA7F806C484AEC1E000300151C7F00016F1418167E6D1738000003FF
1430A26D1770017E496D1360169F017F17E06D9026030FC05BA2D91F804B5A92380607E0
A2D90FC04BC7FC92380C03F0A2D907E0150692381801F8A2D903F05D92383000FCA2D901
F85D4B137EA2D900FC5D4B133FA2027E5DDA7F80EB1FE0A2023F5D92C7120FA26E5D021E
1407A2020E92C8FC020C80442E7EAC49>87 D<14E0A2497EA3497EA3EB067CA2EB0E7EEB
0C3EA2497EA3496C7EA201707FEB6007A2496C7E90B5FC4880EB8001A2D803007F1400A2
0006147CA2000F147E123F3AFFC003FFE0A223237EA229>97 D<B512FEECFFC0390FC007
E00007EB01F8EC00FC157C157EA5157C15FCEC01F8EC07F090B512C015809038C007F0EC
01F8EC00FC157E153E153FA5153E157E15FC1401000FEB03F0B612E0150020227EA127>
I<903803F80290381FFE0690387E038E3901F800DED803E0137E4848133E485A48C7121E
A2003E140EA2127E007C1406A212FC1500A7007C1406A2127E123E150C7EA26C6C13186C
6C13306C6C1360D801F813C039007E038090381FFF00EB03F81F247DA227>I<B512FCEC
FF80390FC00FE00007EB01F06E7E157C81A281A2ED0F80A316C0A91680A2151F1600151E
153E5D5D4A5A000FEB07E0B6128002FCC7FC22227EA129>I<B612F8A2380FC0010007EB
007815381518151CA2150C140CA31500141C143CEBFFFCA2EBC03C141C140CA21503A214
001506A3150EA2151E153E000F14FCB6FCA220227EA125>I<B612F8A2380FC0010007EB
007815381518151CA2150CA2140CA21500A2141C143CEBFFFCA2EBC03C141C140CA491C7
FCA7487EB5FCA21E227EA124>I<3AFFFE0FFFE0A23A0FE000FE006C48137CAC90B512FC
A29038C0007CAE486C13FE3AFFFE0FFFE0A223227EA129>104 D<EAFFFEA2EA0FE0EA07
C0B3AAEA0FE0EAFFFEA20F227EA114>I<B5FCA2EA0FE06C5AB21530A41570A2156015E0
14011403000F130FB6FCA21C227EA122>108 D<D8FFC0ECFFC06D5B000FEDFC0000075D
D806F0EB0378A301781306A26D130CA36D1318A26D1330A39038078060A3903803C0C0A2
903801E180A3903800F300A2147EA3000F133CD81F8014FCD8FFF090380FFFC014182A22
7DA132>I<3AFFC001FFE013E03A07F0003F00151ED806F8130C7F137C7F7FA2EB0F80EB
07C014E01303EB01F014F81300147C143EA2141FEC0F8C15CC1407EC03EC15FC14011400
157CA2000F143C486C131CEAFFF0150C23227EA129>I<EB07F8EB3FFF9038FC0FC03901
F003E048486C7E48486C7E4848137C48C77EA2003E80A2007E1580007C140FA200FC15C0
A8007C1580007E141FA3003E15006C143EA26C6C5B6C6C5B6C6C485A6C6C485A3900FC0F
C0D93FFFC7FCEB07F822247DA22A>I<B512F814FF390FC00FC00007EB03E06E7E811400
81A45D14015D4A5AEC0FC090B5C7FC14FCEBC01F6E7E6E7E140381A481A3163015F8380F
E0013AFFFE00FC60ED7FC0C8EA1F8024237EA128>114 D<3801F8083807FF18381E07B8
383C01F8383800785A143812F01418A36C13007E127EEA7FE0EA3FFE381FFF806C13C000
0313E038007FF0EB07F81301EB007CA2143C12C0A46C133814786C137000FC13E038EF01
C038C7FF803880FE0016247DA21E>I<007FB6FCA2397C03E01F00701407006080A200E0
1580A200C01401A4000091C7FCB3497E48B512C0A221227EA127>I<3AFFFE01FFE0A23A
0FE0003F006C48131E150CB3A400035C7F12015D6C6C5B01785B90383E0380D90FFFC7FC
EB01F823237EA129>I<D8FFF8EB1FF8A2D80FE0EB0FE00007EC07800003EC06006D130E
6C6C130C00005C6D1338017E1330013E5B013F13E06D6C5AEC8180EB0FC3D907E3C7FC14
E6EB03FE6D5A5C1300AB130190381FFF80A225227FA129>121 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmr8 8 74
/Fs 74 125 df<14FF010713E090381F80F090383E003849137C4913FC485A1203491378
153092C7FCA7157CB612FCA23803E000157CB3A5486C13FE3A7FFF0FFFE0A2232F7FAE27
>12 D<13E0EA01F01203A2EA07E0EA0FC0EA1F00121E5A5A12E012400C0C72AD23>19
D<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A
AD14>39 D<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A2121E
A35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F013
701338131C130E1307130310437AB11B>I<12C07E12707E7E7E120FEA0780120313C0EA
01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A313F0
A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<123C127EB4FCA2
1380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>44
D<B512C0A412047F9018>I<123C127E12FFA4127E123C08087A8714>I<EB3FC0EBFFF038
03E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C14E0
A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC01C2D
7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC14
F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A495A
495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FCA2
1C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F13
00A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C0
140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F
00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01BE
1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C5A
123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB0180
380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F80
1F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E00060
14C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<EB
03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091C7
FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814E0
A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F003803
C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E03970
0001C000601480140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FCA2
5B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I<EB1FC0EBFFF03803E07C
3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381FC00F01E01300EBF8
1E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D81F0013C0001E13
3F48EB1FE0007C13070078EB03F012F84813011400A46C14E000781301007C14C0003C13
036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23>I<EB3F80EBFFF038
03E0783807C03E48487E48487E003E14801407007E14C0127C00FC14E01403A315F0A500
7C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC390383F03E013001407A2
15C0A2140F001E1480003F14005C143E143C003E5B001C5B380E03E03807FF80D801FEC7
FC1C2D7DAB23>I<123C127E12FFA4127E123C1200AD123C127E12FFA4127E123C081D7A
9C14>I<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FCA2EC70FEEC607EA24A7EA349
486C7EA2010380EC000FA201066D7EA3496D7EA2011FB57EA29038180001496D7EA34914
7EA201E0147F4980A20001ED1F801203000716C0D80FF0EC3FE0D8FFFC0103B5FCA2302F
7EAE35>65 D<B612FCEDFF803A03F8000FC00001EC03F06F7E6F7E82167E167FA6167E16
FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0ED01FC6F7E167F821780161F
17C0A61780163F17005E16FEED03FC0003EC0FF0B712C04BC7FC2A2D7DAC32>I<DA1FF0
13C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F4848140F
48481407A248481403121F491401123F90C8FC481500A300FE1600AB127F17C0A27E7F00
1F15016D1580120F6C6C1403EE07006C6C14066C6C140ED8007C5C013F147890390F8001
E0903903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>I<B612F815FF3A03F8001FE000
01EC03F0ED00F8167E82EE1F80160F17C0EE07E0A2EE03F0A217F81601A317FCAA17F8A3
EE03F0A217E0160717C0160FEE1F80EE3F00167E5EED03F00003EC1FE0B7128003F8C7FC
2E2D7DAC36>I<B712FEA23903F800010001EC003E828282A282A3178016011518A293C7
FCA31538157815F890B5FCA2EBF800157815381518A21760A392C712C0A4160117801603
A21607160F163F0003913801FF00B8FCA22B2D7EAC30>I<B712FCA23903F800030001EC
007C163E161E160EA21606A3160716031518A21600A31538157815F890B5FCA2EBF80015
7815381518A592C7FCAB487EB512F8A2282D7EAC2E>I<DA1FF013C09138FFFE01903903
F00F8390390F8001E3013FC71277017C143F4848141F4848140F48481407A24848140312
1F491401123F90C8FC481500A300FE1600A992381FFFFEA2007F9138001FE0EE0FC0A27E
7F121F7F120F6C7EA26C7E6C6C141FEA007C013F143FD90F8013F3903903F007C10100B5
1200DA1FF813002F2F7CAD37>I<B539F03FFFFCA2D803FCC713006C48147EB290B612FE
A201F8C7127EB3486C14FFB5D8F03F13FCA22E2D7DAC35>I<B512F0A23803FC006C5AB3
B3A3487EB512F0A2142D7EAC19>I<90387FFFF0A201001300147EB3AD123812FEA314FE
5C1278387001F86C485A381E07E03807FF80D801FCC7FC1C2E7DAC24>I<B500F0EB7FFE
A2D803FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7FC150E5D5D15F0EC01
C04A5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038FE007F497F49806F7E
6F7E1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0B5D8F001B5FCA2302D
7DAC37>I<B512F8A2D803FCC8FC6C5AB3A7160CA41618A41638A2167816F81501ED07F0
0003141FB7FCA2262D7EAC2C>I<D8FFF8923807FFC06D5D0003EFF00000015F01BE151B
A2019F1533A3D98F801463A2D987C014C3A2D983E0EB0183A3D981F0EB0303A2D980F813
06A3027C130CA26E1318A36E1330A291380F8060A2913807C0C0A3913803E180A2913801
F300A3EC00FEA2157C487ED80FF04B7EB5D93801B512C0A23A2D7DAC41>I<D8FFF89038
03FFFC7F00019138003FC06DEC0F006D1406EBBF80A2EB9FC0EB8FE0138780EB83F81381
80EB80FE147E147FEC3F80EC1FC0140F15E0EC07F0140315F8EC01FC140015FE157FED3F
86151F16C6ED0FE6150716F6ED03FE1501A21500167E163EA2486C141ED80FF0140EB5FC
16062E2D7DAC35>I<EC3FF0903801FFFE903907E01F8090391F8007E090393E0001F001
FCEB00FC4848147E4848804848EC1F8049140F000F16C04848EC07E0A248C8EA03F0A248
16F8A2007E1501A200FE16FCAA007FED03F8A36C16F06D1407001F16E0A26C6CEC0FC06D
141F000716806C6CEC3F006C6C147E6C6C5C017E495A90391F8007E0903907E01F809026
01FFFEC7FC9038003FF02E2F7CAD37>I<B612FCEDFF803A03F8000FE00001EC03F0ED00
F882167E167F821780A617005E167E5E5EED03F0ED0FE090B6128003FCC7FC01F8C9FCB2
487EB512F0A2292D7EAC30>I<B612C015FC3903F8007F0001EC0FC06F7E6F7E6F7E8215
0082A55E15015E4B5A4B5A4B5A037FC7FC90B512FC15F09038F800FC153E6F7E150F826F
7EA582A5170316F815031707486C903801FC0EB539F000FE1CEE3FF8C9EA07E0302E7DAC
34>82 D<90383F80303901FFF0703807C07C390F000EF0001E1307481303481301140012
7000F01470A315307EA26C1400127E127FEA3FE013FE381FFFE06C13FC6C13FF00011480
D8003F13E013039038003FF0EC07F81401140015FC157C12C0153CA37EA215787E6C1470
6C14F06CEB01E039F78003C039E3F00F0038E07FFE38C00FF01E2F7CAD27>I<007FB712
F8A29039000FC003007C150000701638A200601618A200E0161CA248160CA5C71500B3A9
4A7E011FB512E0A22E2D7EAC33>I<B539F003FFFCA2D803FCC7EA3FC06C48EC0F001606
B3AB160E0000150C7F161C017C1418017E14386D5C6D146090390F8001E0903907E00380
902601F80FC7FC9038007FFCEC0FF02E2E7DAC35>I<B500C090380FFFC0A2D807FCC738
03FE006C48EC00F800015E5F6C7E5F6D1401017E5DA26D4AC7FCA26E5B011F140680010F
5CA26D6C5BA26E133801031430A26D6C5BA26E13E001005C8091387E0180A26E48C8FCA2
1583EC1F86A2EC0FCCA215FC6E5AA26E5AA36E5AA26E5A322E7FAC35>I<B53C801FFFF0
01FFF8A22707FC000190C7EA3FC0D803F06D48EC1F00047E140EA26C6C027F140CA26D17
1C0000DBDF801318A26D1738017E9026018FC01330A2017F17706D90260307E01360A202
8016E0011F90260603F05BA202C01501010F90260C01F85BA202E01503010790261800FC
90C7FCA202F05D010349EB7E06A202F8150E010149EB3F0CA202FC151C010049EB1F98A2
02FE15B8DA7F80EB0FF0A2023F5D92C71207A26E5D021E1403A2020E5D020C1401452E7F
AC48>I<3B7FFFE003FFF8A2000390C713806C48EC7E000000157C017F14786D14706E5B
6D6C5B6D6C485A15036D6C48C7FC903803F80601015BECFC1C6D6C5AEC7F305DEC3FE06E
5A140F816E7E81140DEC1DFCEC38FEEC307F14609138E03F8049486C7EEC800FD903007F
496D7E010E6D7E130C011C6D7E496D7E49147E167F01F0EC3F80000316C0D80FF8EC7FE0
D8FFFE0103B5FCA2302D7EAC35>I<003FB612C0A29038F0001F0180EB3F80003EC7EA7F
00123C003814FE4A5A5A4A5A4A5A12604A5A4A5AA2C7485A4AC7FCA214FE495AA2495A5C
1307495AA2495A495A166049C7FC13FEA2485A484814E0A2485A484814C01501485A4848
1303150748C7121F00FE14FFB7FCA2232D7CAC2B>90 D<EAFFE0A3EAE000B3B3B3A7EAFF
E0A30B4379B114>I<EAFFE0A31200B3B3B3A712FFA30B437FB114>93
D<12035A120E5A5A123012701260A212E05AA312DEB4FC1380A2127FA2EA3F00121E0915
7BAD14>96 D<13FF000713C0380F01F0381C00F8003F137C80A2143F001E7FC7FCA4EB07
FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F00127E00FE14065AA3143F7E007E137F007F
EBEF8C391F83C7FC390FFF03F83901FC01E01F207D9E23>I<EA07C012FFA2120F1207AC
14FE9038C7FF809038CF03E09038DC01F09038F8007C49137E49133E497F1680A2150F16
C0A9ED1F80A216005D6D133E6D5B01B05B9038BC01F090380E07E0390607FF80260001FC
C7FC222F7EAD27>I<EB1FE0EB7FFC3801F01E3803E0073907C01F80EA0F80EA1F005A00
3EEB0F00007E90C7FCA2127C12FCA9127EA215C07E6C130101801380380FC0033907E007
003801F03E38007FF8EB1FC01A207E9E1F>I<15F8141FA214011400ACEB0FE0EB7FF838
01F81E3803E0073807C003380F8001EA1F00481300123E127EA25AA9127C127EA2003E13
017EEB8003000F13073903E00EFC3A01F03CFFC038007FF090391FC0F800222F7EAD27>
I<EB1F80EBFFF03803E0783807C03E380F801E381F001FEC0F80123E007E130715C0127C
12FCA3B6FCA200FCC8FCA5127EA2003E14C0123F6C1301390F80038001C013003803E00F
3801F03C38007FF8EB1FC01A207E9E1F>I<EB03F0EB0FFCEB3E1EEB7C3F13F8EA01F0A2
3803E00C1400AAB512E0A23803E000B3A6487E387FFF80A2182F7FAE16>I<013F13F890
38FFC3FE3903E1FF1E3807807C000F140C391F003E00A2003E7FA76C133EA26C6C5A0007
1378380FE1F0380CFFC0D81C3FC7FC90C8FCA3121E121F380FFFF814FF6C14C04814F039
1E0007F848130048147C12F848143CA46C147C007C14F86CEB01F06CEB03E03907E01F80
3901FFFE0038003FF01F2D7E9D23>I<EA07C012FFA2120F1207AC14FE9038C3FF809038
C703E09038DE01F013F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2222E7EAD27>I<
EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8EA07C012FFA2120F1207B3A5EA0FE0EAFF
FCA20E2E7EAD14>I<130FEB1F80EB3FC0A4EB1F80EB0F0090C7FCA8EB07C013FFA2130F
1307B3AD1230127838FC0F80A21400485AEA783EEA3FF8EA07E0123C83AD16>I<EA07C0
12FFA2120F1207ADEC1FFEA2EC0FF0EC07C05D020EC7FC5C5C5C5CEBC3C013C7EBCFE0EB
DFF013F9EBF0F8497EEBC07E143E80816E7E14076E7E816E7E486C487E3AFFFE07FF80A2
212E7EAD25>I<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>I<2607C0
7FEB07F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F803B07DC00F9C00F01F8D9
FF8013C04990387F000749137EA249137CB2486C01FEEB0FE03CFFFE0FFFE0FFFEA2371E
7E9D3C>I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA07F8496C7EA25BA25BB248
6C487E3AFFFE1FFFC0A2221E7E9D27>I<EB1FE0EB7FF83801F03E3803C00F3907800780
390F0003C04814E0003EEB01F0A248EB00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB
03E0A2390F8007C03907C00F803901F03E0038007FF8EB1FE01E207E9E23>I<3807C0FE
39FFC7FF809038CF03E0390FDC01F03907F800FC49137E49133E49133FED1F80A3ED0FC0
A8151F1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE07E09038C7FF80D9C1FCC7
FC01C0C8FCA9487EEAFFFEA2222B7E9D27>I<90380FE01890387FF8383801F81C3903E0
0E783807C007390F8003F8001F1301EA3F00A2007E1300A212FE5AA8127EA36C13017EEB
8003380FC0073803E00E3801F03C38007FF0EB1FC090C7FCA94A7E91381FFFC0A2222B7E
9D25>I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5FC
A2181E7E9D1C>I<3801FE183807FFB8381E01F8EA3C00481378481338A21418A27E7EB4
1300EA7FF06CB4FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C131EA27E
A26C133CA26C137838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A3120112
03A21207121FB512F0A23803E000AF1418A714383801F03014703800F860EB3FE0EB0F80
152A7FA81B>I<D807C013F800FF131FA2000F130100071300B21401A314033803E007EC
0EFC3A01F81CFFC038007FF890391FE0F800221F7E9D27>I<3AFFFC01FFC0A23A0FE000
7E000007147C15380003143015706C6C1360A26C6C5BA390387C0180A26D48C7FCA2EB3F
07EB1F06A2EB0F8CA214DCEB07D8A2EB03F0A36D5AA26D5A221E7F9C25>I<3BFFFC3FFE
07FFA23B0FE003F001F801C09038E000F00007010114E0812603E00314C0A2913807F801
2701F006781380A29039F80E7C030000D90C3C1300A290397C181E06A2151F6D486C5AA2
168C90391F600798A216D890390FC003F0A36D486C5AA36DC75A301E7F9C33>I<3AFFFC
07FF80A23A0FF003FC000003EB01F0000114C06D485A000091C7FCEB7C06EB3E0E6D5A14
B8EB0FB0EB07E013036D7E497E1307EB067C497EEB1C1F01387FEB700F496C7E6E7ED803
C07F00076D7E391FE003FC3AFFF007FFC0A2221D7F9C25>I<3AFFFC01FFC0A23A0FE000
7E000007147C1538000314306D137000011460A26C6C5BA2EBFC01017C5BEB7E03013E90
C7FCA2EB1F06A2148EEB0F8CA2EB07D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC12
78EAFC06A25B131CEA7838EA7070EA3FE0EA0F80222B7F9C25>I<003FB51280A2EB003F
003C14000038137E00305BEA700100605B495A495A130F00005B495A49C7FC5B137E9038
FC0180EA01F8120313F03807E003EA0FC0001F1400138048485A007E5B00FE133FB6FCA2
191D7E9C1F>I<B712C0A22202809223>I<BB12FCA24602809247>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmbx10 10 38
/Ft 38 124 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B
>46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>
49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C0
5AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C0
4A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A01
3EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<EB03FF
011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F012
1F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15
F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E48
7EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6120000
0114FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2151F153F157F15FFA25C5C
5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7
FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>I<001C15C0D8
1F80130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE9038
3FFFE090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A2
16F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C4913
80D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<ED
03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F302038015E1A202078015C0
020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02FC814A7FA20101824A
7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982013E151FA2017E8201
7C8101FE83B500F80107B61280A4413A7DB948>65 D<B812C017FC17FF18C028007FF000
037F04007F717E717E171F84A2717EA74D5AA260173F4D5A4D5A4C13C0040F5B91B600FC
C7FCA2EFFF8002F0C713F0EF3FF8717E717E717E19807113C0A319E0A719C0A25F4D1380
19005FEF7FFE4C485AB912F018C095C7FC17F03B397DB844>I<DB3FFCEB01C00203B5EA
C003021FECF00791B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49481403D9
7FF080494880485B48177F4849153F4890C9FC181F485A180F123F5B1807127FA24993C7
FC12FFAD127F7FF003C0123FA27F001F1707A26C6C1780180F6C6D16006C6D5D6C173E6C
6D157ED97FF85D6D6C4A5A6DB44A5A010701C0EB0FE06D01FCEBFF80010090B548C7FC02
1F14F8020314E09126003FFEC8FC3A3B7BB945>I<B87E17F817FF18C028007FF8000713
F09338007FF8EF1FFE717E050313807113C0A27113E0F07FF0A2F03FF8A219FC181FA219
FEA419FFAC19FEA419FC183FA219F8187F19F0F0FFE0A24D13C04D13804D1300EF1FFEEF
7FFC933807FFF0B912C095C7FC17FC178040397DB849>I<B912F0A426007FF8C7FCEF1F
F8170717031701A21700A21878A3043C137C183CA41800167CA216FC150391B5FCA4ECF8
031500167CA2163C180FA3181EA293C7FCA2183EA2183C187CA218FCA2EF01F81703170F
173FEE01FFB9FC18F0A338397DB83F>I<B912C0A43A007FF800039338007FE0171F170F
1707A21703A21701A318F0EE7800A41800A216F8A21501150791B5FCA4ECF80715011500
A21678A693C8FCADB7FCA434397DB83C>I<DB3FFCEB01C00203B5EAC003021FECF00791
B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49481403D97FF080494880485B
48177F4849153F4890C9FC181F485A180F123F5B1807127FA24993C8FC12FFAB043FB612
80A2127F7FDC0003EBC000123FA27F121FA26C7EA26C7F6C7F6C7F7ED97FF85C6D7E6DB4
5C010701C05B6D01FCEBFF3F010090B5EAFE0F021FECF8030203ECE0009126003FFEC9FC
413B7BB94B>I<B612FCA439007FF800B3B3ADB612FCA41E397DB824>73
D<B7FCA426007FF8C9FCB3ACEF0780A5170F1800A35FA25FA25F5F5E5EEE0FFE167FB8FC
A431397DB839>76 D<B500F80403B512F06E5EA26E5ED8007FF1E000A2D97BFF161EA201
796D5DA201786D5DA26E6C5DA36E6C4A5AA26E6C4A5AA26E6C4A5AA26E6C4A5AA26E6C14
1EA36E6D5BA26E6D5BA26F6C5BA26F6C485AA36F6C485AA26F6C485AA26F6C48C7FCA292
3803FF1EA36F13BCA26F13F8A2705AA2705AA213FCB500FC6D4848B612F0A2EE0F80EE07
0054397DB85B>I<B500FC0203B512F0A28080C66C6D90390003F0006F6E5A81017B7F13
798101787F6E7E6E7E6E7F6E7FA26E7F6E7F6E7F6E7F6F7E153F826F13806F13C06F13E0
6F13F06F13F88117FCEE7FFEEE3FFF7013817013C17013E18218F17013F97013FDEF7FFF
8383A28383838383187FA2183F181F01FC160FB500FC150718031801A244397DB84B>I<
EDFFF8020FEBFF80027F14F0903A01FFC01FFC010790380007FFD91FFC010113C0D93FF0
6D6C7E49486E7E49486E7E48496E7E48834890C86C7EA248486F1380A248486F13C0A200
3F18E0A348486F13F0A400FF18F8AC007F18F06D5DA3003F18E0A26D5D001F18C0A26C6C
4B13806C18006E5C6C6D4A5A6C5F6C6D4A5A6D6C4A5AD93FFC49485A6DB401075B0107D9
C01F90C7FC010190B512FC6D6C14F0020F1480020001F8C8FC3D3B7BB948>I<B8FC17F0
17FEEFFF8028007FF8000F13C0040113E07013F0EF7FF8EF3FFCA2EF1FFEA218FFA818FE
A2EF3FFCA2EF7FF8EFFFF04C13E0040F13C091B7120017FC17E002F8C9FCB3A4B612FCA4
38397DB841>I<B712FCEEFFE017FC17FF28007FF8000F13C004017F707F717E717EA271
7EA284A760A24D5A604D5A4D5A04035B041F90C8FC91B612FC17E0839139F8003FFCEE0F
FF707F707F8284A2707FA584A51A601AF084177F1901DD3FFE13E0B600FC011F13039439
0FFF87C071EBFF8005011400CBEA1FFC443A7DB848>82 D<D907FF130E013FEBE01E90B5
EAF83E0003ECFE7E3A07FC01FFFE390FF0001F4848130F48481303491301007F140090C8
FC167E5A163EA27F161E7F7F6D91C7FC13FC387FFFE014FEECFFF06C14FE6F7E6C816C15
F06C816C81C681133F010F801301D9000F1480EC007F030F13C01503818100F0157FA316
3FA27E17807E167F6C16007E6D14FE01E0495A01F813039039FF801FF800FC90B512E0D8
F83F5CD8F00749C7FC39E0007FF02A3B7BB935>I<003FB91280A4D9F800EBF003D87FC0
9238007FC049161F007EC7150FA2007C1707A200781703A400F818E0481701A4C892C7FC
B3AE010FB7FCA43B387DB742>I<B600FC011FB512C0A426007FF8C8381FC000725AB3B3
181F013F94C7FC8060011F163E6D6C157E187C6D6C15FC6D6D495A6D6DEB07F06D01F0EB
1FE0DA7FFEEBFFC0021FB6C8FC02075C020014F0030F1380423A7DB849>I<B600F049B5
12E0A4C601FCC8380FF000017F705A6E4B5A6D6C4B5A6D7F4EC7FC6D6D147E6D7F606D6D
495A6D7F4D5A6D6D495A6E7E4D5A6E6C495A6E13804DC8FC6EEBC07E6E13E05F6EEBF1F8
6E13F9EEFBF06EEBFFE0815F6F5B816F90C9FCB3A2021FB6FCA443397EB848>89
D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5A
EA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A12FF
5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003FE003
2A257DA42E>97 D<903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F
484814C0001FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127F
A36C7E1678121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F
13FC010113E025257DA42C>101 D<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE
91381F03FFDA3C01138014784A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7D
B935>104 D<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA41207
7EB3A9B512F8A4153B7DBA1B>I<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>108
D<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F0
3FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291
C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF903803FFF8020F
13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC
3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE04848
6D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D13
07001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029
257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13
C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E13
7F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FC
ACB512FCA42F357EA435>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000
075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>
114 D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15
787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F903800
7FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F8
140038E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA30003
90C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB4
25>I<B539F01FFFF0A4000390398003F8006C01C013E06C1407D97FE05B6D6C485A6E48
C7FC90381FFC3E010F5B903807FEFC6D6C5A5D6D5B6D5B6E7E6E7E814A7EA24A7E903801
F3FFD903E37FD907C17FEB0FC049486C7E4A6C7E013E80496D7E49130F00016E7EB59038
3FFFF8A42D257EA432>120 D<B812FEA32F03809730>123 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 586 531 a Ft(A)42 b(COMBINA)-8 b(TORIAL)41 b(CONSTR)m(UCTION)h
(F)m(OR)f(SIMPL)-8 b(Y{LA)m(CED)43 b(LIE)1834 648 y(ALGEBRAS)1763
897 y Fs(N.)23 b(J.)g(WILDBER)n(GER)599 1123 y Fr(Abstra)o(ct.)42
b Fs(This)20 b(pap)r(er)i(sho)n(ws)g(ho)n(w)f(to)h(uniformly)d(asso)r
(ciate)k(Lie)e(algebras)h(to)g(the)g(simply-laced)e(Dynkin)599
1206 y(diagrams)f(excluding)i Fq(E)1262 1215 y Fp(8)1317
1206 y Fs(b)n(y)f(constructing)i(explicit)f(com)n(binatorial)f(mo)r
(dels)f(of)h(min)n(uscule)g(represen)n(tations)599 1289
y(using)k(only)h(graph-theoretic)g(ideas.)34 b(This)23
b(in)n(v)n(olv)n(es)i(de\014ning)g(raising)f(and)h(lo)n(w)n(ering)f(op)
r(erators)h(in)f(a)g(space)599 1372 y(of)e(ideals)h(of)g(certain)g
(distributiv)n(e)g(lattices)h(asso)r(ciated)g(to)g(sequences)g(of)f(v)n
(ertices)g(of)g(the)g(Dynkin)h(diagram.)1765 1768 y Fo(1.)41
b Fn(Intr)n(oduction)400 1918 y Fo(Our)36 b(goal)h(is)g(to)h(sho)n(w)e
(ho)n(w)h(to)h(\(almost\))f(uniformly)h(construct)f(the)h(simply-laced)
e(Lie)i(algebras)d(using)300 2017 y(only)j(graph)g(theoretic)h(ideas)f
(from)h(the)g(Dynkin)g(diagrams.)69 b(W)-7 b(e)40 b(will)f(th)n(us)g
(construct)f(the)h(Lie)g(algebras)300 2117 y(corresp)r(onding)27
b(to)j Fm(A)1001 2129 y Fl(n)1046 2117 y Fo(,)g Fm(D)1168
2129 y Fl(n)1213 2117 y Fo(,)g Fm(E)1327 2129 y Fk(6)1394
2117 y Fo(and)f Fm(E)1618 2129 y Fk(7)1685 2117 y Fo(using)g(a)g(metho)
r(d)g(whic)n(h)h(is)f(indep)r(enden)n(t)h(of)f(t)n(yp)r(e.)43
b(The)29 b(only)g(case)300 2217 y(not)f(co)n(v)n(ered)d(is)j(that)g(of)
f Fm(E)1164 2229 y Fk(8)1202 2217 y Fo(,)h(for)f(whic)n(h)g(more)g
(sophisticated)g(tec)n(hniques)g(m)n(ust)h(b)r(e)g(used.)400
2316 y(Apart)33 b(from)h(the)g(generators)e(and)i(relations)f(approac)n
(h)f(of)i(Serre,)g(\(whic)n(h)h(constructs)e(a)h(generating)e(set)300
2416 y(but)f(not)f(a)g(basis\),)g(the)h(only)e(general)g(construction)g
(of)h(exceptional)g(Lie)g(algebras)e(kno)n(wn)h(to)h(this)h(author)e
(is)300 2516 y(that)f(of)f(Tits)h([14].)400 2615 y(T)-7
b(ec)n(hnically)35 b(no)h(kno)n(wledge)f(of)h(Lie)g(theory)g(is)g
(assumed.)62 b(Ro)r(ot)36 b(systems)g(are)g(in)n(tro)r(duced)g(in)g(a)g
(simple)300 2715 y(fashion)e(b)n(y)g(examining)f(m)n
(utation/re\015ection)g(op)r(erators)f(on)i(graphs,)h(in)f(the)h
(spirit)f(of)g(a\016ne)g(Lie)g(algebras)300 2814 y(\([3],)27
b([4],)f([6]\).)36 b(This)26 b(approac)n(h)f(is)h(dual)g(to)g(the)g(n)n
(um)n(b)r(ers)g(game)g(as)f(studied)i(recen)n(tly)e(b)n(y)h(Pro)r(ctor)
e([10],)i(and)g(is)300 2914 y(systematically)h(dev)n(elop)r(ed)g(in)h
([16].)400 3014 y(W)-7 b(e)28 b(asso)r(ciate)e(lab)r(elled)i
(distributiv)n(e)f(lattices)h(called)f(heaps)g(\(this)h(terminology)e
(follo)n(ws)h(Viennot)h([15]\))f(to)300 3113 y(particular)c(graphs)g
(and)i(construct)f(represen)n(tations)f(of)h(Lie)h(algebras)d(b)n(y)i
(raising)g(and)g(lo)n(w)n(ering)f(op)r(erators)f(on)300
3213 y(spaces)27 b(of)g(ideals)g(of)h(heaps.)400 3313
y(The)k(p)r(osets)h(o)r(ccurring)e(are)h(related)g(to)g(Bruhat)g
(orders)f(in)i(Co)n(xeter)e(groups)h(\([7]\),)i(min)n(uscule)f
(represen-)300 3412 y(tations)i(\([2],)i([8],)g([13]\),)g(the)f
(geometry)e(of)h(Sc)n(h)n(ub)r(ert)g(cells)g(\([7],)j([12]\),)e
(conformal)f(\014eld)g(theory)g(\([5]\),)i(and)300 3512
y(com)n(binatorics)32 b(\([9],)k([11]\))d(.)56 b(This)34
b(pap)r(er)f(pro)n(vides)g(another)g(approac)n(h)f(to)h(their)h(study)g
(using)g(only)f(graph)300 3611 y(theoretical)27 b(considerations.)400
3711 y(One)22 b(of)g(the)h(k)n(ey)e(p)r(oin)n(ts)i(is)f(the)h
(de\014nition)f(of)h(a)f(parit)n(y)f(function)i(\(taking)f(on)g(v)-5
b(alues)22 b Fj(\006)p Fo(1\))g(on)g(certain)g(con)n(v)n(ex)300
3811 y(subsets)27 b(of)h(distributiv)n(e)f(lattices)h(asso)r(ciated)e
(to)i(sequences)e(of)i(v)n(ertices)e(of)i(a)f(graph.)400
3910 y(F)-7 b(rom)26 b(our)h(construction)f(w)n(e)h(are)f(able)h(to)g
(iden)n(tify)g(Chev)-5 b(alley)27 b(bases)f(of)h(the)h(corresp)r
(onding)d(Lie)i(algebras,)300 4010 y(clarify)22 b(the)i(asso)r(ciated)d
(structure)i(constan)n(ts,)f(construct)h(new)g(mo)r(dels)g(for)f(spin)h
(represen)n(tations)e(and)i(presen)n(t)300 4110 y(v)n(ery)i(explicit)i
(realizations)e(of)h(the)h(exceptional)e(Lie)i(algebras)d
Fm(E)2402 4122 y Fk(6)2466 4110 y Fo(and)i Fm(E)2687
4122 y Fk(7)2725 4110 y Fo(.)36 b(The)27 b(theory)f(here)f
(generalises,)g(to)300 4209 y(non)e(simply-laced)f(Dynkin)h(diagrams,)f
(to)h(Kac-Mo)r(o)r(dy)e(Lie)i(algebras)d(and)j(to)g(more)f(general)f
(represen)n(tations,)300 4309 y(but)28 b(some)f(of)h(this)g(in)n(v)n
(olv)n(es)d(considerable)i(additional)g(dev)n(elopmen)n(t,)g(still)h
(in)f(progress.)1378 4495 y(2.)41 b Fn(Neighbourl)-6
b(y)31 b(heaps)h(f)n(or)g(a)f(graph)400 4644 y Fo(Let)e
Fm(X)35 b Fo(b)r(e)30 b(a)f(simple)g(graph.)41 b(By)28
b(an)h Fm(X)7 b Fo(-)p Fi(se)l(quenc)l(e)28 b Fo(w)n(e)h(mean)g(a)g
(sequence)f Fm(s)e Fo(=)f(\()p Fm(x)3058 4656 y Fk(1)3096
4644 y Fm(;)14 b(:)g(:)g(:)g(;)g(x)3328 4656 y Fl(n)3373
4644 y Fo(\))30 b(of)f(v)n(ertices)f(of)300 4744 y Fm(X)r(:)f
Fo(If)h(w)n(e)g(transform)e Fm(s)i Fo(to)f Fm(s)1215
4714 y Fh(0)1266 4744 y Fo(b)n(y)g(switc)n(hing)h Fm(x)1796
4756 y Fl(i)1851 4744 y Fo(and)g Fm(x)2060 4756 y Fl(i)p
Fk(+1)2200 4744 y Fo(for)f(some)g Fm(i)g Fo(then)h(there)f(are)g(three)
g(p)r(ossibilities:)441 4864 y(\(1\))42 b Fm(x)636 4876
y Fl(i)691 4864 y Fo(and)28 b Fm(x)900 4876 y Fl(i)p
Fk(+1)1040 4864 y Fo(are)e(neigh)n(b)r(ours)h(in)h Fm(X)7
b Fo(|\(an)27 b Fm(X)7 b Fo(-)p Fi(switch)p Fo(\))441
4963 y(\(2\))42 b Fm(x)636 4975 y Fl(i)691 4963 y Fo(and)28
b Fm(x)900 4975 y Fl(i)p Fk(+1)1040 4963 y Fo(are)e(distinct)j(and)e
(not)h(neigh)n(b)r(ours|\(a)e(free)h Fi(switch)p Fo(\))441
5063 y(\(3\))42 b Fm(x)636 5075 y Fl(i)687 5063 y Fo(=)23
b Fm(x)822 5075 y Fl(i)p Fk(+1)934 5063 y Fo(|\(a)k(redundan)n(t)g
Fi(switch)p Fo(\).)400 5183 y(An)n(y)j Fm(X)7 b Fo(-sequence)29
b Fm(s)1069 5153 y Fh(0)1123 5183 y Fo(obtainable)h(from)g
Fm(s)g Fo(b)n(y)g(free)h(switc)n(hes)e(is)i(de\014ned)g(to)f(b)r(e)h
Fi(e)l(quivalent)g Fo(to)f Fm(s)p Fo(;)i(w)n(e)e(write)300
5283 y Fm(s)37 b Fj(')f Fm(s)516 5253 y Fh(0)575 5283
y Fo(and)f(let)h([)p Fm(s)p Fo(])g(denote)g(the)g(equiv)-5
b(alence)35 b(class)g(of)h Fm(s;)g Fo(whic)n(h)f(w)n(e)h(call)f(an)h
Fm(X)7 b Fo(-)p Fi(string)p Fo(.)60 b(W)-7 b(e)36 b(refer)f(to)h(the)
2083 5382 y Fk(1)p eop
%%Page: 2 2
2 1 bop 0 66 a Fk(2)1453 b(N.)22 b(J.)g(WILDBER)n(GER)0
266 y Fm(x)47 278 y Fl(i)109 266 y Fo(in)33 b Fm(s)g
Fo(=)f(\()p Fm(x)459 278 y Fk(1)497 266 y Fm(;)14 b(:)g(:)g(:)f(;)h(x)
728 278 y Fl(n)774 266 y Fo(\))34 b(as)e(the)i Fi(o)l(c)l(curr)l(enc)l
(es)f Fo(in)h Fm(s)p Fo(;)i(as)d(o)r(ccurrences)e(they)j(are)e
(considered)h(distinct)h(ev)n(en)f(if)0 365 y(as)d(v)n(ertices)f(of)i
Fm(X)37 b Fo(there)30 b(ma)n(y)g(b)r(e)h(rep)r(etitions.)45
b(W)-7 b(e)31 b(partially)f(order)f(the)i(o)r(ccurrences)e
Fm(x)2926 377 y Fl(i)2985 365 y Fo(in)i Fm(s)f Fo(b)n(y)g(declaring)0
465 y Fm(x)47 477 y Fl(i)98 465 y Fm(<)23 b(x)233 477
y Fl(j)293 465 y Fo(if)h Fm(i)f(<)g(j)29 b Fo(and)24
b Fm(x)773 477 y Fl(i)801 465 y Fm(;)14 b(x)885 477 y
Fl(j)945 465 y Fo(are)23 b(neigh)n(b)r(ours)g(in)i Fm(X)r(:)f
Fo(The)g(resulting)g(p)r(oset)g Fm(P)2484 477 y Fl(s)2544
465 y Fo(is)g(unc)n(hanged)g(b)n(y)g(free)g(switc)n(hes)0
565 y(and)j(so)g(dep)r(ends)h(only)g(on)f(the)h Fm(X)7
b Fo(-string)26 b([)p Fm(s)p Fo(].)37 b(W)-7 b(e)28 b(refer)f(to)g
Fm(P)1998 577 y Fl(s)2057 565 y Fo(=)c Fm(P)2198 580
y Fk([)p Fl(s)p Fk(])2299 565 y Fo(as)k(the)h Fm(X)7
b Fo(-)p Fi(he)l(ap)27 b Fo(of)h([)p Fm(s)p Fo(].)0 958
y Ft(Prop)s(osition)f(2.1.)38 b Fi(The)29 b Fm(X)7 b
Fi(-string)26 b Fo([)p Fm(s)p Fo(])i Fi(c)l(onsists)f(exactly)h(of)g
(the)g(total)g(or)l(derings)g(of)h Fm(P)2829 973 y Fk([)p
Fl(s)p Fk(])2930 958 y Fi(c)l(onsistent)e(with)h(the)0
1058 y(p)l(artial)j(or)l(der.)100 1451 y Fo(If)22 b Fm(s)f
Fo(and)h Fm(s)432 1421 y Fh(0)477 1451 y Fo(are)f Fm(X)7
b Fo(-sequences)19 b(with)k Fm(s)1306 1421 y Fh(0)1351
1451 y Fo(obtainable)e(from)g Fm(s)h Fo(b)n(y)f(applying)g
Fm(p)h(X)7 b Fo(-switc)n(hes)20 b(and)h Fm(q)k Fo(free)d(switc)n(hes)0
1551 y(then)28 b(let)g Fm(\017)p Fo(\()p Fm(s;)14 b(s)490
1521 y Fh(0)513 1551 y Fo(\))23 b(=)g(\()p Fj(\000)p
Fo(1\))827 1521 y Fl(p)865 1551 y Fo(.)0 1944 y Ft(Prop)s(osition)30
b(2.2.)40 b Fm(")p Fo(\()p Fm(s;)14 b(s)892 1914 y Fh(0)915
1944 y Fo(\))24 b(=)e(\()p Fj(\000)p Fo(1\))1229 1914
y Fl(p)1297 1944 y Fi(is)30 b(wel)t(l{de\014ne)l(d,)i(and)e(dep)l(ends)
h(only)f(on)g Fo([)p Fm(s)p Fo(])g Fi(and)g Fo([)p Fm(s)2982
1914 y Fh(0)3005 1944 y Fo(])p Fi(.)100 2337 y Fo(Th)n(us)c
Fm(")p Fo(\()p Fm(s;)14 b(s)495 2307 y Fh(0)518 2337
y Fo(\))24 b(=)e Fm(")p Fo(\([)p Fm(s)p Fo(])p Fm(;)14
b Fo([)p Fm(s)916 2307 y Fh(0)939 2337 y Fo(]\).)38 b(This)26
b(quan)n(tit)n(y)h(will)g(b)r(e)g(called)g(the)g Fi(r)l(elative)j(p)l
(arity)e Fo(of)f(the)g Fm(X)7 b Fo(-strings)25 b([)p
Fm(s)p Fo(])i(and)0 2437 y([)p Fm(s)62 2407 y Fh(0)85
2437 y Fo(],)h(or)f(of)g(the)h(corresp)r(onding)e(heaps)h
Fm(P)1316 2452 y Fk([)p Fl(s)p Fk(])1417 2437 y Fo(and)h
Fm(P)1632 2452 y Fk([)p Fl(s)1682 2435 y Fg(0)1704 2452
y Fk(])1727 2437 y Fo(.)0 2830 y Ft(Example)i(1.)41 b
Fo(Supp)r(ose)28 b Fm(X)h Fo(=)23 b Fm(A)1084 2842 y
Fl(n)1157 2830 y Fo(lab)r(elled)k(as)g(sho)n(wn.)572
3048 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 170.71646 0.0 28.45274 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 28.45274 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 142.26372 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 170.71646 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial 788 3166 a(1)194 b(2)1657 3159
y Fm(n)18 b Fj(\000)g Fo(1)1964 3166 y Fm(n)1225 2967
y Fj(\001)c(\001)g(\001)100 3384 y Fo(If)31 b(w)n(e)f(consider)g(only)g
Fm(X)7 b Fo(-sequences)29 b(whic)n(h)i(are)f(p)r(erm)n(utations)g(of)h
Fj(f)p Fo(1)p Fm(;)14 b(:)g(:)g(:)e(;)i(n)p Fj(g)p Fm(;)30
b Fo(the)h(asso)r(ciated)f(heaps)g(are)0 3483 y(`sto)r(c)n(k)g(mark)n
(et)g(graphs')g(where)h(eac)n(h)f(successiv)n(e)g(no)r(de)h(is)g
(either)g(up)g(or)f(do)n(wn)h(from)f(the)i(previous.)46
b(W)-7 b(e)31 b(get)0 3583 y(naturally)h(a)h(map)h(from)f
Fm(S)882 3595 y Fl(n)960 3583 y Fo(to)g(the)h(set)f(of)h(sequences)e
Fj(f)p Fo(\()p Fm(")1947 3595 y Fk(1)1984 3583 y Fm(;)14
b(:)g(:)g(:)f(;)h(")2207 3595 y Fl(n)p Fh(\000)p Fk(1)2337
3583 y Fo(\))34 b Fj(j)f Fm(")2498 3595 y Fl(i)2558 3583
y Fo(=)g Fj(\006)p Fo(1)p Fj(g)e Fo(=)h Fm(T)7 b(:)33
b Fo(It)g(is)h(natural)e(to)0 3683 y(ask)27 b(for)g(the)h(distribution)
f(of)h(this)g(map:)36 b(ho)n(w)27 b(man)n(y)g(p)r(erm)n(utations)g(map)
h(to)f(a)g(giv)n(en)g Fm(t)37 b Fj(2)23 b Fm(T)12 b Fo(?)37
b(When)28 b Fm(t)f Fo(is)h(the)0 3782 y(zigzag)e(sequence)h
(alternating)g(plus)h(and)f(min)n(us)h(one,)f(this)h(is)g(kno)n(wn)f
(as)g(Andr)n(\023)-39 b(e's)26 b(Problem,)h(and)g(the)i(answ)n(er)0
3882 y(is)c(giv)n(en)f(b)n(y)g(Euler)g(n)n(um)n(b)r(ers,)h(or)f(En)n
(tringer)g(n)n(um)n(b)r(ers.)35 b(The)25 b(general)e(case)h(is)h
(related)f(to)h(the)g(n)n(um)n(b)r(er)g(of)g(sk)n(ew)0
3981 y(tableau)i(of)h(a)f(`staircase')f(shap)r(e.)0 4375
y Ft(Example)k(2.)41 b Fo(Supp)r(ose)28 b Fm(X)h Fo(=)23
b Fm(E)1083 4387 y Fk(6)1148 4375 y Fo(lab)r(elled)28
b(as)e(sho)n(wn)808 4947 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 142.26372 0.0 28.45274 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 85.35823 42.67911 85.35823 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 28.45274 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 113.81097 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 142.26372 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 42.67911
 false NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial 1024 5065 a(1)194
b(2)g(3)g(4)h(5)1594 4619 y(0)2127 4969 y Fm(E)2188 4981
y Fk(6)100 5283 y Fo(The)27 b Fm(X)7 b Fo(-sequence)26
b Fm(s)d Fo(=)g(\(1)p Fm(;)14 b Fo(2)p Fm(;)g Fo(3)p
Fm(;)g Fo(0)p Fm(;)g Fo(4)p Fm(;)g Fo(5)p Fm(;)g Fo(3)p
Fm(;)g Fo(2)p Fm(;)g Fo(4)p Fm(;)g Fo(3)p Fm(;)g Fo(1)p
Fm(;)g Fo(0)o Fm(;)g Fo(2)p Fm(;)g Fo(3)o Fm(;)g Fo(4)o
Fm(;)g Fo(5\))22 b(has)27 b(heap)p eop
%%Page: 3 3
3 2 bop 874 66 a Fk(A)30 b(COMBINA)-5 b(TORIAL)29 b(CONSTR)n(UCTION)i
(F)n(OR)e(SIMPL)-5 b(Y{LA)n(CED)29 b(LIE)f(ALGEBRAS)513
b(3)1108 2255 y
 tx@Dict begin tx@NodeDict begin {28.45274 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {56.90549 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 1108 2255 a 1108
2255 a
 tx@Dict begin tx@NodeDict begin {85.35823 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {113.81097 85.35822 } false /N@D 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255
a
 tx@Dict begin tx@NodeDict begin {142.26372 106.69777 } false /N@E
10 {InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35822 } false /N@F 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {85.35823 106.69777 } false /N@G 10
{InitPnode } NewNode end end
 1108
2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {113.81097 128.03732 } false /N@H
10 {InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {56.90549 128.03732 } false /N@I 10
{InitPnode } NewNode end end
 1108 2255
a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {85.35823 149.37688 } false /N@J 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {113.81097 170.71643 } false /N@K
10 {InitPnode } NewNode end end
 1108 2255 a 1108
2255 a
 tx@Dict begin tx@NodeDict begin {28.45274 149.37688 } false /N@L 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {56.90549 170.71643 } false /N@M 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255
a
 tx@Dict begin tx@NodeDict begin {85.35823 192.05598 } false /N@N 10
{InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {113.81097 213.39554 } false /N@O
10 {InitPnode } NewNode end end
 1108 2255 a 1108 2255 a
 tx@Dict begin tx@NodeDict begin {142.26372 234.73509 } false /N@P
10 {InitPnode } NewNode end end
 1108
2255 a 1324 2105 a Fo(1)1560 1927 y(2)1796 1750 y(3)2032
1573 y(4)2269 1396 y(5)1560 1573 y(0)1796 1396 y(3)2032
1219 y(4)-514 b(2)1796 1042 y(3)2032 864 y(0)1324 1042
y(1)1560 864 y(2)1796 687 y(3)2032 510 y(4)2269 333 y(5)2372
2099 y Fm(F)12 b Fo(\()p Fm(E)2530 2111 y Fk(6)2568 2099
y Fm(;)i Fo(1\))1108 2255 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255
a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108
2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@I /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@J /N@K InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@L /N@M InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@M /N@N InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@N /N@O InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@O /N@P InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255
a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108
2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@G /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@H /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@I /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@J /N@M InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 2255 a 1108 2255 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@K /N@N InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
2255 a 400 2473 a Fo(An)28 b Fm(X)7 b Fo(-sequence)26
b Fm(s)d Fo(=)f(\()p Fm(x)1211 2485 y Fk(1)1249 2473
y Fm(;)14 b(:)g(:)g(:)g(;)g(x)1481 2485 y Fl(n)1526 2473
y Fo(\))28 b(will)g(b)r(e)g(called)f Fi(neighb)l(ourly)i
Fo(if)f(b)r(et)n(w)n(een)g(an)n(y)f(t)n(w)n(o)f(consecutiv)n(e)h(o)r
(ccur-)300 2572 y(rences)h(of)i(a)f(v)n(ertex)f Fm(x)i
Fo(there)f(are)f(at)h(least)g(t)n(w)n(o)g(o)r(ccurrences)e(of)j(some)e
(neigh)n(b)r(our)h(or)f(neigh)n(b)r(ours)g(of)i Fm(x)p
Fo(.)42 b(This)300 2672 y(prop)r(ert)n(y)26 b(is)i(preserv)n(ed)e(b)n
(y)h(free)h(switc)n(hes,)f(so)g(w)n(e)g(also)f(sp)r(eak)h(of)h(neigh)n
(b)r(ourly)f Fm(X)7 b Fo(-strings)25 b(and)j Fm(X)7 b
Fo(-heaps.)400 2772 y(A)30 b(neigh)n(b)r(ourly)g Fm(X)7
b Fo(-sequence)28 b Fm(s)j Fo(will)f(b)r(e)h(called)f
Fi(maximal)i Fo(if)e Fm(F)43 b Fo(cannot)30 b(b)r(e)g(extended)h(b)n(y)
f(the)h(addition)f(of)300 2871 y(a)i(v)n(ertex)g Fm(x)h
Fo(in)f(an)n(y)g(p)r(osition)g(to)h(a)f(larger)e(neigh)n(b)r(ourly)i
Fm(X)7 b Fo(-sequence)31 b Fm(s)2667 2841 y Fh(0)2690
2871 y Fo(,)j(and)e(similarly)g(for)g Fm(X)7 b Fo(-strings)30
b(and)300 2971 y(heaps.)36 b(The)28 b(neigh)n(b)r(ourly)f
Fm(E)1250 2983 y Fk(6)1287 2971 y Fo(-heap)g(of)h(Example)e(2)i(is)f
(maximal.)400 3071 y(A)i(neigh)n(b)r(ourly)g Fm(X)7 b
Fo(-string)27 b(or)i Fm(X)7 b Fo(-heap)28 b(will)h(b)r(e)h(called)f
Fi(two-neighb)l(ourly)i Fo(if)e(there)h(are)e(exactly)h(t)n(w)n(o)f(o)r
(ccur-)300 3170 y(rences)d(of)h(some)f(neigh)n(b)r(our)g(or)g(neigh)n
(b)r(ours)g(of)h Fm(x)g Fo(b)r(et)n(w)n(een)g(an)n(y)f(t)n(w)n(o)g
(consecutiv)n(e)g(o)r(ccurrences)f(of)i(an)n(y)f(v)n(ertex)300
3270 y Fm(x)p Fo(.)37 b(The)28 b(heap)f Fm(F)12 b Fo(\()p
Fm(E)934 3282 y Fk(6)972 3270 y Fm(;)i Fo(1\))28 b(of)f(Example)g(2)g
(is)g(t)n(w)n(o-neigh)n(b)r(ourly)-7 b(.)400 3369 y(Recall)22
b(that)h(a)f Fi(lattic)l(e)i Fo(is)e(a)h(p)r(oset)f(suc)n(h)h(that)g
(for)f Fm(a;)14 b(b)22 b Fj(2)i Fm(L)e Fo(the)h(least)f(upp)r(er)h(b)r
(ound)g Fm(a)9 b Fj(_)g Fm(b)23 b Fo(and)f(greatest)g(lo)n(w)n(er)300
3469 y(b)r(ound)33 b Fm(a)22 b Fj(^)h Fm(b)32 b Fo(exist)h(uniquely)-7
b(.)53 b(When)34 b(these)f(op)r(erations)f(satisfy)g(the)i(usual)e
(distributiv)n(e)h(la)n(ws,)h(the)f(lattice)300 3569
y(is)d(called)g Fi(distributive)p Fo(.)47 b(If)30 b Fm(P)43
b Fo(is)30 b(an)n(y)f(p)r(oset,)j(an)e Fi(ide)l(al)i
Fo(of)e Fm(P)42 b Fo(is)30 b(a)g(subset)h Fm(I)37 b Fo(suc)n(h)30
b(that)h Fm(x)d Fj(2)g Fm(I)7 b(;)44 b(y)31 b Fj(\024)c
Fm(x)k Fo(implies)300 3668 y Fm(y)j Fj(2)d Fm(I)7 b Fo(.)51
b(Let)33 b Fm(J)8 b Fo(\()p Fm(P)k Fo(\))33 b(denote)f(the)h(p)r(oset)f
(of)h(all)f(ideals)g(of)g Fm(P)44 b Fo(ordered)31 b(b)n(y)h(inclusion.)
51 b(Then)33 b Fm(J)8 b Fo(\()p Fm(P)k Fo(\))33 b(is)f(alw)n(a)n(ys)e
(a)300 3768 y(distributiv)n(e)d(lattice,)h(and)g(an)n(y)e(distributiv)n
(e)i(lattice)g(is)f(of)h(the)g(form)f Fm(J)8 b Fo(\()p
Fm(P)k Fo(\))28 b(for)f(some)g(p)r(oset)h Fm(P)r(:)300
4239 y Ft(Prop)s(osition)i(2.3.)40 b Fi(If)30 b Fm(F)42
b Fi(is)30 b(a)g(maximal)h(neighb)l(ourly)g Fm(X)7 b
Fi(-he)l(ap)30 b(for)g(some)h(gr)l(aph)g Fm(X)7 b Fi(,)29
b(then)h Fm(F)41 b Fi(is)30 b(a)h(lattic)l(e.)400 4711
y Fo(Recall)c(the)h(family)g(of)f(graphs)f Fm(D)1478
4723 y Fl(n)1523 4711 y Fm(;)i Fo(and)f Fm(E)1796 4723
y Fk(7)1862 4711 y Fo(and)g Fm(E)2084 4723 y Fk(8)2149
4711 y Fo(lab)r(elled)h(as)f(sho)n(wn)1108 5283 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 170.71646 0.0 28.45274 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 56.90549 42.67911 56.90549 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 28.45274 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 142.26372 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 170.71646 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 42.67911
 false NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial 1324 5401 a(1)194 b(2)2158 5394
y Fm(n)18 b Fj(\000)g Fo(2)114 b Fm(n)18 b Fj(\000)g
Fo(1)2823 5271 y Fm(D)2892 5283 y Fl(n)1657 4955 y Fo(0)1762
5401 y Fj(\001)c(\001)g(\001)p eop
%%Page: 4 4
4 3 bop 0 66 a Fk(4)1453 b(N.)22 b(J.)g(WILDBER)n(GER)808
649 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 170.71646 0.0 28.45274 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 85.35823 42.67911 85.35823 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 28.45274 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 113.81097 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 142.26372 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 170.71646 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 42.67911
 false NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial
1024 767 a Fo(1)194 b(2)g(3)1594 321 y(0)1732 767 y(4)h(5)f(6)2531
672 y Fm(E)2592 684 y Fk(7)808 1457 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 199.1692 0.0 28.45274 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 85.35823 42.67911 85.35823 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 28.45274 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 56.90549 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 113.81097 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 142.26372 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 170.71646 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 199.1692 0.0  false
NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 85.35823 42.67911
 false NArray /DS 1.8 1.8 CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto (b) show } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial
1024 1575 a Fo(1)g(2)g(3)1594 1129 y(0)1732 1575 y(4)h(5)f(6)g(7)2767
1480 y Fm(E)2828 1492 y Fk(8)0 1793 y Ft(Theorem)38 b(2.1.)43
b Fi(L)l(et)35 b Fm(X)42 b Fi(b)l(e)36 b(a)f(simple)i(gr)l(aph)g(for)f
(which)h(ther)l(e)e(exists)h(a)f(maximal)i(neighb)l(ourly)f
Fm(X)7 b Fi(-he)l(ap)36 b Fm(F)0 1893 y Fi(which)30 b(is)f(two-neighb)l
(ourly.)39 b(Then)29 b Fm(X)35 b Fi(is)28 b(one)h(of)g(the)g(gr)l(aphs)
g Fm(A)2061 1905 y Fl(n)2107 1893 y Fm(;)14 b(n)22 b
Fj(\025)h Fo(1)p Fm(;)42 b(D)2480 1905 y Fl(n)2525 1893
y Fm(;)g(n)23 b Fj(\025)f Fo(4)p Fm(;)42 b(E)2918 1905
y Fk(6)2984 1893 y Fi(or)29 b Fm(E)3151 1905 y Fk(7)3188
1893 y Fi(.)38 b(Ther)l(e)30 b(ar)l(e)0 1992 y(exactly)g
Fm(n)f Fi(such)h Fm(X)7 b Fi(-he)l(aps)30 b(for)g Fm(A)1068
2004 y Fl(n)1114 1992 y Fm(;)f Fi(thr)l(e)l(e)h(for)g
Fm(D)1570 2004 y Fl(n)1615 1992 y Fm(;)g Fi(two)g(for)g
Fm(E)2016 2004 y Fk(6)2083 1992 y Fi(and)g(one)g(for)g
Fm(E)2594 2004 y Fk(7)2632 1992 y Fi(.)39 b(Each)31 b(of)f(the)g(these)
g(lattic)l(es)0 2092 y(is)g(distributive.)100 2301 y
Fo(W)-7 b(e)28 b(no)n(w)e(describ)r(e)i(these)f Fm(X)7
b Fo(-heaps,)26 b(whic)n(h)i(w)n(e)f(call)g Fi(minuscule)p
Fo(.)36 b(The)28 b(curious)e(terminology)h(is)g(motiv)-5
b(ated)0 2401 y(b)n(y)27 b(Lie)h(theory)f(and)g(will)h(b)r(e)g
(justi\014ed)g(later.)0 2640 y(a\))f(The)f(case)g Fm(A)507
2652 y Fl(n)553 2640 y Fm(:)109 b Fo(W)-7 b(e)28 b(lab)r(el)e(the)h
(min)n(uscule)g Fm(A)1616 2652 y Fl(n)1661 2640 y Fo(-heaps)f
Fm(F)12 b Fo(\()p Fm(A)2078 2652 y Fl(n)2124 2640 y Fm(;)i(k)s
Fo(\))27 b Fm(k)f Fo(=)c(1)p Fm(;)14 b(:)g(:)g(:)f(;)h(n)p
Fo(.)37 b(Hop)r(efully)27 b(the)g(follo)n(wing)0 2740
y(example)g(will)h(mak)n(e)f(the)h(general)e(case)h(clear.)100
2957 y(F)-7 b(or)27 b Fm(n)22 b Fo(=)h(5)-273 4002 y
 tx@Dict begin tx@NodeDict begin {28.45274 21.33955 } false /N@A 10
{InitPnode } NewNode end end

-273 4002 a -273 4002 a
 tx@Dict begin tx@NodeDict begin {56.90549 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 -273 4002 a -273 4002 a
 tx@Dict begin tx@NodeDict begin {85.35823 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 -273
4002 a -273 4002 a
 tx@Dict begin tx@NodeDict begin {113.81097 85.35822 } false /N@D 10
{InitPnode } NewNode end end
 -273 4002 a -273 4002 a
 tx@Dict begin tx@NodeDict begin {142.26372 106.69777 } false /N@E
10 {InitPnode } NewNode end end
 -273 4002
a -58 3852 a Fo(1)178 3674 y(2)415 3497 y(3)651 3320
y(4)887 3143 y(5)-273 4002 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -273 4002 a -273 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end

-273 4002 a -273 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -273 4002 a -273 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -273
4002 a 282 4153 a Fm(F)12 b Fo(\()p Fm(A)441 4165 y Fk(5)478
4153 y Fm(;)i Fo(1\))1229 4002 y
 tx@Dict begin tx@NodeDict begin {56.90549 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 1229 4002 a 1229 4002
a
 tx@Dict begin tx@NodeDict begin {85.35823 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 1229 4002 a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {113.81097 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 1229 4002 a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {142.26372 85.35822 } false /N@D 10
{InitPnode } NewNode end end
 1229
4002 a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {28.45274 42.67911 } false /N@E 10
{InitPnode } NewNode end end
 1229 4002 a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {56.90549 64.01866 } false /N@F 10
{InitPnode } NewNode end end
 1229 4002
a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {85.35823 85.35822 } false /N@G 10
{InitPnode } NewNode end end
 1229 4002 a 1229 4002 a
 tx@Dict begin tx@NodeDict begin {113.81097 106.69777 } false /N@H
10 {InitPnode } NewNode end end
 1229 4002 a 1680
3852 a Fo(2)1916 3674 y(3)2153 3497 y(4)2389 3320 y(5)1444
3674 y(1)1680 3497 y(2)1916 3320 y(3)2153 3143 y(4)1229
4002 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229
4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002
a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1229
4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1229 4002 a 1783 4153 a Fm(F)e Fo(\()p Fm(A)1942
4165 y Fk(5)1980 4153 y Fm(;)i Fo(2\))2730 4002 y
 tx@Dict begin tx@NodeDict begin {85.35823 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 2730
4002 a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {113.81097 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 2730 4002 a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {142.26372 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 2730 4002
a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {56.90549 42.67911 } false /N@D 10
{InitPnode } NewNode end end
 2730 4002 a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {85.35823 64.01866 } false /N@E 10
{InitPnode } NewNode end end
 2730 4002 a 2730
4002 a
 tx@Dict begin tx@NodeDict begin {113.81097 85.35822 } false /N@F 10
{InitPnode } NewNode end end
 2730 4002 a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {28.45274 64.01866 } false /N@G 10
{InitPnode } NewNode end end
 2730 4002 a 2730 4002
a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35822 } false /N@H 10
{InitPnode } NewNode end end
 2730 4002 a 2730 4002 a
 tx@Dict begin tx@NodeDict begin {85.35823 106.69777 } false /N@I 10
{InitPnode } NewNode end end
 2730 4002 a 3418 3852 a Fo(3)3654
3674 y(4)3891 3497 y(5)3182 3674 y(2)3418 3497 y(3)3654
3320 y(4)2946 3497 y(1)3182 3320 y(2)3418 3143 y(3)2730
4002 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730
4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002
a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730
4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 2730 4002
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2730 4002 a 3285 4153 a Fm(F)e Fo(\()p Fm(A)3444 4165
y Fk(5)3482 4153 y Fm(;)i Fo(3\))199 5283 y
 tx@Dict begin tx@NodeDict begin {28.45274 85.35822 } false /N@A 10
{InitPnode } NewNode end end
 199 5283
a 199 5283 a
 tx@Dict begin tx@NodeDict begin {56.90549 64.01866 } false /N@B 10
{InitPnode } NewNode end end
 199 5283 a 199 5283 a
 tx@Dict begin tx@NodeDict begin {85.35823 42.67911 } false /N@C 10
{InitPnode } NewNode end end
 199 5283 a 199 5283
a
 tx@Dict begin tx@NodeDict begin {113.81097 21.33955 } false /N@D 10
{InitPnode } NewNode end end
 199 5283 a 199 5283 a
 tx@Dict begin tx@NodeDict begin {142.26372 42.67911 } false /N@E 10
{InitPnode } NewNode end end
 199 5283 a 199 5283 a
 tx@Dict begin tx@NodeDict begin {113.81097 64.01866 } false /N@F 10
{InitPnode } NewNode end end
 199 5283
a 199 5283 a
 tx@Dict begin tx@NodeDict begin {85.35823 85.35822 } false /N@G 10
{InitPnode } NewNode end end
 199 5283 a 199 5283 a
 tx@Dict begin tx@NodeDict begin {56.90549 106.69777 } false /N@H 10
{InitPnode } NewNode end end
 199 5283 a 415 4601
a Fo(1)651 4778 y(2)887 4955 y(3)1123 5132 y(4)1360 4955
y(5)1123 4778 y(4)887 4601 y(3)651 4424 y(2)199 5283
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283
a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283
a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 199 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 199 5283 a 518 5433
a Fm(F)e Fo(\()p Fm(A)677 5445 y Fk(5)715 5433 y Fm(;)i
Fo(4\))1838 5283 y
 tx@Dict begin tx@NodeDict begin {142.26372 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 1838 5283 a 1838 5283 a
 tx@Dict begin tx@NodeDict begin {113.81097 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 1838 5283
a 1838 5283 a
 tx@Dict begin tx@NodeDict begin {85.35823 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 1838 5283 a 1838 5283 a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35822 } false /N@D 10
{InitPnode } NewNode end end
 1838 5283 a 1838
5283 a
 tx@Dict begin tx@NodeDict begin {28.45274 106.69777 } false /N@E 10
{InitPnode } NewNode end end
 1838 5283 a 2998 5132 a Fo(5)2762 4955 y(4)2525
4778 y(3)2289 4601 y(2)2053 4424 y(1)1838 5283 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1838
5283 a 1838 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1838 5283 a 1838 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1838 5283
a 1838 5283 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1838 5283 a 2156 5433 a Fm(F)e Fo(\()p
Fm(A)2315 5445 y Fk(5)2353 5433 y Fm(;)i Fo(5\))p eop
%%Page: 5 5
5 4 bop 874 66 a Fk(A)30 b(COMBINA)-5 b(TORIAL)29 b(CONSTR)n(UCTION)i
(F)n(OR)e(SIMPL)-5 b(Y{LA)n(CED)29 b(LIE)f(ALGEBRAS)513
b(5)300 266 y Fo(b\))25 b(The)g(case)f Fm(D)813 278 y
Fl(n)858 266 y Fm(:)107 b Fo(The)25 b(min)n(uscule)g
Fm(D)1608 278 y Fl(n)1653 266 y Fo(-heaps)f(are)f(lab)r(elled)i
Fm(F)12 b Fo(\()p Fm(D)2514 278 y Fl(n)2559 266 y Fm(;)i
Fo(0\))p Fm(;)39 b(F)12 b Fo(\()p Fm(D)2898 278 y Fl(n)2943
266 y Fm(;)i Fo(1\))24 b(and)h Fm(F)12 b Fo(\()p Fm(D)3403
278 y Fl(n)3448 266 y Fm(;)i(n)f Fj(\000)g Fo(1\).)34
b(The)300 365 y(follo)n(wing)27 b(example)g(for)g Fm(n)c
Fo(=)f(5)27 b(should)h(mak)n(e)f(the)h(general)e(case)h(clear.)27
1628 y
 tx@Dict begin tx@NodeDict begin {28.45274 17.07182 } false /N@A 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 34.14365 } false /N@B 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 51.21547 } false /N@C 10
{InitPnode } NewNode end end
 27 1628
a 27 1628 a
 tx@Dict begin tx@NodeDict begin {113.81097 68.2873 } false /N@D 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 51.21547 } false /N@E 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 68.2873 } false /N@F 10
{InitPnode } NewNode end end
 27
1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 85.35912 } false /N@G 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 85.35912 } false /N@H 10
{InitPnode } NewNode end end
 27 1628 a 27 1628
a
 tx@Dict begin tx@NodeDict begin {56.90549 102.43094 } false /N@I 10
{InitPnode } NewNode end end
 27 1628 a 27 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 119.50276 } false /N@J 10
{InitPnode } NewNode end end
 27 1628 a 242 1513 a Fo(1)478 1371
y(2)715 1229 y(3)951 1087 y(4)242 1229 y(0)478 1087 y(2)715
946 y(3)-515 b(1)478 804 y(2)242 662 y(0)27 1628 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27
1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27
1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628
a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27 1628 a 27 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@I /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 27
1628 a 579 1761 a Fm(F)12 b Fo(\()p Fm(D)745 1773 y Fk(5)782
1761 y Fm(;)i Fo(1\))1529 1628 y
 tx@Dict begin tx@NodeDict begin {28.45274 17.07182 } false /N@A 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628
a
 tx@Dict begin tx@NodeDict begin {56.90549 34.14365 } false /N@B 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 51.21547 } false /N@C 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {113.81097 68.2873 } false /N@D 10
{InitPnode } NewNode end end
 1529
1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 51.21547 } false /N@E 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 68.2873 } false /N@F 10
{InitPnode } NewNode end end
 1529 1628
a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 85.35912 } false /N@G 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 85.35912 } false /N@H 10
{InitPnode } NewNode end end
 1529 1628 a 1529
1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 102.43094 } false /N@I 10
{InitPnode } NewNode end end
 1529 1628 a 1529 1628 a
 tx@Dict begin tx@NodeDict begin {28.45274 119.50276 } false /N@J 10
{InitPnode } NewNode end end
 1529 1628 a 1744 1513
a Fo(0)1980 1371 y(2)2216 1229 y(3)2453 1087 y(4)1744
1229 y(1)1980 1087 y(2)2216 946 y(3)-514 b(0)1980 804
y(2)1744 662 y(1)1529 1628 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end

1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529
1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628
a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529
1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 1529 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@I /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1529 1628 a 2080 1761 a Fm(F)12
b Fo(\()p Fm(D)2246 1773 y Fk(5)2283 1761 y Fm(;)i Fo(0\))3030
1628 y
 tx@Dict begin tx@NodeDict begin {28.45274 68.2873 } false /N@A 10
{InitPnode } NewNode end end
 3030 1628 a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 51.21547 } false /N@B 10
{InitPnode } NewNode end end
 3030 1628 a 3030 1628
a
 tx@Dict begin tx@NodeDict begin {85.35823 34.14365 } false /N@C 10
{InitPnode } NewNode end end
 3030 1628 a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {113.81097 17.07182 } false /N@D 10
{InitPnode } NewNode end end
 3030 1628 a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 68.2873 } false /N@E 10
{InitPnode } NewNode end end
 3030
1628 a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35912 } false /N@F 10
{InitPnode } NewNode end end
 3030 1628 a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {85.35823 102.43094 } false /N@G 10
{InitPnode } NewNode end end
 3030 1628
a 3030 1628 a
 tx@Dict begin tx@NodeDict begin {113.81097 119.50276 } false /N@H
10 {InitPnode } NewNode end end
 3030 1628 a 3246 1087 a Fo(1)3482 1229
y(2)3718 1371 y(3)3954 1513 y(4)3718 1087 y(0)3482 946
y(2)3718 804 y(3)3954 662 y(4)3030 1628 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a
3030 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030
1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030 1628
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030 1628 a 3030 1628 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 3030
1628 a 3582 1761 a Fm(F)e Fo(\()p Fm(D)3748 1773 y Fk(5)3785
1761 y Fm(;)i Fo(4\))400 1898 y(The)37 b(heaps)g Fm(F)12
b Fo(\()p Fm(D)987 1910 y Fl(n)1032 1898 y Fm(;)i Fo(0\))38
b(and)f Fm(F)12 b Fo(\()p Fm(D)1518 1910 y Fl(n)1563
1898 y Fm(;)i Fo(1\))38 b(ha)n(v)n(e)e(the)i(same)f(triangular)f(shap)r
(e)h(with)h Fm(n)p Fo(\()p Fm(n)25 b Fj(\000)g Fo(1\))p
Fm(=)p Fo(2)36 b(elemen)n(ts,)300 1997 y(while)28 b Fm(F)12
b Fo(\()p Fm(D)683 2009 y Fl(n)728 1997 y Fm(;)i(n)k
Fj(\000)f Fo(1\))28 b(consists)e(of)i(a)f(square)f(symmetrically)h
(placed)g(b)r(et)n(w)n(een)g(t)n(w)n(o)g(c)n(hains,)g(and)g(has)g(2\()p
Fm(n)17 b Fj(\000)h Fo(1\))300 2097 y(elemen)n(ts.)300
2244 y(c\))36 b(The)h(case)e Fm(E)830 2256 y Fk(6)867
2244 y Fm(:)120 b Fo(There)35 b(are)g(t)n(w)n(o)h(min)n(uscule)g
Fm(E)2026 2256 y Fk(6)2063 2244 y Fo(-heaps)f(lab)r(elled)i
Fm(F)12 b Fo(\()p Fm(E)2804 2256 y Fk(6)2841 2244 y Fm(;)i
Fo(1\))36 b(and)g Fm(F)12 b Fo(\()p Fm(E)3316 2256 y
Fk(6)3354 2244 y Fm(;)i Fo(5\).)62 b(The)36 b(heap)300
2343 y Fm(F)12 b Fo(\()p Fm(E)458 2355 y Fk(6)496 2343
y Fm(;)i Fo(1\))38 b(app)r(eared)g(in)h(Example)f(2.)70
b(The)38 b(heap)h Fm(F)12 b Fo(\()p Fm(E)2162 2355 y
Fk(6)2199 2343 y Fm(;)i Fo(5\))39 b(has)f(the)h(same)f(shap)r(e)h(and)f
(is)h(the)g(in)n(v)n(erse)e(of)300 2443 y Fm(F)12 b Fo(\()p
Fm(E)458 2455 y Fk(6)496 2443 y Fm(;)i Fo(1\).)300 2590
y(d\))28 b(The)g(case)e Fm(E)813 2602 y Fk(7)851 2590
y Fm(:)111 b Fo(There)27 b(is)g(only)h(one)f(min)n(uscule)g
Fm(E)2089 2602 y Fk(7)2155 2590 y Fo(heap)g(lab)r(elled)h
Fm(F)12 b Fo(\()p Fm(E)2818 2602 y Fk(7)2855 2590 y Fm(;)i
Fo(6\))p Fm(:)1108 5217 y
 tx@Dict begin tx@NodeDict begin {170.71646 17.07182 } false /N@A 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {142.26372 34.14365 } false /N@B 10
{InitPnode } NewNode end end
 1108
5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 51.21547 } false /N@C 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 68.2873 } false /N@D 10
{InitPnode } NewNode end end
 1108 5217
a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35912 } false /N@E 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {28.45274 102.43094 } false /N@F 10
{InitPnode } NewNode end end
 1108 5217 a 1108
5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 85.35912 } false /N@G 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 102.43094 } false /N@H 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217
a
 tx@Dict begin tx@NodeDict begin {56.90549 119.50276 } false /N@I 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 119.50276 } false /N@J
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 136.57458 } false /N@K 10
{InitPnode } NewNode end end
 1108
5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {56.90549 153.64641 } false /N@L 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {142.26372 136.57458 } false /N@M
10 {InitPnode } NewNode end end
 1108 5217
a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 153.64641 } false /N@N
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 170.71823 } false /N@O 10
{InitPnode } NewNode end end
 1108 5217 a 1108
5217 a
 tx@Dict begin tx@NodeDict begin {56.90549 187.79005 } false /N@P 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {28.45274 204.86188 } false /N@Q 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217
a
 tx@Dict begin tx@NodeDict begin {170.71646 153.64641 } false /N@R
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {142.26372 170.71823 } false /N@S
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 187.79005 } false /N@T
10 {InitPnode } NewNode end end
 1108
5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 204.86188 } false /N@U 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {56.90549 221.9337 } false /N@V 10
{InitPnode } NewNode end end
 1108 5217
a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 221.9337 } false /N@W 10
{InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {85.35823 239.00552 } false /N@X 10
{InitPnode } NewNode end end
 1108 5217 a 1108
5217 a
 tx@Dict begin tx@NodeDict begin {113.81097 256.07735 } false /N@Y
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217 a
 tx@Dict begin tx@NodeDict begin {142.26372 273.14917 } false /N@Z
10 {InitPnode } NewNode end end
 1108 5217 a 1108 5217
a
 tx@Dict begin tx@NodeDict begin {170.71646 290.221 } false /N@AA 10
{InitPnode } NewNode end end
 1108 5217 a 2505 5102 a Fo(6)2269 4961 y(5)2032 4819
y(4)1796 4677 y(3)1560 4535 y(2)1324 4394 y(1)2032 4535
y(0)1796 4394 y(3)1560 4252 y(2)430 b(4)1796 4110 y(3)1560
3969 y(0)2269 4110 y(5)2032 3969 y(4)1796 3827 y(3)1560
3685 y(2)1324 3543 y(1)2505 3969 y(6)2269 3827 y(5)2032
3685 y(4)1796 3543 y(3)1560 3402 y(2)g(0)1796 3260 y(3)2032
3118 y(4)2269 2976 y(5)2505 2835 y(6)1191 5096 y Fm(F)12
b Fo(\()p Fm(E)1349 5108 y Fk(7)1387 5096 y Fm(;)i Fo(6\))1108
5217 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217
a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@J /N@K InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@K /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108
5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@M /N@N InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@N /N@O InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@O /N@P InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@P /N@Q InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@R /N@S InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@S /N@T InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@T /N@U InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217
a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@U /N@V InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@W /N@X InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108
5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@D /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@H /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@I /N@K InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@J /N@M InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@K /N@N InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217
a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@L /N@O InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@M /N@R InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108
5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@N /N@S InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@O /N@T InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@P /N@U InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@Q /N@V InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@U /N@W InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@V /N@X InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@X /N@Y InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217
a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@Y /N@Z InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108 5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@Z /N@AA InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a 1108
5217 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 7.0
7.0 0 0 /N@F /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 5217 a eop
%%Page: 6 6
6 5 bop 0 66 a Fk(6)1453 b(N.)22 b(J.)g(WILDBER)n(GER)100
266 y Fo(This)40 b(lo)n(v)n(ely)f(lattice,)44 b(whic)n(h)d(w)n(e)f
(migh)n(t)h(call)f(the)h Fi(swal)t(low)p Fo(,)46 b(is)40
b(symmetric,)k(spindle)d(shap)r(ed,)i(Sp)r(erner,)0 365
y(Gaussian)27 b(and)g(enjo)n(ys)g(other)g(in)n(teresting)g(com)n
(binatorial)f(prop)r(erties)g(\(see)i([7],)f([9],)g([11]\).)100
465 y(Note)32 b(that)g(in)g(eac)n(h)f(case)g(the)i(graph)d
Fm(X)39 b Fo(is)31 b(an)h(ideal)g(of)g(the)g(min)n(uscule)g
Fm(X)7 b Fo(-heap)31 b(and)g(that)h(the)h(minimal)0 565
y(v)n(ertex)27 b(app)r(ears)f(in)i(the)g(lab)r(el)f(of)h(that)g
Fm(X)7 b Fo(-heap.)1226 746 y(3.)41 b Fn(R)n(oots)31
b(of)h(a)f(simple)h(graph)100 895 y Fo(Let)c Fm(X)35
b Fo(b)r(e)29 b(a)f(simple)g(graph.)38 b(W)-7 b(e)29
b(will)f(de\014ne)h(a)f(distinguished)g(class)g(of)g(in)n(teger)g(v)-5
b(alued)28 b(functions)h(on)f(the)0 995 y(v)n(ertices)f(of)i
Fm(X)35 b Fo(whic)n(h)28 b(w)n(e)h(call)f(the)h Fi(r)l(o)l(ots)f
Fo(of)h Fm(X)7 b Fo(.)39 b(Let)29 b Fm(P)12 b Fo(\()p
Fm(X)7 b Fo(\))28 b(denote)g(the)h(set)g(of)f(all)h(in)n(teger)e(v)-5
b(alued)29 b(functions)0 1095 y(on)i Fm(X)r(;)g Fo(with)h
Fm(P)502 1064 y Fk(+)557 1095 y Fo(\()p Fm(X)7 b Fo(\))31
b(and)g Fm(P)958 1064 y Fh(\000)1014 1095 y Fo(\()p Fm(X)7
b Fo(\))31 b(the)g(non-negativ)n(e)f(and)h(non-p)r(ositiv)n(e)f
(functions)h(in)h Fm(P)12 b Fo(\()p Fm(X)7 b Fo(\))31
b(resp)r(ectiv)n(ely)-7 b(.)0 1194 y(F)g(or)31 b(a)g(v)n(ertex)f
Fm(x;)i Fo(let)g Fm(\016)744 1206 y Fl(x)817 1194 y Fo(denote)f(the)h
(function)g(whic)n(h)f(is)g(1)g(at)h Fm(x)f Fo(and)h(0)f(elsewhere.)47
b(W)-7 b(e)32 b(call)f(an)g(elemen)n(t)g(of)0 1294 y
Fm(P)12 b Fo(\()p Fm(X)7 b Fo(\))27 b(a)h Fi(p)l(opulation)h
Fo(and)e(refer)g(to)g Fm(\016)1194 1306 y Fl(x)1264 1294
y Fo(as)g(a)g Fi(singleton)h Fo(p)r(opulation.)100 1393
y(F)-7 b(or)27 b(eac)n(h)f(v)n(ertex)h Fm(x)p Fo(,)h(de\014ne)g
Fm(s)1064 1405 y Fl(x)1156 1393 y Fo(:)51 b Fm(P)12 b
Fo(\()p Fm(X)7 b Fo(\))23 b Fj(!)g Fm(P)12 b Fo(\()p
Fm(X)7 b Fo(\))28 b(b)n(y)948 1680 y(\()p Fm(ps)1061
1692 y Fl(x)1102 1680 y Fo(\)\()p Fm(y)s Fo(\))c(=)1354
1510 y Ff(8)1354 1585 y(<)1354 1734 y(:)1469 1575 y Fm(p)p
Fo(\()p Fm(y)s Fo(\))670 b(if)62 b Fm(y)26 b Fj(6)p Fo(=)c
Fm(x)1469 1712 y Ff(P)1557 1799 y Fl(z)r Fh(2)p Fl(N)6
b Fk(\()p Fl(x)p Fk(\))1802 1774 y Fm(p)p Fo(\()p Fm(z)t
Fo(\))18 b Fj(\000)g Fm(p)p Fo(\()p Fm(x)p Fo(\))84 b(if)34
b Fm(y)26 b Fo(=)d Fm(x)0 1906 y Fo(where)k Fm(N)9 b
Fo(\()p Fm(x)p Fo(\))29 b(denotes)e(the)h(set)f(of)h(neigh)n(b)r(ours)e
(of)i Fm(x)p Fo(.)37 b(Call)28 b Fm(s)1960 1918 y Fl(x)2029
1906 y Fo(the)g Fi(mutation-r)l(e\015e)l(ction)f Fo(at)g
Fm(x)p Fo(.)100 2006 y(There)18 b(is)i(a)f(useful)g(ph)n(ysical)g(mo)r
(del)g(for)g(visualising)g(suc)n(h)g(re\015ections.)33
b(W)-7 b(e)20 b(ma)n(y)e(imagine)h Fm(X)26 b Fo(as)19
b(represen)n(ting)0 2105 y(a)24 b(pattern)h(of)g(cities)f(and)h(roads)e
(on)i(Mars,)f(whic)n(h)h(con)n(tains)e(Martians)h(and)h(an)n
(ti-Martians.)34 b(If)25 b(a)f(Martian)g(and)0 2205 y(an)33
b(an)n(ti-Martian)g(app)r(ear)g(together)f(in)i(a)g(cit)n(y)-7
b(,)35 b(they)f(m)n(utually)g(annihilate)f(eac)n(h)g(other,)i(so)e
(that)h(eac)n(h)f(cit)n(y)0 2305 y(con)n(tains)e(only)h(Martians)f(or)g
(an)n(ti-Martians)g(or)g(is)h(empt)n(y)-7 b(.)51 b(If)32
b(a)g(giv)n(en)f(cit)n(y)h Fi(mutates)p Fo(,)h(its)f(inhabitan)n(ts)g
(turn)0 2404 y(to)26 b(an)n(ti-inhabitan)n(ts)f(and)h(sim)n
(ultaneously)f(eac)n(h)g(neigh)n(b)r(ouring)g(cit)n(y)g(sends)h(a)g
(cloned)f(cop)n(y)g(of)h(its)g(p)r(opulation)0 2504 y(in)n(to)h(the)h
(m)n(utating)g(cit)n(y)-7 b(.)100 2603 y(A)30 b Fi(r)l(o)l(ot)f
Fo(p)r(opulation)h(of)f Fm(X)36 b Fo(is)30 b(an)n(y)f(p)r(opulation)g
(obtainable)g(from)g(a)h(singleton)f(p)r(opulation)g(b)n(y)g(a)h
(sequence)0 2703 y(of)24 b(re\015ections)f Fm(s)519 2715
y Fl(x)557 2723 y Fe(i)587 2703 y Fo(.)36 b(W)-7 b(e)25
b(let)f Fm(R)q Fo(\()p Fm(X)7 b Fo(\))24 b(denote)g(the)h(set)f(of)g
(all)g(ro)r(ot)f(p)r(opulations,)i(and)f Fm(R)2730 2673
y Fk(+)2785 2703 y Fo(\()p Fm(X)7 b Fo(\))22 b(=)h Fm(R)q
Fo(\()p Fm(X)7 b Fo(\))12 b Fj(\\)g Fm(P)3383 2673 y
Fk(+)3437 2703 y Fo(\()p Fm(X)7 b Fo(\))p Fm(;)0 2803
y(R)64 2773 y Fh(\000)120 2803 y Fo(\()p Fm(X)g Fo(\))23
b(=)f Fm(R)q Fo(\()p Fm(X)7 b Fo(\))r Fj(\\)r Fm(P)698
2773 y Fh(\000)755 2803 y Fo(\()p Fm(X)g Fo(\))p Fm(;)19
b Fo(the)h Fi(p)l(ositive)h Fo(and)f Fi(ne)l(gative)g
Fo(ro)r(ot)f(p)r(opulations)g(resp)r(ectiv)n(ely)-7 b(.)33
b(W)-7 b(e)20 b(refer)f(informally)0 2902 y(to)27 b(ro)r(ot)g(p)r
(opulations)g(as)g Fi(r)l(o)l(ots)p Fo(.)0 3054 y Ft(Lemma)j(3.1.)181
b Fo(\(1\))41 b Fm(s)856 3024 y Fk(2)856 3075 y Fl(x)921
3054 y Fo(=)23 b Fm(id)29 b Fi(for)i(al)t(l)g Fm(x)141
3154 y Fo(\(2\))42 b Fm(s)328 3166 y Fl(x)369 3154 y
Fm(s)408 3166 y Fl(y)471 3154 y Fo(=)23 b Fm(s)598 3166
y Fl(y)638 3154 y Fm(s)677 3166 y Fl(x)748 3154 y Fi(for)31
b(al)t(l)g Fm(x;)14 b(y)32 b Fi(which)g(ar)l(e)e(not)f(neighb)l(ours)
141 3253 y Fo(\(3\))42 b Fm(s)328 3265 y Fl(x)369 3253
y Fm(s)408 3265 y Fl(y)448 3253 y Fm(s)487 3265 y Fl(x)552
3253 y Fo(=)23 b Fm(s)679 3265 y Fl(y)719 3253 y Fm(s)758
3265 y Fl(x)799 3253 y Fm(s)838 3265 y Fl(y)908 3253
y Fi(if)30 b Fm(x;)14 b(y)33 b Fi(ar)l(e)d(neighb)l(ours.)0
3405 y Ft(Prop)s(osition)38 b(3.1.)44 b Fi(The)37 b(gr)l(oup)f
Fm(W)48 b Fi(gener)l(ate)l(d)37 b(by)f(al)t(l)h Fm(s)1907
3417 y Fl(x)1985 3405 y Fi(is)f(a)h(Coxeter)f(gr)l(oup)g(with)h(the)f
(r)l(elations)h(in)f(the)0 3505 y(pr)l(evious)31 b(L)l(emma)f(as)g(the)
g(only)g(r)l(elations.)0 3657 y Ft(Prop)s(osition)20
b(3.2.)31 b Fm(R)q Fo(\()p Fm(X)7 b Fo(\))21 b Fi(is)h(\014nite)e
Fj(,)k Fm(W)33 b Fi(is)21 b(\014nite)g Fj(,)i Fm(X)28
b Fi(is)21 b(one)h(of)g(the)f(gr)l(aphs)i Fm(A)2666 3669
y Fl(n)2733 3657 y Fm(n)f Fj(\025)h Fo(1)p Fm(;)35 b(D)3062
3669 y Fl(n)3128 3657 y Fm(n)44 b Fj(\025)g Fo(4)p Fm(;)34
b(E)3491 3669 y Fk(6)3529 3657 y Fm(;)h(E)3648 3669 y
Fk(7)0 3756 y Fi(or)30 b Fm(E)168 3768 y Fk(8)206 3756
y Fm(:)0 3908 y Ft(Prop)s(osition)g(3.3.)40 b Fi(F)-6
b(or)30 b(any)g(simple)h(gr)l(aph)g Fm(X)7 b Fi(,)30
b Fm(R)q Fo(\()p Fm(X)7 b Fo(\))22 b(=)h Fm(R)2014 3878
y Fk(+)2069 3908 y Fo(\()p Fm(X)7 b Fo(\))18 b Fj([)h
Fm(R)2365 3878 y Fh(\000)2420 3908 y Fo(\()p Fm(X)7 b
Fo(\))p Fi(.)100 4060 y Fo(This)30 b(last)h(rather)e(remark)-5
b(able)29 b(result)i(is)f(a)h(consequence)e(of)i(the)g(theory)f(of)h
(Co)n(xeter)e(groups;)i(the)g(author)0 4160 y(kno)n(ws)c(of)g(no)g
(direct)h(com)n(binatorial)e(pro)r(of)h(\(sadly\).)100
4259 y(W)-7 b(e)24 b(sa)n(y)f Fm(X)31 b Fo(is)24 b(an)g
Fm(AD)r(E)32 b Fi(gr)l(aph)25 b Fo(i\013)g(it)f(is)g(in)h(the)f(list)h
(in)f(Prop)r(osition)f(3.2.)34 b(F)-7 b(or)24 b(suc)n(h)g(graphs,)f
(the)i(set)f(of)g(ro)r(ots)0 4359 y(is)k(a)h(ro)r(ot)e(system)i(of)f
(classical)f(t)n(yp)r(e.)40 b(T)-7 b(o)28 b(connect)h(our)f(discussion)
f(with)i(the)g(usual)f(approac)n(h,)f(w)n(e)i(de\014ne)f(an)0
4458 y(inner)f(pro)r(duct)h(\()g Fm(;)41 b Fo(\))28 b(on)g
Fm(P)12 b Fo(\()p Fm(X)7 b Fo(\))27 b(for)g(general)f
Fm(X)34 b Fo(b)n(y)977 4741 y(\()p Fm(\016)1046 4753
y Fl(x)1088 4741 y Fm(;)14 b(\016)1162 4753 y Fl(y)1202
4741 y Fo(\))23 b(=)1345 4571 y Ff(8)1345 4645 y(<)1345
4795 y(:)1525 4640 y Fo(2)82 b(if)35 b Fm(x)23 b Fo(=)g
Fm(y)1460 4740 y Fj(\000)p Fo(1)82 b(if)35 b Fm(x)28
b Fo(and)g Fm(y)i Fo(are)c(neigh)n(b)r(ours)1525 4840
y(0)82 b(otherwise)0 4992 y Ft(Lemma)30 b(3.2.)40 b Fi(F)-6
b(or)30 b Fm(p;)43 b(q)26 b Fj(2)d Fm(P)12 b Fo(\()p
Fm(X)7 b Fo(\))30 b Fi(and)g Fm(x)g Fi(a)g(vertex)g(of)g
Fm(X)1469 5131 y Fo(\()p Fm(p;)14 b(q)s Fo(\))23 b(=)g(\()p
Fm(ps)1876 5143 y Fl(x)1918 5131 y Fm(;)14 b(q)s(s)2034
5143 y Fl(x)2076 5131 y Fo(\))p Fm(:)0 5283 y Ft(Prop)s(osition)30
b(3.4.)40 b Fo(\()30 b Fm(;)44 b Fo(\))30 b Fi(is)g(p)l(ositive)h
(de\014nite)f Fj(,)23 b Fm(X)36 b Fi(is)30 b(of)h Fm(AD)r(E)k
Fi(typ)l(e.)p eop
%%Page: 7 7
7 6 bop 874 66 a Fk(A)30 b(COMBINA)-5 b(TORIAL)29 b(CONSTR)n(UCTION)i
(F)n(OR)e(SIMPL)-5 b(Y{LA)n(CED)29 b(LIE)f(ALGEBRAS)513
b(7)400 266 y Fo(Th)n(us)37 b(for)f Fm(X)44 b Fo(an)37
b Fm(AD)r(E)42 b Fo(graph,)d Fm(R)q Fo(\()p Fm(X)7 b
Fo(\))37 b(is)g(a)g(\014nite)h(ro)r(ot)e(system)h(in)h(the)f(usual)g
(sense)g(since)g(eac)n(h)f Fm(s)3765 278 y Fl(x)3844
266 y Fo(is)300 365 y(indeed)29 b(the)h(re\015ection)e(in)i(the)f(h)n
(yp)r(erplane)f(determined)i(b)n(y)e Fm(\016)2330 377
y Fl(x)2401 365 y Fo(and)h(preserv)n(es)e Fm(R)q Fo(\()p
Fm(X)7 b Fo(\).)41 b(It)29 b(seems)g(in)n(teresting)300
465 y(to)g(inquire)g(as)g(to)g(the)h(prop)r(erties)f(of)g(the)h(ro)r
(ot)f(systems)g Fm(R)q Fo(\()p Fm(X)7 b Fo(\))29 b(for)f(general)h
(graphs.)40 b(F)-7 b(or)29 b(example,)h(to)f(what)300
565 y(exten)n(t)f(do)r(es)f(the)h(follo)n(wing)e(generalise?)300
715 y Ft(Prop)s(osition)k(3.5.)40 b Fi(If)30 b Fm(X)36
b Fi(is)30 b(an)g Fm(AD)r(E)35 b Fi(gr)l(aph,)d(then)1506
851 y Fm(R)q Fo(\()p Fm(X)7 b Fo(\))23 b(=)f Fj(f)p Fm(p)h
Fj(2)g Fm(P)12 b Fo(\()p Fm(X)7 b Fo(\))29 b Fj(j)h Fo(\()p
Fm(p;)14 b(p)p Fo(\))23 b(=)g(2)p Fj(g)p Fm(:)912 1024
y Fo(4.)41 b Fn(Constr)n(uctions)32 b(of)f(Lie)h(algebras)f(fr)n(om)h
(minuscule)f(heaps)400 1173 y Fo(Let)25 b Fm(X)32 b Fo(b)r(e)25
b(an)g Fm(AD)r(E)31 b Fo(graph)24 b(with)i(a)f(min)n(uscule)g
Fm(X)7 b Fo(-heap)24 b Fm(F)r(:)i Fo(A)g(subset)f Fm(L)g
Fo(of)g Fm(F)37 b Fo(is)25 b Fi(c)l(onvex)h Fo(if)f Fj(8)p
Fm(x;)14 b(y)26 b Fj(2)d Fm(L;)i Fo(an)n(y)300 1273 y
Fm(z)32 b Fo(suc)n(h)d(that)g Fm(x)c(<)g(z)j(<)d(y)32
b Fo(is)c(also)g(in)h Fm(L:)g Fo(W)-7 b(e)29 b(will)g(refer)f(to)h(con)
n(v)n(ex)e(subsets)i(as)f Fi(layers)p Fo(.)42 b(F)-7
b(or)28 b(an)n(y)g(la)n(y)n(er)f Fm(L)h Fo(of)h Fm(F)r(;)300
1372 y Fo(de\014ne)f(the)g Fi(c)l(ontent)f Fo(of)g Fm(L)g
Fo(to)h(b)r(e)g(the)g(p)r(opulation)f Fm(c)p Fo(\()p
Fm(L)p Fo(\)\()p Fm(x)p Fo(\))d(=)f(#)28 b(times)g Fm(x)g
Fo(app)r(ears)e(in)i Fm(L)p Fo(.)400 1472 y(F)-7 b(or)29
b Fm(\013)e Fj(2)g Fm(R)777 1442 y Fk(+)832 1472 y Fo(\()p
Fm(X)7 b Fo(\))p Fm(;)30 b Fo(de\014ne)g(a)f(la)n(y)n(er)f
Fm(L)h Fo(to)h(b)r(e)g(an)g Fm(\013)p Fi(-layer)h Fo(i\013)f
Fm(c)p Fo(\()p Fm(L)p Fo(\))d(=)f Fm(\013;)31 b Fo(and)e(let)h
Fj(L)3079 1484 y Fl(\013)3127 1472 y Fo(\()p Fm(F)12
b Fo(\))30 b(denote)g(the)g(set)g(of)300 1572 y Fm(\013)p
Fo(-la)n(y)n(ers)d(of)h Fm(F)r(:)h Fo(F)-7 b(or)28 b(an)n(y)g(subset)g
Fm(S)34 b Fo(of)28 b Fm(F)40 b Fo(let)29 b Fm(I)7 b Fo(\()p
Fm(S)e Fo(\))25 b(=)f Fj(f)p Fm(x)h Fj(2)g Fm(F)40 b
Fj(j)29 b(9)p Fm(y)e Fj(2)e Fm(S;)42 b(x)25 b Fj(\024)f
Fm(y)s Fj(g)k Fo(b)r(e)h(the)g(ideal)f(generated)f(b)n(y)300
1671 y Fm(S:)h Fo(P)n(artially)e(order)g(la)n(y)n(ers)f(b)n(y)j
(declaring)e Fm(L)1723 1683 y Fk(1)1783 1671 y Fj(\024)d
Fm(L)1928 1683 y Fk(2)1992 1671 y Fo(if)28 b Fm(L)2125
1683 y Fk(1)2185 1671 y Fj(\022)22 b Fm(I)7 b Fo(\()p
Fm(L)2404 1683 y Fk(2)2442 1671 y Fo(\))p Fm(:)300 1821
y Ft(Prop)s(osition)22 b(4.1.)34 b Fi(F)-6 b(or)24 b(any)g
Fm(\013)g Fj(2)f Fm(R)1513 1791 y Fk(+)1568 1821 y Fo(\()p
Fm(X)7 b Fo(\))p Fm(;)37 b Fj(L)1825 1833 y Fl(\013)1873
1821 y Fo(\()p Fm(F)12 b Fo(\))24 b Fi(is)g(non-empty)f(and)h(c)l
(ontains)g(a)g(unique)f(minimal)i Fm(\013)p Fi(-layer)300
1921 y Fm(L)357 1933 y Fl(\013)434 1921 y Fi(with)30
b(r)l(esp)l(e)l(ct)f(to)h(the)g(ab)l(ove)h(p)l(artial)g(or)l(der.)400
2071 y Fo(If)d Fm(L)f Fo(is)g(an)n(y)g Fm(\013)p Fo(-la)n(y)n(er)f
(then)i(w)n(e)f(de\014ne)h Fm(")p Fo(\()p Fm(L)p Fo(\))23
b(=)g Fm(")p Fo(\()p Fm(L;)14 b(L)2133 2083 y Fl(\013)2179
2071 y Fo(\))p Fm(;)28 b Fo(and)f(call)h(it)g(the)g Fi(p)l(arity)g
Fo(of)g Fm(L)p Fo(.)400 2171 y(No)n(w)g(let)h Fm(V)759
2183 y Fl(F)839 2171 y Fo(=)c(span)o Fj(f)p Fm(v)1177
2183 y Fl(I)1244 2171 y Fj(j)p Fm(I)35 b Fo(is)29 b(an)f(ideal)h(of)f
Fm(F)12 b Fj(g)p Fm(:)28 b Fo(F)-7 b(or)28 b(an)n(y)g(la)n(y)n(er)f
Fm(L)e Fj(\022)f Fm(F)41 b Fo(de\014ne)28 b(op)r(erators)f
Fm(X)3445 2183 y Fl(L)3523 2171 y Fo(and)i Fm(Y)3734
2183 y Fl(L)3812 2171 y Fo(on)300 2270 y Fm(V)348 2282
y Fl(F)431 2270 y Fo(b)n(y)1099 2550 y Fm(X)1168 2562
y Fl(L)1217 2550 y Fo(\()p Fm(v)1289 2562 y Fl(I)1328
2550 y Fo(\))23 b(=)1471 2380 y Ff(8)1471 2454 y(<)1471
2604 y(:)1586 2449 y Fm(v)1626 2461 y Fl(I)5 b Fh([)p
Fl(L)1838 2449 y Fo(if)34 b Fm(I)26 b Fj([)18 b Fm(L)28
b Fo(is)f(an)g(ideal)h(and)f Fm(I)f Fj(\\)18 b Fm(L)23
b Fo(=)g Fm(\036)1586 2649 y Fo(0)210 b(otherwise)1210
2885 y Fm(Y)1258 2897 y Fl(L)1308 2885 y Fo(\()p Fm(v)1380
2897 y Fl(I)1419 2885 y Fo(\))23 b(=)1562 2715 y Ff(8)1562
2790 y(<)1562 2939 y(:)1677 2785 y Fm(v)1717 2800 y Fl(I)5
b Fh(n)p Fl(L)1918 2785 y Fo(if)35 b Fm(I)30 b Fj(\023)22
b Fm(L)28 b Fo(and)f Fm(I)7 b Fj(n)p Fm(L)27 b Fo(is)g(an)g(ideal)1677
2984 y(0)199 b(otherwise)p Fm(:)400 3107 y Fo(F)-7 b(or)27
b Fm(\013)c Fj(2)g Fm(R)767 3077 y Fk(+)822 3107 y Fo(,)28
b(de\014ne)g(op)r(erators)d Fm(X)1549 3119 y Fl(\013)1597
3107 y Fo(,)i Fm(Y)1695 3119 y Fl(\013)1743 3107 y Fo(,)h(and)f
Fm(H)2024 3119 y Fl(\013)2099 3107 y Fo(on)g Fm(V)2262
3119 y Fl(F)2346 3107 y Fo(b)n(y)1686 3308 y Fm(X)1755
3320 y Fl(\013)1825 3308 y Fo(=)1994 3229 y Ff(X)1913
3411 y Fl(L)p Fh(2L)2050 3419 y Fe(\013)2091 3411 y Fk(\()p
Fl(F)9 b Fk(\))2236 3308 y Fm(")p Fo(\()p Fm(L)p Fo(\))p
Fm(X)2465 3320 y Fl(L)1707 3562 y Fm(Y)1755 3574 y Fl(\013)1825
3562 y Fo(=)1994 3483 y Ff(X)1913 3665 y Fl(L)p Fh(2L)2050
3673 y Fe(\013)2091 3665 y Fk(\()p Fl(F)g Fk(\))2208
3562 y Fm(")p Fo(\()p Fm(L)p Fo(\))27 b Fm(Y)2443 3574
y Fl(L)690 3994 y Fm(H)759 4006 y Fl(\013)807 3994 y
Fo(\()p Fm(v)879 4006 y Fl(I)917 3994 y Fo(\))d(=)1060
3724 y Ff(8)1060 3799 y(>)1060 3824 y(>)1060 3849 y(>)1060
3874 y(>)1060 3898 y(<)1060 4048 y(>)1060 4073 y(>)1060
4098 y(>)1060 4123 y(>)1060 4147 y(:)1240 3794 y Fm(v)1280
3806 y Fl(I)1402 3794 y Fo(if)34 b Fj(9)28 b Fm(\013)p
Fo(-la)n(y)n(er)e Fm(L)d Fj(\022)f Fm(I)35 b Fo(suc)n(h)27
b(that)h Fm(I)7 b Fj(n)p Fm(L)27 b Fo(is)g(an)g(ideal)1176
3993 y Fj(\000)p Fm(v)1281 4005 y Fl(I)1402 3993 y Fo(if)34
b Fj(9)28 b Fm(\013)p Fo(-la)n(y)n(er)e Fm(L;)41 b Fo(suc)n(h)27
b(that)h Fm(I)e Fj([)18 b Fm(L)28 b Fo(is)f(an)g(ideal)h(and)f
Fm(I)f Fj(\\)18 b Fm(L)23 b Fo(=)g Fm(\036)1240 4192
y Fo(0)120 b(otherwise)p Fm(:)400 4307 y Fo(F)-7 b(or)27
b(a)g(v)n(ertex)f Fm(x)j Fo(of)e Fm(X)7 b Fo(,)27 b(let)h(us)g(write)f
Fm(H)1673 4319 y Fl(\016)1703 4327 y Fe(x)1767 4307 y
Fo(=)c Fm(H)1924 4319 y Fl(x)1966 4307 y Fo(.)300 4457
y Ft(Prop)s(osition)30 b(4.2.)40 b Fi(F)-6 b(or)30 b(any)g
Fm(\013)24 b Fj(2)f Fm(R)1539 4427 y Fk(+)1594 4457 y
Fi(,)1755 4605 y Fm(H)1824 4617 y Fl(\013)1894 4605 y
Fo(=)1982 4526 y Ff(X)2023 4700 y Fl(x)2116 4605 y Fm(\013)p
Fo(\()p Fm(x)p Fo(\))31 b Fm(H)2380 4617 y Fl(x)2422
4605 y Fm(:)400 4834 y Fo(Th)n(us)c(the)h(op)r(erators)e
Fm(H)1190 4846 y Fl(\013)1237 4834 y Fm(;)14 b(\013)23
b Fj(2)h Fm(R)1493 4803 y Fk(+)1575 4834 y Fo(are)j(not)g(linearly)g
(indep)r(enden)n(t.)38 b(The)27 b(main)h(result)f(is)h(the)g(follo)n
(wing.)300 4984 y Ft(Theorem)44 b(4.1.)j Fi(L)l(et)40
b Fm(X)46 b Fi(b)l(e)41 b(a)f(simple)i(gr)l(aph)f(with)g(minuscule)f
Fm(X)7 b Fi(-he)l(ap)41 b Fm(F)12 b Fi(.)70 b(Then)41
b(the)g(set)f(of)h(op)l(er)l(ators)300 5083 y Fj(f)p
Fm(X)411 5095 y Fl(\013)483 5083 y Fj(j)26 b Fm(\013)d
Fj(2)h Fm(R)751 5053 y Fk(+)806 5083 y Fj(g)9 b([)g(f)p
Fm(Y)1011 5095 y Fl(\013)1084 5083 y Fj(j)26 b Fm(\013)d
Fj(2)h Fm(R)1352 5053 y Fk(+)1406 5083 y Fj(g)9 b([)g(f)p
Fm(H)1632 5095 y Fl(x)1700 5083 y Fj(j)26 b Fm(x)g Fo(a)j(v)n(ertex)g
(of)36 b Fm(X)7 b Fj(g)24 b Fi(on)i Fm(V)2555 5095 y
Fl(F)2636 5083 y Fi(is)g(line)l(arly)h(indep)l(endent)f(and)g(its)g(sp)
l(an)300 5183 y(forms)35 b(a)g(Lie)h(algebr)l(a.)55 b(This)36
b(Lie)f(algebr)l(a)h(is)f(simple,)i(dep)l(ends)f(only)f(on)g
Fm(X)7 b Fi(,)36 b(and)f(is)g(the)g(usual)f(Lie)i(algebr)l(a)300
5283 y(with)30 b(Dynkin)g(diagr)l(am)h Fm(X)7 b Fi(.)p
eop
%%Page: 8 8
8 7 bop 0 66 a Fk(8)1453 b(N.)22 b(J.)g(WILDBER)n(GER)100
266 y Fo(The)32 b(pro)r(of)f(relies)g(on)h(some)f(remark)-5
b(able)30 b(prop)r(erties)h(of)h(b)r(oth)h Fm(\013)p
Fo(-la)n(y)n(ers)d(in)i(min)n(uscule)g Fm(X)7 b Fo(-heaps)30
b(and)i(the)0 365 y(parit)n(y)27 b(functions)h Fm(")p
Fo(\()p Fm(L)p Fo(\).)100 465 y(Theorem)h(4.1)g(giv)n(es)g(an)h
(explicit)g(com)n(binatorial)e(construction)i(of)g(a)f(Lie)h(algebra)e
Fd(g)i Fo(of)g(op)r(erators)f(on)g Fm(V)3521 477 y Fl(F)3577
465 y Fo(.)0 565 y(F)-7 b(urthermore)28 b(the)i(basis)e(giv)n(en)h(in)g
(the)h(Theorem)e(is)i(a)e(Chev)-5 b(alley)29 b(basis)g(for)g
Fd(g)p Fo(.)41 b(All)30 b(structure)f(constan)n(ts)f(are)0
664 y(in)n(tegers)i(and)h(can)f(b)r(e)h(explicitly)h(read)e(o\013)h
(from)f(the)h(min)n(uscule)g(heap)g(using)g(the)g(form)n(ulae)f(for)g
Fm(X)3267 676 y Fl(\013)3314 664 y Fm(;)14 b(Y)3399 676
y Fl(\013)3447 664 y Fm(;)g(H)3553 676 y Fl(\013)0 764
y Fo(ab)r(o)n(v)n(e.)100 863 y(The)32 b(particular)e(represen)n
(tations)h(so)g(constructed)g(coincide)h(with)h(the)f(so-called)f
Fi(minuscule)i(r)l(epr)l(esenta-)0 963 y(tions)i Fo(for)e(simply-laced)
h(Lie)g(algebras,)h(de\014ned)f(b)n(y)g(the)h(condition)f(that)h(all)f
(w)n(eigh)n(t)g(spaces)f(are)h(conjugate)0 1063 y(under)22
b(the)h(W)-7 b(eyl)22 b(group.)34 b(The)23 b(reason)d(that)j(w)n(e)f
(cannot)g(construct)f Fm(E)2236 1075 y Fk(8)2296 1063
y Fo(this)i(w)n(a)n(y)e(is)h(that)g Fm(E)2929 1075 y
Fk(8)2989 1063 y Fo(has)g(no)g(min)n(uscule)0 1162 y(represen)n
(tations|the)i(smallest)g(represen)n(tation)g(is)h(the)h(adjoin)n(t)f
(represen)n(tation)e(whic)n(h)i(has)g(the)h(zero)e(w)n(eigh)n(t)0
1262 y(space)j(\(with)h(m)n(ultiplicit)n(y)g(8\))g(as)f(w)n(ell)g(as)g
(the)h(ro)r(ot)f(spaces.)1548 1772 y(5.)41 b Fn(Examples)100
1922 y Fo(W)-7 b(e)40 b(will)h(no)n(w)e(giv)n(e)g(some)h(brief)g
(descriptions)g(of)g(the)g(represen)n(tations)e(constructed)i(b)n(y)g
(this)h(metho)r(d.)0 2022 y(This)c(includes)g(all)g(the)g(fundamen)n
(tal)h(represen)n(tations)d(of)i Fm(sl)r Fo(\()p Fm(n)p
Fo(\),)i(the)e(t)n(w)n(o)g(spin)g(represen)n(tations)e(and)i(the)0
2121 y(standard)29 b(represen)n(tation)g(of)h(the)g(ev)n(en)g
(orthogonal)e(Lie)i(algebra)e Fm(so)p Fo(\(2)p Fm(n)p
Fo(\),)j(and)f(the)g(27)f(and)h(56)g(dimensional)0 2221
y(represen)n(tations)c(of)h Fm(E)731 2233 y Fk(6)796
2221 y Fo(and)h Fm(E)1019 2233 y Fk(7)1084 2221 y Fo(resp)r(ectiv)n
(ely)-7 b(.)0 2475 y(a\))28 b(The)g(case)g Fm(A)512 2487
y Fl(n)557 2475 y Fm(:)83 b Fo(F)-7 b(or)28 b(1)23 b
Fj(\024)h Fm(k)j Fj(\024)c Fm(n)28 b Fo(the)h(min)n(uscule)f
Fm(A)1795 2487 y Fl(n)1840 2475 y Fo(-heap)g Fm(F)12
b Fo(\()p Fm(A)2226 2487 y Fl(n)2272 2475 y Fm(;)i(k)s
Fo(\))28 b(is)g(the)h(p)r(oset)f(commonly)f(kno)n(wn)h(as)0
2574 y Fm(k)21 b Fj(\002)d Fo(\()p Fm(n)h Fj(\000)f Fm(k)j
Fo(+)d(1\))p Fm(:)1091 3980 y
 tx@Dict begin tx@NodeDict begin {68.28685 22.76228 } false /N@A 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {91.04913 45.52457 } false /N@B 10
{InitPnode } NewNode end end

1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {113.81142 68.28685 } false /N@C 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {136.5737 91.04913 } false /N@D 10
{InitPnode } NewNode end end
 1091
3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {159.33598 113.81142 } false /N@E
10 {InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {45.52457 45.52457 } false /N@F 10
{InitPnode } NewNode end end
 1091 3980
a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {68.28685 68.28685 } false /N@G 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {91.04913 91.04913 } false /N@H 10
{InitPnode } NewNode end end
 1091 3980 a 1091
3980 a
 tx@Dict begin tx@NodeDict begin {113.81142 113.81142 } false /N@I
10 {InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {136.5737 136.5737 } false /N@J 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980
a
 tx@Dict begin tx@NodeDict begin {22.76228 68.28685 } false /N@K 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {45.52457 91.04913 } false /N@L 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {68.28685 113.81142 } false /N@M 10
{InitPnode } NewNode end end
 1091
3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {91.04913 136.5737 } false /N@N 10
{InitPnode } NewNode end end
 1091 3980 a 1091 3980 a
 tx@Dict begin tx@NodeDict begin {113.81142 159.33598 } false /N@O
10 {InitPnode } NewNode end end
 1091 3980
a 1638 3818 a Fo(3)1826 3629 y(4)2015 3440 y(5)2204 3251
y(6)2393 3062 y(7)1449 3629 y(2)1638 3440 y(3)1826 3251
y(4)2015 3062 y(5)2204 2873 y(6)1260 3440 y(1)1449 3251
y(2)1638 3062 y(3)1826 2873 y(4)2015 2684 y(5)1091 3980
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091
3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980
a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@G /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091
3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@I /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@K /N@L InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@L /N@M InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@M /N@N InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@N /N@O InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091
3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980
a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091
3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@K /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@L /N@G InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@M /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@N /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091
3980 a 1091 3980 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@O /N@J InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1091 3980 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 68.28685 11.38113 91.04913 22.76228 113.81142 45.52457
136.5737 68.28685 170.71712 113.81142 159.33598 125.19255 136.5737
102.43027 113.81142 86.49673 91.04913 102.43027 68.28685 86.49673 56.9057
102.43027 22.76228 91.04913 11.38113 68.28685 34.14342 34.14342 68.28685
11.38113  1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore end


@endspecial 100 4038 a Fo(Sho)n(wn)32 b(is)g(an)g(ideal)g
Fm(I)40 b Fo(in)32 b Fm(F)12 b Fo(\()p Fm(A)1117 4050
y Fk(7)1155 4038 y Fm(;)i Fo(3\).)51 b(This)32 b(ideal)h(is)f(sp)r
(eci\014ed)h(b)n(y)f(3)g(n)n(um)n(b)r(ers)g Fm(\025)2748
4050 y Fk(1)2816 4038 y Fo(=)f(2)p Fm(;)46 b(\025)3071
4050 y Fk(2)3140 4038 y Fo(=)30 b(3)p Fm(;)46 b(\025)3394
4050 y Fk(3)3463 4038 y Fo(=)30 b(5)0 4138 y(lying)e(along)f(the)i
(northeast)e(lines)h(as)g(sho)n(wn.)38 b(A)29 b(general)d(ideal)i
Fm(I)36 b Fo(in)28 b Fm(F)12 b Fo(\()p Fm(A)2425 4150
y Fk(7)2463 4138 y Fm(;)i Fo(3\))28 b(is)g(determined)h(b)n(y)f(one)f
(of)i(the)0 4238 y(56)e(triples)g(\()p Fm(\025)445 4250
y Fk(1)483 4238 y Fm(;)14 b(\025)568 4250 y Fk(2)606
4238 y Fm(;)g(\025)691 4250 y Fk(3)728 4238 y Fo(\))28
b(satisfying)1397 4457 y(0)23 b Fj(\024)f Fm(\025)1597
4469 y Fk(1)1658 4457 y Fj(\024)h Fm(\025)1794 4469 y
Fk(2)1854 4457 y Fj(\024)g Fm(\025)1990 4469 y Fk(3)2051
4457 y Fj(\024)f Fo(5)p Fm(:)0 4735 y Fo(In)36 b(general)e(there)i(are)
773 4618 y Ff(\022)835 4679 y Fm(n)18 b Fo(+)g(1)908
4792 y Fm(k)1027 4618 y Ff(\023)1124 4735 y Fo(solutions)35
b(of)h(0)g Fj(\024)g Fm(\025)1809 4747 y Fk(1)1884 4735
y Fj(\024)g Fm(\025)2033 4747 y Fk(2)2084 4735 y Fm(:)14
b(:)g(:)37 b Fj(\024)f Fm(\025)2367 4747 y Fl(k)2445
4735 y Fj(\024)g Fm(n)24 b Fj(\000)f Fm(k)k Fo(+)c(1)35
b(and)h(so)f(this)h(is)g(the)0 4884 y(dimension)28 b(of)f(the)h
(corresp)r(onding)e(represen)n(tation)g(of)h Fm(sl)r
Fo(\()p Fm(n)p Fo(\).)100 4984 y(An)g Fm(\013)p Fo(-la)n(y)n(er)e(is)h
(just)i(a)e(string)g(of)g(adjacen)n(t)g(elemen)n(ts)h(of)g(the)g(giv)n
(en)e(substring)h(de\014ning)h Fm(\013)g Fo(\(what)g(w)n(e)f(called)0
5083 y(a)j(`sto)r(c)n(k)g(mark)n(et)g(p)r(oset')g(earlier\).)42
b(The)30 b(minimal)g Fm(\013)p Fo(-la)n(y)n(er)e Fm(L)h
Fo(is)g(a)g(subp)r(oset)h(of)g(the)g(minimal)f(cop)n(y)g(of)h
Fm(A)3456 5095 y Fl(n)3531 5083 y Fo(in)0 5183 y Fm(F)12
b Fo(,)34 b(and)f(the)g(parit)n(y)f(of)h(an)g(arbitrary)d
Fm(\013)p Fo(-la)n(y)n(er)i Fm(L)g Fo(is)h(\()p Fj(\000)p
Fo(1\))1903 5153 y Fl(j)1970 5183 y Fo(where)g Fm(j)38
b Fo(is)32 b(the)i(n)n(um)n(b)r(er)e(of)h(b)r(onds)g(b)n(y)g(whic)n(h)f
Fm(L)0 5283 y Fo(di\013ers)27 b(from)h Fm(L)501 5295
y Fk(0)537 5283 y Fo(.)p eop
%%Page: 9 9
9 8 bop 874 66 a Fk(A)30 b(COMBINA)-5 b(TORIAL)29 b(CONSTR)n(UCTION)i
(F)n(OR)e(SIMPL)-5 b(Y{LA)n(CED)29 b(LIE)f(ALGEBRAS)513
b(9)872 649 y
 tx@Dict begin tx@NodeDict begin {28.45274 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 872 649 a 872 649 a
 tx@Dict begin tx@NodeDict begin {56.90549 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 872 649 a 872 649 a
 tx@Dict begin tx@NodeDict begin {85.35823 21.33955 } false /N@C 10
{InitPnode } NewNode end end

872 649 a 872 649 a
 tx@Dict begin tx@NodeDict begin {113.81097 42.67911 } false /N@D 10
{InitPnode } NewNode end end
 872 649 a 1088 498 a Fo(3)1324 321
y(4)1560 498 y(5)1796 321 y(6)872 649 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 872 649 a 872
649 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 872 649 a 872 649 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 872 649 a 300 748 a Fo(In)27
b(the)h(ab)r(o)n(v)n(e)e(diagram)g(where)g Fm(\013)e
Fo(=)e Fm(\016)1544 760 y Fk(3)1599 748 y Fo(+)45 b Fm(d)1752
760 y Fk(4)1807 748 y Fo(+)17 b Fm(\016)1926 760 y Fk(5)1981
748 y Fo(+)g Fm(\016)2100 760 y Fk(6)2137 748 y Fo(,)28
b(the)f Fm(\013)p Fo(-la)n(y)n(er)f(di\013ers)h(from)g
Fm(L)3112 760 y Fl(\013)3186 748 y Fo(b)n(y)g(just)g(one)g(b)r(ond)h
(so)300 848 y(has)f(parit)n(y)g Fj(\000)p Fo(1.)36 b(Th)n(us)27
b Fm(X)1138 860 y Fl(\013)1185 848 y Fo(\()p Fm(v)1257
860 y Fl(I)1296 848 y Fo(\))c(=)g Fj(\000)p Fm(v)1544
860 y Fl(I)5 b Fh([)p Fl(L)1700 848 y Fo(in)28 b(this)f(particular)g
(example,)g(and)g Fm(H)2920 860 y Fl(\013)2968 848 y
Fo(\()p Fm(v)3040 860 y Fl(I)3078 848 y Fo(\))d(=)e Fj(\000)p
Fm(v)3326 860 y Fl(I)3364 848 y Fm(:)400 948 y Fo(Note)27
b(also)g(that)1394 1167 y Fm(H)1463 1179 y Fk(1)1501
1167 y Fo(\()p Fm(v)1573 1179 y Fl(I)1611 1167 y Fo(\))83
b(=)184 b(0)166 b Fm(H)2252 1179 y Fk(5)2289 1167 y Fo(\()p
Fm(v)2361 1179 y Fl(I)2400 1167 y Fo(\))83 b(=)g Fj(\000)p
Fm(v)2768 1179 y Fl(I)1394 1267 y Fm(H)1463 1279 y Fk(2)1501
1267 y Fo(\()p Fm(v)1573 1279 y Fl(I)1611 1267 y Fo(\))g(=)148
b Fm(v)1979 1279 y Fl(I)2183 1267 y Fm(H)2252 1279 y
Fk(6)2289 1267 y Fo(\()p Fm(v)2361 1279 y Fl(I)2400 1267
y Fo(\))83 b(=)184 b(0)1394 1366 y Fm(H)1463 1378 y Fk(3)1501
1366 y Fo(\()p Fm(v)1573 1378 y Fl(I)1611 1366 y Fo(\))83
b(=)g Fj(\000)p Fm(v)1979 1378 y Fl(I)2183 1366 y Fm(H)2252
1378 y Fk(7)2289 1366 y Fo(\()p Fm(v)2361 1378 y Fl(I)2400
1366 y Fo(\))g(=)147 b Fm(v)2767 1378 y Fl(I)1394 1466
y Fm(H)1463 1478 y Fk(4)1501 1466 y Fo(\()p Fm(v)1573
1478 y Fl(I)1611 1466 y Fo(\))83 b(=)148 b Fm(v)1979
1478 y Fl(I)300 1720 y Fo(and)27 b(indeed)h Fm(H)793
1732 y Fl(\013)864 1720 y Fo(=)22 b Fm(H)1020 1732 y
Fk(3)1076 1720 y Fo(+)c Fm(H)1228 1732 y Fk(4)1284 1720
y Fo(+)g Fm(H)1436 1732 y Fk(5)1492 1720 y Fo(+)g Fm(H)1644
1732 y Fk(6)1681 1720 y Fo(.)400 1820 y(Using)27 b(Theorem)g(2.1)g(to)g
(compute)h(structure)f(constan)n(ts)f(w)n(e)i(get)f(for)g(example)g
(that)1149 2090 y([)p Fm(X)1241 2102 y Fk(1)1278 2090
y Fm(;)14 b(X)1384 2102 y Fk(2)1421 2090 y Fo(])182 b(=)23
b Fj(\000)p Fm(X)1848 2102 y Fk(12)2118 2090 y Fo([)p
Fm(X)2210 2102 y Fk(12)2280 2090 y Fm(;)14 b(X)2386 2102
y Fk(3)2423 2090 y Fo(])83 b(=)23 b Fj(\000)p Fm(X)2751
2102 y Fk(123)1149 2190 y Fo([)p Fm(X)1241 2202 y Fk(1234)1377
2190 y Fm(;)14 b(X)1483 2202 y Fk(5)1520 2190 y Fo(])83
b(=)23 b Fm(X)1783 2202 y Fk(12345)2118 2190 y Fo([)p
Fm(X)2210 2202 y Fk(3)2247 2190 y Fm(;)14 b(X)2353 2202
y Fk(4)2390 2190 y Fo(])116 b(=)23 b Fm(X)2686 2202 y
Fk(34)2922 2190 y Fo(etc.)300 2467 y(Note)k(that)g(our)g(Chev)-5
b(alley)26 b(basis)g Fj(f)p Fm(X)1518 2479 y Fl(\013)1565
2467 y Fm(;)14 b(Y)1650 2479 y Fl(\013)1697 2467 y Fm(;)g(H)1803
2479 y Fl(x)1845 2467 y Fj(g)27 b Fo(and)g(the)g(corresp)r(onding)e
(structure)h(equations)h(of)g Fd(g)f Fo(dep)r(end)300
2566 y(on)h Fm(k)s Fo(.)300 2842 y(b\))i(The)g(case)e
Fm(D)824 2854 y Fl(n)869 2842 y Fm(:)83 b Fo(F)-7 b(or)28
b Fm(D)1194 2854 y Fl(n)1268 2842 y Fo(lab)r(elled)h(as)e(previously)-7
b(,)28 b(w)n(e)g(refer)g(to)h(the)g(min)n(uscule)f Fm(D)3111
2854 y Fl(n)3156 2842 y Fo(-heaps)g Fm(F)12 b Fo(\()p
Fm(D)3582 2854 y Fl(n)3627 2842 y Fm(;)i Fo(1\))28 b(and)300
2942 y Fm(F)12 b Fo(\()p Fm(D)466 2954 y Fl(n)511 2942
y Fm(;)i Fo(0\))29 b(as)f(the)i Fi(spin-he)l(aps)p Fo(.)42
b(Applying)30 b(the)f(construction)f(giv)n(es)g(us)h(the)g(t)n(w)n(o)g
(spin)g(represen)n(tations)e(of)i(the)300 3041 y(orthogonal)c(groups.)
36 b(The)27 b(results)h(are)e(completely)i(general)e(but)i(w)n(e)f
(illustrate)g(them)i(with)f(the)g(case)e Fm(n)d Fo(=)g(5.)1108
4186 y
 tx@Dict begin tx@NodeDict begin {85.35823 21.33955 } false /N@A 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {113.81097 42.67911 } false /N@B 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186
a
 tx@Dict begin tx@NodeDict begin {142.26372 64.01866 } false /N@C 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {56.90549 42.67911 } false /N@D 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {85.35823 64.01866 } false /N@E 10
{InitPnode } NewNode end end
 1108
4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {113.81097 85.35822 } false /N@F 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {56.90549 85.35822 } false /N@H 10
{InitPnode } NewNode end end
 1108 4186
a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {85.35823 106.69777 } false /N@I 10
{InitPnode } NewNode end end
 1108 4186 a 1108 4186 a
 tx@Dict begin tx@NodeDict begin {56.90549 0.0 } false /N@K 10 {InitPnode
} NewNode end end
 1108 4186 a 1108
4186 a
 tx@Dict begin tx@NodeDict begin {56.90549 128.03732 } false /N@J 10
{InitPnode } NewNode end end
 1108 4186 a 1796 4035 a Fo(2)2032 3858 y(3)2269
3681 y(4)1560 3858 y(0)1796 3681 y(2)2032 3504 y(3)-514
b(1)1796 3326 y(2)1560 4212 y(1)1560 3149 y(0)1108 4186
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186
a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108
4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@C /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@J /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108 4186 a 1108 4186 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@K /N@A InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1108
4186 a 1943 4526 a Fm(F)12 b Fo(\()p Fm(D)2109 4538 y
Fk(5)2146 4526 y Fm(;)i Fo(1\))400 4785 y(The)24 b(lattice)h(of)g
(ideals)f(of)g Fm(F)12 b Fo(\()p Fm(D)1395 4797 y Fk(5)1433
4785 y Fm(;)i Fo(1\))24 b(is)h(isomorphic)e(to)h(the)i
Fm(E)2366 4797 y Fk(6)2403 4785 y Fo(-heaps)e Fm(F)12
b Fo(\()p Fm(E)2817 4797 y Fk(6)2855 4785 y Fm(;)i Fo(1\))24
b(or)g Fm(F)12 b Fo(\()p Fm(E)3247 4797 y Fk(6)3284 4785
y Fm(;)i Fo(5\),)26 b(and)e(con)n(tains)300 4884 y(16)29
b(elemen)n(ts.)45 b(In)30 b(general)f(the)h(spin-heaps)g
Fm(F)12 b Fo(\()p Fm(D)1909 4896 y Fl(n)1954 4884 y Fm(;)i
Fo(1\))30 b(and)g Fm(F)12 b Fo(\()p Fm(D)2425 4896 y
Fl(n)2470 4884 y Fm(;)i(n)20 b Fj(\000)g Fo(1\))30 b(ha)n(v)n(e)f(2)
3002 4854 y Fl(n)p Fh(\000)p Fk(1)3162 4884 y Fo(ideals,)h(whic)n(h)g
(is)g(th)n(us)300 4984 y(the)38 b(dimension)f(of)g(the)g(corresp)r
(onding)e(\(spin\))j(represen)n(tations.)64 b(The)37
b(Cli\013ord)g(algebra)e(usually)i(used)g(to)300 5083
y(de\014ne)c(these)f(represen)n(tations)f(is)h(here)g(encapsulated)g(b)
n(y)h(the)g(parit)n(y)e(functions.)52 b(Let's)33 b(illustrate)f(the)h
(spin)300 5183 y(represen)n(tation)25 b(b)n(y)h(exhibiting)g(the)h
(raising)e(op)r(erator)g Fm(X)2156 5195 y Fl(\013)2229
5183 y Fo(for)h Fm(\013)e Fo(=)e Fm(\016)2556 5195 y
Fk(1)2610 5183 y Fo(+)15 b(2)p Fm(\016)2769 5195 y Fk(2)2822
5183 y Fo(+)h Fm(\016)2940 5195 y Fk(3)2993 5183 y Fo(+)g
Fm(\016)3111 5195 y Fk(4)3164 5183 y Fo(+)f Fm(\016)3281
5195 y Fk(0)3319 5183 y Fo(.)36 b(There)26 b(are)f(four)300
5283 y Fm(\013)p Fo(-la)n(y)n(ers)h(whose)h(shap)r(es)g(are)f(the)i
(follo)n(wing.)p eop
%%Page: 10 10
10 9 bop 0 66 a Fk(10)1420 b(N.)22 b(J.)g(WILDBER)n(GER)-373
873 y
 tx@Dict begin tx@NodeDict begin {85.35823 19.91684 } false /N@A 10
{InitPnode } NewNode end end
 -373 873 a -373 873 a
 tx@Dict begin tx@NodeDict begin {113.81097 39.83368 } false /N@B 10
{InitPnode } NewNode end end
 -373 873 a -373 873 a
 tx@Dict begin tx@NodeDict begin {142.26372 59.75052 } false /N@C 10
{InitPnode } NewNode end end
 -373
873 a -373 873 a
 tx@Dict begin tx@NodeDict begin {56.90549 39.83368 } false /N@D 10
{InitPnode } NewNode end end
 -373 873 a -373 873 a
 tx@Dict begin tx@NodeDict begin {85.35823 59.75052 } false /N@E 10
{InitPnode } NewNode end end
 -373 873 a -373
873 a
 tx@Dict begin tx@NodeDict begin {56.90549 0.0 } false /N@K 10 {InitPnode
} NewNode end end
 -373 873 a 315 734 a Fo(2)551 569 y(3)788 404 y(4)79
569 y(0)315 404 y(2)79 900 y(1)-373 873 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@K /N@A InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873 a
-373 873 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873 a -373 873 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873 a -373 873
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873 a -373 873 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873 a -373 873 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 -373 873
a 572 1072 a
 tx@Dict begin tx@NodeDict begin {85.35823 19.91684 } false /N@A 10
{InitPnode } NewNode end end
 572 1072 a 572 1072 a
 tx@Dict begin tx@NodeDict begin {113.81097 39.83368 } false /N@B 10
{InitPnode } NewNode end end
 572 1072 a 572 1072
a
 tx@Dict begin tx@NodeDict begin {142.26372 59.75052 } false /N@C 10
{InitPnode } NewNode end end
 572 1072 a 572 1072 a
 tx@Dict begin tx@NodeDict begin {56.90549 39.83368 } false /N@D 10
{InitPnode } NewNode end end
 572 1072 a 572 1072 a
 tx@Dict begin tx@NodeDict begin {85.35823 59.75052 } false /N@E 10
{InitPnode } NewNode end end
 572 1072
a 572 1072 a
 tx@Dict begin tx@NodeDict begin {56.90549 79.66736 } false /N@H 10
{InitPnode } NewNode end end
 572 1072 a 1260 933 a Fo(2)1496 768 y(3)1732
603 y(4)1024 768 y(0)1260 603 y(2)1024 437 y(1)572 1072
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@B InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072 a 572 1072 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072 a 572 1072 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@B /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072
a 572 1072 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072 a 572 1072 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@A /N@D InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072 a 572 1072
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 572 1072 a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {142.26372 59.75052 } false /N@C 10
{InitPnode } NewNode end end
 1517 1153 a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {56.90549 39.83368 } false /N@D 10
{InitPnode } NewNode end end
 1517
1153 a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {85.35823 59.75052 } false /N@E 10
{InitPnode } NewNode end end
 1517 1153 a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {113.81097 79.66736 } false /N@F 10
{InitPnode } NewNode end end
 1517 1153
a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {56.90549 79.66736 } false /N@H 10
{InitPnode } NewNode end end
 1517 1153 a 1517 1153 a
 tx@Dict begin tx@NodeDict begin {85.35823 99.5842 } false /N@I 10
{InitPnode } NewNode end end
 1517 1153 a 2677
684 a Fo(4)1969 849 y(0)2205 684 y(2)2441 519 y(3)-514
b(1)2205 353 y(2)1517 1153 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@D /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1517 1153 a 1517 1153 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end

1517 1153 a 1517 1153 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1517 1153 a 1517 1153 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@H InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1517
1153 a 1517 1153 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1517 1153 a 1517 1153 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 1517 1153
a 2462 1234 a
 tx@Dict begin tx@NodeDict begin {142.26372 59.75052 } false /N@C 10
{InitPnode } NewNode end end
 2462 1234 a 2462 1234 a
 tx@Dict begin tx@NodeDict begin {85.35823 59.75052 } false /N@E 10
{InitPnode } NewNode end end
 2462 1234 a 2462
1234 a
 tx@Dict begin tx@NodeDict begin {113.81097 79.66736 } false /N@F 10
{InitPnode } NewNode end end
 2462 1234 a 2462 1234 a
 tx@Dict begin tx@NodeDict begin {56.90549 79.66736 } false /N@H 10
{InitPnode } NewNode end end
 2462 1234 a 2462 1234
a
 tx@Dict begin tx@NodeDict begin {85.35823 99.5842 } false /N@I 10
{InitPnode } NewNode end end
 2462 1234 a 2462 1234 a
 tx@Dict begin tx@NodeDict begin {56.90549 119.50104 } false /N@J 10
{InitPnode } NewNode end end
 2462 1234 a 3622 765 a Fo(4)g(2)3386
600 y(3)3150 434 y(2)2914 600 y(1)2914 269 y(0)2462 1234
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462 1234 a 2462 1234 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@H /N@E InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462 1234 a 2462 1234 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@E /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462
1234 a 2462 1234 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@I /N@F InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462 1234 a 2462 1234 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@J /N@I InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462 1234
a 2462 1234 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 8.0
8.0 0 0 /N@F /N@C InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2462 1234 a 100 1447 a Fo(\(The)35 b(relativ)n(e)e(parit)
n(y)h(of)h(these)g(four)f(la)n(y)n(ers)f(is)h(+)p Fm(;)14
b Fo(+)p Fm(;)g Fj(\000)p Fm(;)g Fj(\000)33 b Fo(resp)r(ectiv)n(ely\).)
58 b(Th)n(us)35 b Fm(X)2927 1459 y Fl(\013)3008 1447
y Fo(acts)g(in)g(non-zero)0 1546 y(fashion)i(only)f(on)h(the)h(four)f
(ideals)f(directly)h(b)r(elo)n(w)g(these)g(la)n(y)n(ers,)h(and)f(sends)
g(eac)n(h)f(to)h Fj(\006)g Fo(the)g(union)h(with)0 1646
y(the)33 b(corresp)r(onding)e(la)n(y)n(er.)50 b(Apart)32
b(from)h(the)g(spin-heaps)f(for)g Fm(D)2145 1658 y Fk(5)2215
1646 y Fo(there)g(is)h(also)e(the)i(heap)g Fm(F)12 b
Fo(\()p Fm(D)3210 1658 y Fk(5)3247 1646 y Fm(;)i Fo(4\))32
b(whic)n(h)0 1746 y(corresp)r(onds)h(to)j(the)f(so-called)f(`standard)h
(represen)n(tation')e(of)i(dimension)h(10)e(of)h Fm(so)p
Fo(\(10\).)60 b(More)35 b(generally)0 1845 y(the)d Fm(D)216
1857 y Fl(n)261 1845 y Fo(-heap)g Fm(F)12 b Fo(\()p Fm(D)658
1857 y Fl(n)703 1845 y Fm(;)i(n)21 b Fj(\000)g Fo(1\))32
b(has)g(a)f(lattice)i(of)f(ideals)f(isomorphic)g(to)h
Fm(F)12 b Fo(\()p Fm(D)2519 1857 y Fl(n)p Fk(+1)2648
1845 y Fm(;)i(n)p Fo(\))32 b(with)h(2)p Fm(n)f Fo(elemen)n(ts,)h(the)0
1945 y(dimension)28 b(of)f(the)h(corresp)r(onding)e(standard)g
(represen)n(tation)g(of)i Fm(so)p Fo(\()p Fm(n)p Fo(\).)0
2087 y(c\))40 b(The)f(case)f Fm(E)539 2099 y Fk(6)577
2087 y Fm(:)122 b Fo(Eac)n(h)39 b(of)g(the)h(min)n(uscule)f
Fm(E)1660 2099 y Fk(6)1698 2087 y Fo(-heaps)f Fm(F)12
b Fo(\()p Fm(E)2126 2099 y Fk(6)2164 2087 y Fm(;)i Fo(1\))39
b(and)g Fm(F)12 b Fo(\()p Fm(E)2645 2099 y Fk(6)2683
2087 y Fm(;)i Fo(5\))39 b(ha)n(v)n(e)f(27)g(ideals.)72
b(The)0 2186 y(corresp)r(onding)26 b(27)g(dimensional)h(realizations)f
(of)h Fm(E)1695 2198 y Fk(6)1760 2186 y Fo(are)g(the)h(smallest)f(p)r
(ossible,)g(and)g(are)g(related)g(to)g(the)h(27)0 2286
y(lines)35 b(on)g(a)g(cubic.)59 b(The)36 b(lattice)f(of)g(ideals)g(of)g
(eac)n(h)f(of)h(the)h(ab)r(o)n(v)n(e)d(heaps)i(is)g(isomorphic)f(as)g
(a)h(distributiv)n(e)0 2385 y(lattice)c(to)g Fm(F)12
b Fo(\()p Fm(E)520 2397 y Fk(7)558 2385 y Fm(;)i Fo(6\).)47
b(Eac)n(h)30 b(of)h(the)h(36)e(raising)g(and)h(lo)n(w)n(ering)e(op)r
(erators)g(ma)n(y)i(b)r(e)g(concretely)f(visualised)h(as)0
2485 y(transformations)g(of)i(this)h(lattice)f(in)h(that)f(eac)n(h)f
(no)r(de)i(is)f(sen)n(t)g(to)g(a)f(m)n(ultiple)i(of)f(another)g(no)r
(de)g(or)f(to)h(zero.)0 2585 y(Since)e(in)g(practice)e(most)i(of)f
(these)h(op)r(erators)e(are)g(quite)i(simple,)h(it)f(is)f(not)h(imp)r
(ossible)f(with)h(some)f(patience)0 2684 y(to)k(represen)n(t)e(the)i
(en)n(tire)f(Lie)h(algebra)e(on)h(a)h(large)e(cop)n(y)h(of)g
Fm(F)12 b Fo(\()p Fm(E)2167 2696 y Fk(7)2205 2684 y Fm(;)i
Fo(6\))34 b(with)g(signed)f(arro)n(ws)e(for)i(the)h(raising)0
2784 y(op)r(erators)26 b(b)r(et)n(w)n(een)h(appropriate)f(v)n(ertices.)
0 2926 y(d\))31 b(The)f(case)f Fm(E)521 2938 y Fk(7)558
2926 y Fm(:)83 b Fo(There)30 b(is)g(only)g(one)f(min)n(uscule)h
Fm(E)1781 2938 y Fk(7)1819 2926 y Fo(-heap,)g Fm(F)12
b Fo(\()p Fm(E)2229 2938 y Fk(7)2267 2926 y Fm(;)i Fo(6\),)30
b(and)g(it)h(is)f(not)g(hard)f(to)h(coun)n(t)g(that)0
3025 y(there)19 b(are)g(56)g(ideals)g(of)h(this)g(lattice,)h(so)e(the)h
(corresp)r(onding)e(represen)n(tation)g(of)h Fm(E)2609
3037 y Fk(7)2666 3025 y Fo(is)h(56)f(dimensional)g(\(also)g(the)0
3125 y(smallest)25 b(p)r(ossible\).)36 b(Eac)n(h)24 b(of)h(the)g(63)f
(raising)g(and)h(lo)n(w)n(ering)e(op)r(erators)g(ma)n(y)h(again)g(b)r
(e)i(concretely)e(visualised)0 3224 y(as)j(transformations)f(of)h(this)
h(lattice)g(of)f(ideals,)g(whic)n(h)h(is)f(related)g(to)h
Fm(E)2320 3236 y Fk(8)2357 3224 y Fo(.)100 3366 y(These)34
b(constructions)f(are)g(v)n(ery)g(explicit)i(and)f(amenable)g(to)g(in)n
(v)n(estigation.)55 b(They)34 b(all)g(ha)n(v)n(e)f(the)i(rather)0
3466 y(remark)-5 b(able)28 b(prop)r(ert)n(y)g(that)h(the)h(Lie)f
(algebra)e(has)i(a)g(basis)f(for)h(whic)n(h)g(the)h(corresp)r(onding)d
(op)r(erators)g(all)i(act)0 3565 y(on)36 b(a)f(basis)g(of)h(the)g
(represen)n(tation)e(space)h(b)n(y)h(transformations)e(that)i(in)g
(matrix)f(form)h(ha)n(v)n(e)e(at)i(most)f(one)0 3665
y(non-zero)26 b(elemen)n(t)i(in)g(eac)n(h)e(column,)i(that)g(non-zero)e
(elemen)n(t)h(b)r(eing)h(either)g Fj(\006)p Fo(1.)100
3765 y(In)h(practice)f(this)h(means)f(that)h(the)h(corresp)r(onding)d
(op)r(erators)f(ma)n(y)j(b)r(e)g(visualised)f(acting)g(on)h(a)f
(lattice)h(of)0 3864 y(ideals)d(b)n(y)h(arro)n(ws)d(b)r(et)n(w)n(een)j
(no)r(des)g(with)g(lab)r(els)g Fj(\006)p Fo(1.)36 b(It)27
b(is)g(w)n(orth)f(p)r(oin)n(ting)g(out)h(that)g(the)h(lattice)f(of)f
(ideals)h(in)0 3964 y(eac)n(h)e(case)f(is)h(itself)h(a)f(distributiv)n
(e)g(lattice,)h(whic)n(h)g(with)g(the)f(exception)g(of)h
Fm(F)12 b Fo(\()p Fm(E)2604 3976 y Fk(7)2642 3964 y Fm(;)i
Fo(1\))25 b(is)g(one)g(of)g(the)h(min)n(uscule)0 4063
y(lattices.)71 b(This)39 b(is)g(part)f(of)h(a)g(remark)-5
b(able)37 b(`cascading')h(phenomenon)g(whic)n(h)h(links)g(all)g(the)g
(ro)r(ot)g(systems)0 4163 y(together)34 b(in)i(a)f(pleasan)n(t)f
(inductiv)n(e)h(pattern)h(\(see)f([16]\).)59 b(These)35
b(remarks)f(are)g(related)g(to)i(observ)-5 b(ations)33
b(of)0 4263 y(Stein)n(b)r(erg)27 b(and)h(Pro)r(ctor)d(\(see)j([9]\).)
100 4362 y(W)-7 b(e)20 b(lea)n(v)n(e)f(it)h(to)g(the)h(reader)e(to)h
(exp)r(erimen)n(t)g(with)g(these)g(represen)n(tations)e(to)i(\014nd)h
(man)n(y)f(further)g(remark)-5 b(able)0 4462 y(features.)1558
4652 y Fn(References)106 4785 y Fs([1])35 b(Behrend)22
b(R.,)g(P)n(earce)h(P)-6 b(.)21 b(and)i(Zub)r(er,)f(J-B.,)g(In)n
(tegrable)h(b)r(oundaries,)g(conformal)e(b)r(oundary)i(conditions)g
(and)g Fq(A)12 b Fc(\000)h Fq(D)h Fc(\000)f Fq(E)216
4868 y Fs(fusion)23 b(rules,)f(J.)i(Ph)n(ys.)f(A,)g(31,)h(no.50,)g
(L763-L770,)g(\(1998\).)106 4951 y([2])35 b(Iosifescu)17
b(M.)g(and)h(Scutaru)g(H.,)g(Kronec)n(k)n(er)g(pro)r(ducts,)h(min)n
(uscule)e(represen)n(tations,)i(and)f(p)r(olynomial)f(iden)n(tities)h
(J.)f(Math.)216 5034 y(Ph)n(ys.)23 b(31,)h(no.2,)f(264-277)i(\(1990\).)
106 5117 y([3])35 b(Kac)19 b(V.G.,)h(In\014nite)h(ro)r(ot)e(systems,)h
(represen)n(tations)g(of)g(graphs)f(and)h(in)n(v)l(arian)n(t)g(theory)
-6 b(,)21 b(In)n(v)n(en)n(t.)g(Math.)f(56,)g(57-92)g(\(1980\).)106
5200 y([4])35 b(Kac)d(V.G.,)h(In\014nite)h(ro)r(ot)e(systems,)i
(represen)n(tations)f(of)f(graphs)g(and)h(in)n(v)l(arian)n(t)g(theory)g
(I)r(I,)f(Journal)h(of)f(Algebra)g(77,)216 5283 y(141-162)24
b(\(1982\).)p eop
%%Page: 11 11
11 10 bop 874 66 a Fk(A)30 b(COMBINA)-5 b(TORIAL)29 b(CONSTR)n(UCTION)i
(F)n(OR)e(SIMPL)-5 b(Y{LA)n(CED)29 b(LIE)f(ALGEBRAS)480
b(11)406 266 y Fs([5])35 b(Marsh)22 b(R.,)h(Canonical)h(bases)f(for)g
(the)h(min)n(uscule)f(mo)r(dules)f(of)h(the)h(quan)n(tized)h(en)n(v)n
(eloping)g(algebras)f(of)f(t)n(yp)r(es)h Fq(B)j Fs(and)d
Fq(D)r Fs(,)516 349 y(Comm.)d(Algebra)i(25,)h(no.5,)f(1387-1411)j
(\(1997\).)406 432 y([6])35 b(Mo)r(o)r(dy)24 b(R.V.,)e(Ro)r(ot)i
(systems)f(of)g(Hyp)r(erb)r(olic)h(T)n(yp)r(e,)g(Adv)l(ances)h(in)e
(Mathematics)h(33,)g(144-160)h(\(1979\).)406 515 y([7])35
b(Hiller)d(H.,)k(Geometry)f(of)f(Co)n(xeter)h(groups,)h(Researc)n(h)f
(Notes)g(in)f(Mathematics,)j(54)e(Pitman\(Adv)l(anced)g(Publishing)516
598 y(Program\),)22 b(Boston,)i(1982.)406 681 y([8])35
b(Hiro)n(yuki)25 b(O.,)h(Ro)r(ot)h(lattices)g(and)g(w)n(eigh)n(t)g
(lattices)g(of)f(exceptional)i(simple)d(Lie)h(algebras)g(of)g(t)n(yp)r
(e)i Fq(E)h Fs(Commen)n(t.)c(Math.)516 764 y(Univ.)e(St.)g(P)n(aul)h
(46,)g(no.1,)f(23-31)h(\(1997\).)406 847 y([9])35 b(Pro)r(ctor)23
b(R.A.,)e(Bruhat)i(Lattices,)h(Plane)f(P)n(artition)h(Generating)g(F)-6
b(unctions,)24 b(and)f(Min)n(uscule)g(Represen)n(tations,)h(Europ.)516
930 y(J.)f(Com)n(binatorics)g(5,)g(331-350)i(\(1984\).)371
1013 y([10])35 b(Pro)r(ctor)24 b(R.A.,)e(Min)n(uscule)i(elemen)n(ts)f
(of)h(W)-6 b(eyl)24 b(groups,)g(the)h(n)n(um)n(b)r(ers)e(game,)g(and)h
Fq(d)p Fs(-complete)g(p)r(osets,)g(J.)g(Algebra)g(213,)516
1096 y(no.1,)f(272-303)i(\(1999\).)371 1179 y([11])35
b(Pro)r(ctor)23 b(R.A.,)f(Dynkin)h(diagram)f(classi\014cation)i(of)f
Fq(\025)p Fs(-min)n(uscule)f(Bruhat)h(lattices)h(and)g(of)f
Fq(d)p Fs(-complete)g(p)r(osets,)h(J.)e(Alge-)516 1262
y(braic)h(Com)n(bin.)f(9,)i(no.1,)f(61-94.)h(\(1999\))371
1345 y([12])35 b(Seshadri)d(C.S.,)i(Geometry)f(of)g Fq(G=P)10
b Fs(.)32 b(I.)h(Theory)g(of)f(standard)i(monomials)c(for)i(min)n
(uscule)g(represen)n(tations,)k(in)d(C.P)-6 b(.)516 1428
y(Raman)n(ujam|a)21 b(tribute,)j(207{239,)h(T)-6 b(ata)25
b(Inst.)f(F)-6 b(und.)24 b(Res.)f(Studies)i(in)e(Math.,)g(8,)h
(Springer,)f(Berlin,)f(1978.)371 1511 y([13])35 b(Stem)n(bridge)23
b(J.R.,)f(On)i(min)n(uscule)f(represen)n(tations,)h(plane)g(partitions)
g(and)g(in)n(v)n(olutions)g(in)f(complex)g(Lie)h(groups,)f(Duk)n(e)516
1594 y(Math.)g(J.,)g(no.2,)h(469-490)h(\(1994\).)371
1677 y([14])35 b(Tits)25 b(J.,)f(Les)i(group)r(es)f(de)h(Lie)f
(exceptionnels)i(et)f(leur)f(in)n(terpretation)h(g)n(\023)-33
b(eom)n(\023)g(etrique,)26 b(Bull.)e(So)r(c.)h(Math.)g(Belg.,)g(8,)h
(48{81)516 1760 y(\(1956\).)371 1848 y([15])35 b(Viennot,)24
b(G.)f(X.)g(Heaps)h(of)f(pieces)h(I:)g(Basic)f(de\014nitions)i(and)f
(com)n(binatorial)f(lemmas,)d(in)k(`Com)n(binatoire)3496
1831 y(\023)3489 1848 y(En)n(um)n(\023)-33 b(erativ)n(e')516
1931 y(\(G.)24 b(Lab)r(elle)g(and)g(P)-6 b(.)23 b(Leroux,)h(eds.\),)f
(pp.)h(321{350,)h(Lect.)f(Notes)h(in)e(Math.)h(V)-6 b(ol)23
b(1234,)h(Springer{V)-6 b(erlag,)24 b(Berlin,)e(1985.)371
2014 y([16])35 b(Wildb)r(erger)23 b(N.J.,)g(The)h(m)n(utation)g(game)f
(and)h(Co)n(xeter)h(graphs,)e(preprin)n(t)h(\(2001\).)400
2111 y Fb(E-mail)i(addr)l(ess)5 b Fs(:)33 b Fa
(n.wildberger@unsw.edu.au)400 2253 y Fr(School)25 b(of)g(Ma)l(thema)l
(tics,)f(UNSW,)h(Sydney,)g(NSW,)g(2052,)g(A)n(ustralia)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
